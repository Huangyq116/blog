<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DebugTalk</title>
  
  <subtitle>探索一个软件工程师的无限可能</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://debugtalk.com/"/>
  <updated>2020-01-30T03:26:44.055Z</updated>
  <id>https://debugtalk.com/</id>
  
  <author>
    <name>debugtalk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我的 2019 年终总结</title>
    <link href="https://debugtalk.com/post/my-2019-summary/"/>
    <id>https://debugtalk.com/post/my-2019-summary/</id>
    <published>2020-01-29T16:00:00.000Z</published>
    <updated>2020-01-30T03:26:44.055Z</updated>
    
    <content type="html"><![CDATA[<p>还有两天就农历新年了，我也拖家带口，踏上了回重庆老家的列车。按照往年惯例，每年的年终总结必不可少，这是对自己过去一年的交代，也是给未来的自己留点记录和回忆。趁着高铁上的空闲时间，我开始逼迫自己快速回忆这一年来的点点滴滴，整理成为 2019 年终总结。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>今年最大的变化就是告别工作三年的大疆来到了字节跳动，从技术管理岗再次转变为一线测试开发工程师岗。关于换工作的想法及历程，我在<a href="https://debugtalk.com/post/dji-graduated/">《写在大疆毕业之际》</a>进行了较多的记录，这里就不再重复。</p><p>从大疆离职之前，恰逢之前的接口测试平台做到一定阶段，测试数据方面的需求也越来越重，因此今年春节后就开始计划测试数据服务方面的建设。基本思路还是基于 HttpRunner，通过接口自动化和数据驱动相结合的方式，实现各种类型测试数据的生成，并通过将参数入参和生成结果进行映射存储，最终实现测试数据查询服务。当时我正在学习极客时间的<a href="https://time.geekbang.org/column/intro/100022301" target="_blank" rel="noopener">《10 倍程序员工作法》</a>专栏，被其中「以终为始」、「最小可行性产品（MVP）」的理念深深折服，因此在项目启动之初就在团队内部推广这些理念。大家的接受度很高，因此我们的项目迭代方式也尽量遵循这些方法论，用户故事规划、任务拆解都做得有模有样，也算是一段难忘的经历。</p><p>来到字节跳动以后，隶属于 Lark 业务线的测试开发团队。相比于之前，一个很大的不同点在于 Lark 这边没有产品测试团队（今日头条、抖音等部门都还是有独立的质量团队的），产品质量由研发团队全权负责。我个人是非常认可这种管理模式的，这也是我当初选择加入这边的一个主要因素。在明确“开发对质量负责”的基调下，不管是从流程还是实际操作层面，减少了沟通成本，大大提升了组织效率。并且这也迫使开发人员具有更高的质量意识，在开发过程中会更多地去主动关注代码质量和可测性，毕竟没有测试和运维人员再为自己的工作进行兜底，线上出了问题半夜 oncall 也不是那么好受的。而且我也惊奇地发现，在这种研发管理模式下，开发人员对测试普遍都比较热衷（虽然很无奈），不仅单元测试覆盖率普遍较高，各类自动化测试工具和框架也玩得特别溜，甚至会自行开发一些面向业务特性的测试工具。</p><p>当然，这对于测试开发团队也提出了更高的要求。相比于产品测试人员，开发人员对工具更加挑剔，而且他们最不缺的就是开发能力。要是测试开发提供的工具不好用，或者无法很好地解决他们的质量痛点，那么他们很有可能会自己去开发出一套工具。因此对于测试开发人员，扎实的开发能力只能算是最基本的能力要求；对研发质量保障的理解和积累、对测试工具的设计规划（品味）、面向具体业务技术特点的测试规划能力，这些才是更能体现测试开发价值的地方，也是业务开发团队需求更大的方面。</p><p>回到我在字节跳动这大半年的工作内容。全球化、跨租户、专私有化部署都是 Lark 业务的显著业务特点，业务开发团队在这些特性上普遍存在大量痛点，因此我们测试开发团队就重点围绕这些领域开展工作。内容太多，这里只重点回顾下全球化测试集群和私有化部署验收测试两个方面吧。</p><p>全球化测试这块儿，常见的案例就是某个国家地区的 VIP 用户投诉图片无法加载、文件无法上传、视频电话无法拨通等跨国连通性问题。如何先于用户及时发现问题、如何在用户投诉后快速复现排查问题，这都是业务开发急迫需要的能力。当时也是带着这些问题，我在公司内部的几大部门出差调研了一圈，最后幸运地在 IES（抖音、TikTok 所在的部门）找到了方案。说到国际化，TikTok 可以算是一个非常成功的全球化产品，当前已经在全球一百多个国家地区运营提供服务。与此同时，TikTok 也不可避免地面临着众多国际化带来的质量问题，因此 IES 之前就已经在全球数十个国家地区建设了测试机架（组成部分包括 MacMini + 手机 + 当地运营商 SIM 卡），并基于改进增强的 STF 方案给业务团队提供远程真机服务（该项目负责人黄冶在 <a href="https://testerhome.com/mtsc/2019" target="_blank" rel="noopener">MTSC 2019</a> 大会上也有分享）。既然都有 MacMini 了，那可以做的事情就很多了，假如我们将接口自动化测试和 UI 自动化测试跑在这些分布在全球各地的 MacMini 上，地理位置和当地网络都有了，那不就可以实现全球化的自动化拨测和问题复现了么？这里不得不赞下字节跳动的公司文化，部门间协作非常流畅，基本上只要能找到共同目标，都可以很好地达成合作（感谢黄冶团队的大力支持）。于是，我们就在 IES 国际化机架的基础上，建设了全球化测试集群。简单地说，全球化测试集群主要包括两部分，一个是统一的测试调度服务（Task Server），可以将任意类型的任务调度到任意指定的国家地区的设备上运行；另外一个是执行端（Task Worker），部署在全球各机架的 MacMini 上，可以拉取并执行测试任务。我是负责 Task Worker 端的开发（Python + Bash），主要需要解决的难点就是保障节点高可用率和尽量降低运维成本，具体做的事情包括实现在任意设备上一键部署，支持远程升级热更新（或版本回退），支持多种测试任务类型（API、Web UI、Android/iOS UI/Monkey），确保在遇到系统重启、网络中断、进程退出等异常事件后 Worker 能自动恢复正常工作（杀不掉、删不掉，跟病毒颇为相似）。也是因为全球化接口拨测具有普遍需求，因此 HttpRunner 也得以有机会推广到业务线，我也可以有机会投入部分工作时间继续对 HttpRunner 进行迭代开发。</p><p>在私有化部署这块儿，这应该算是 to B 业务相比于 to C 业务独有的需求特性，而且也存在较多的痛点。整个 lark 产品，十多个业务上百个系统数百个微服务，要实现私有化部署是非常复杂的事情，部署、配置、集成、验收、运维、onboarding，每个方面都涉及大量工作要做，如果没有完善的自动化能力，人工投入将会非常巨大。我们测试开发团队主要负责验收这一部分。那么多系统模块，那么多配置项，任意环节出问题后都可能造成系统功能的不可用，因此私有化部署后，功能验收必不可少。但很显然，我们团队没有足够的人力和时间自行去做功能测试，我们更多的是担任教练的角色，为各个业务线提供各端的测试工具和方法论，指引业务开发人员去做自动化测试建设，例如服务端团队需要进行接口自动化覆盖，移动端团队需要完成 Android/iOS UI P0 自动化覆盖。这部分工作我主要是负责接口测试工具方向，包括对 HttpRunner 本身拓展支持 Protobuf、Thrift RPC 等内部通讯协议，与公司内现有接口测试平台打通集成，规划建设更适用于 Lark 业务特点的接口测试平台等等。除了需要保障功能正常，私有化部署环境的硬件通常与字节跳动机房的硬件资源具有较大差异，甚至存在不同构的情况，因此私有化部署后的性能验收同样必不可少。我因为之前有过相对较多的服务端性能测试经验，因此就承担起了性能验收这部分的 owner。具体事项方面，压测工具平台是一方面，但不是主要的问题，公司内已经有多个成熟的压测平台，并支持多种压测模式，因此我做的更多的是工具选型，以及结合平台的压测技术方案规划。除了技术方面，更大的挑战在于如何协调那么多业务线开展性能验收，如何确定哪些业务必须要进行性能验收，具体要压测哪些场景，性能测试要压测到多大的并发量才合适，达到多大的吞吐量（QPS）才算是满足要求，这些都是需要在性能验收方案里进行明确的。显然，这些不能都靠拍脑袋，因此我就跟数据团队的同学进行合作，由他们基于当前 SaaS top 租户的数据进行统计，筛选出流量较高的接口，进而确定出需要覆盖的业务线和场景。场景确定了，就可以指导业务开发人员写出压测脚本；但对于压测来说，更难的在于压测数据的准备。因此，我这边还有个重点工作就是基于压测场景，与业务开发人员梳理出涉及到的压测数据类型，并统一规划压测数据的准备，打通测试数据服务等。具体的工作事项还有很多，这里就不再详细展开。对我而言，这些都是很好的锻炼和学习的机会，至少通过压测工作，我可以在短期内熟悉到当前业务线的技术架构，也在“赶鸭子上架”的节奏中，入门了 Go 语言。</p><p>不知不觉工作上的事情已经写了这么多。总体来说，入职字节跳动后的体验还是很不错的，公司内部文化非常开放透明，提倡「Context Over Control」，因此一线员工的自由度比较高，可以自己选择去做很多事情。而且由于 Lark 这边的去“QE”研发管理模式，我日常工作更多的是跟各个业务线的一线开发人员进行协作，方案评审、code review 之外，也接触了更多的开发设计和架构领域，这对自己的技术提升都起到了很好的促进作用。当然，我也有过不适应的地方。刚入职的一段时间感觉公司对外较为封闭，例如曾写过一篇《入职字节跳动两个月的个人体验》，由于涉及到一些公司文化方面的内容最终没能发出来；对外技术分享都需要经过严格的审核，因此各个技术大会上字节跳动的分享相对都比较少。但我后来也非常理解公司的做法，并认可公司的理念，「只有对外保密做得好，对内沟通才会更透明」。也是因为这样的制度，在公司内可以定期通过 CEO 面对面了解到公司的发展方向，研发员工可以获得非常开放的知识库和代码仓库开放权限等等，这些对于员工来说都是非常有益的。另外一块儿，就是不知道为啥，虽然公司没有 KPI 文化，没有要求上下班打卡，但大家都很拼，按照某同事的玩笑话说，就是「工作过于饱和」，完全没有摸鱼的闲暇时光。也许，这就是字节跳动这家公司的成功之处吧。</p><h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><p>接下来说下个人成长部分吧。</p><p>其实对于当前我所处的阶段而言，基本上除了生活就是工作了。而这里的个人成长部分，更多指的是抛开公司事务和生活之外的部分。</p><p>首先想说的是个人角色的转变，从技术管理岗再次转变成为一线工程师岗。之前跟朋友聊天时，朋友说从团队 leader 转为一线员工后通常会有些不适应，工作内容是一方面，更主要的可能是心理落差方面。其实对我而言还好，因为我本身也清楚当前自己的需求，希望能在一线获得更多的锻炼和积累。虽然说「屁股决定脑袋」，但经历过技术管理，习惯了站在团队整体去思考之后，重回一线后同样可以尝试去换位思考。很多时候站在团队甚至业务线的角度去思考问题，那么对于什么事情重要什么事情优先级更高，就会想得更加清楚。作为团队中的一名成员，我不负责建设团队管理制度，但我也会积极地参与进去。例如团队 OKR 管理、晨会制度、双周报形式这些日常工作方式，与其单纯地作为执行者，不如积极地参与到改进中去，提出优化方案，让自己所处的工作环境更舒适、更高效。其实说白了就是需要有「主人翁」心态，工作时不要觉得是在为公司打工，当做每件事情时保持创业心态，全身心投入后，产出结果和个人获得的成长收获都会大得多。</p><p>来到字节跳动后，我继续担任面试官，会参与技术面试工作。都说字节跳动的面试难度很高，同样地，公司对面试官也会有严格的要求。其中一个要求是每场面试都要有详细的面试记录，包括每一个面试问题和候选人的回答内容。这样做的好处非常明显，后续面试官可以查看到之前的面试内容，避免重复问题，而 HR 和终面面试官也可以更清晰地还原面试现场，对候选人进行更充分准确的评估。显然，一字不差地将候选人的回答记录下来不现实，也是没有必要的。而且很多时候候选人的回答思路比较混乱，我曾试过使用讯飞语记将语音实时转换为文字，发现也是完全没法看。因此这需要我在面试的过程中抓住候选人回答的要点进行记录，并同时聆听候选人的回答跟上思路。虽然之前在大疆已经前前后后参与了上百次面试，但刚在字节跳动实习面试的时候还是会有些不适应，记录速度跟不上是一方面，面试全程保持高度专注，精力消耗估计也不比候选人低。不过经过几次实习练习后，我总算可以正常适应了，后面也逐步习惯了这样的面试形式。在面试这块儿我还有个需要改进的点，就是对面试时间的把握，当前每场面试基本都要花费 1 个小时甚至更多时间。但实际上，在保障面试效果的基础上，面试时间是可以进行压缩的，而这本质上就是提问和识人的能力，这些方面我也需要持续进行锻炼和提升。</p><p>不同于往年，我今年基本上没有再去大会上进行分享。工作忙是一方面，更多的原因还是觉得自己当前的重心在于输入，需要在技术深度和项目能力上进行更多的沉淀和积累。但也有个例外，今年 <a href="https://testerhome.com/mtsc/2019" target="_blank" rel="noopener">MSTC 2019</a> 新开了个 TTF 开源项目专场，HttpRunner 作为 TTF 首批孵化的重点项目，缺席肯定是不合适了。因此我今年就去北京参加了 <a href="https://testerhome.com/mtsc/2019" target="_blank" rel="noopener">MSTC 2019</a>，分享主题为<a href="https://github.com/debugtalk/speech/blob/master/MTSC2019-HttpRunner-2.0.pdf" target="_blank" rel="noopener">《HttpRunner 2.0 技术架构与接口测试应用》</a>，重点介绍了 HttpRunner 2.0 方面的内容。出乎意料的是，最终经过听众投票，我的分享以 46% 的投票获得了「TTF &amp; 质量保障 2 专场」的<a href="https://testerhome.com/topics/20059" target="_blank" rel="noopener">第一名</a>，这是我第二次获得专场最高票数了，实在是受宠若惊，在此也非常感谢大家的认可和鼓励。关于大会的参会经历，我还写了一篇博客，<a href="https://debugtalk.com/post/MTSC-2019/">《我的 MTSC 2019 分享经历》</a>。</p><p>再说下我的个人开源项目「<a href="https://github.com/httprunner/httprunner" target="_blank" rel="noopener">HttpRunner</a>」。从 2017 年 6 月开始发布第一个版本，到现在已经快三年了，很庆幸这个项目还活着。截至当前，HttpRunner 的 GitHub <a href="https://github.com/httprunner/httprunner" target="_blank" rel="noopener">star</a> 数约 1.8k，并位于「<a href="https://testerhome.com/opensource_projects" target="_blank" rel="noopener">TesterHome 开源项目榜单</a>」第一位。今年思寒成立 TTF 基金会，HttpRunner 有幸成为了首批被赞助的项目。同时，HttpRunner 通过申请，获得了 Sentry 的开源项目支持。当然，收获认可越多，面临的压力也会更大。特别是当前 HttpRunner contributor 数虽然有 12 位，但基本都还是我个人在迭代和维护，当我工作比较忙之后，的确是很难再投入时间和精力在开源项目上。说到这里，前段时间才被用户骂了一次，「兼容性稀烂，发版前你做过 Windows 兼容性测试么？？？」，说实话还真没有；心里那个苦啊，自己没有 Windows 兼容性需求，周边也没有 Windows 设备可以用于进行验证，但 Windows 用户基数那么大，放弃兼容又不合适，只有硬撑着。看着 issues 数量逐步上升，我也越发地感觉到时间精力跟不上。庆幸的是，HttpRunner 在字节跳动内部逐步被部分业务线接受，我也有机会继续投入工作时间对 HttpRunner 进行迭代开发。另外，今年恒捷开始负责 TTF 开源项目，跟达峰和我一起筹划 TTF 开源项目运作机制，期望能吸引更多的人加入进来。开源项目只有形成了良好的社区和拥有稳定的核心开发者小组，才能可持续地发展下去，这也是 HttpRunner 接下来要努力的方向。</p><p>最后，对于博客公众号这块儿，今年基本上是荒废了，实在惭愧。原因有很多，但更多的都是借口，当内心懈怠懒成习惯以后，再捡起来就很难了。很久没写东西，手也生了不少，本篇年终总结写得也是格外费力。其实在很早之前我就认可一个观点，「最好的学习方式是教授别人」，而博客就是一个很好的实现方式。在新的一年里，加油吧。</p><p>总体来说，之前在 2018 年终总结中的困惑少了许多，我也感激自己再次跟随了自己内心的声音，勇敢地做出选择付诸了行动。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>再说下这一年的生活方面。不得不说，有了孩子以后，心态上会有比较大的变化，生活也都基本上是围绕着孩子。</p><p>众所周知，互联网公司的工作节奏比较快（网传字节跳动尤甚），普遍下班时间不会太早。当然，整体氛围是这样，但具体几点下班还是可以自己把握的。因此我给自己制定了一套时间安排，每周一周二周四会在公司待得比较晚（22~23 点），尽量多做些事情，包括工作上的事情和个人技术学习；周三和周五晚上会下班回家跟家人一起吃饭，有工作上的事儿就带电脑回家在家处理；周末则基本上就不再做工作上的事情，会开车带着家人出去玩（遛娃）。通过这种方式，也算是取得了一定的工作和生活的平衡。</p><p>这一年，小坚果满两岁了，随着他的语言能力越来强，我们的生活也多了许多趣味。例如在我早上要出门上班的时候，他会不舍地拉着我说“不上班”，或者说要“跟爸爸一起去上班”；我安慰他说过两天周末了我们就出去玩，问他到时候想去哪里玩，结果他的要求总是那么低，不是“玩沙沙”就是“找个有滑滑梯的公园玩”。我也沾了小坚果的光，这一年没有以前那么宅了，深圳大点的公园、景点基本上都去了个遍，深圳湾公园都不知道去了多少次。坚果妈在家的时候，他就经常嚷着要“接爸爸下班”；到了来福士，他会在办公区安全闸口候着我，有时候我有点事儿耽误了会儿，他就会跟他妈妈念叨，“怎么还没出来哦”，待看到我后就会冲上来让我抱，这也是我最幸福的时光。小坚果的记忆力也是惊人，很久前去过的地方、吃过的东西，他居然也会记得；有次我在读三字经，发现他居然可以接下句，于是我试着让他来背，发现他居然可以从“人之初”背到“贵以专”，着实令我惊叹不已。当然，这是小坚果乖的时候，调皮捣蛋起来也是忍不住想捶他得不得了。在家里经常把东西翻得到处都是，有时候故意把垃圾桶推倒然后就跑，还“嘎嘎嘎”地笑得特别有成就感。说到这儿又是气，高铁上在我用手机写这份年终总结的时候，他趁我不注意扑过来抢我手机乱点了几下，害得我丢了好多内容（在 apple notes 上没有版本回退）。跟小坚果的点点滴滴太多了，坚果妈在他两岁生日的时候写了一篇，<a href="https://mp.weixin.qq.com/s/nqOEi4mKcy-bsvF6WlIemw" target="_blank" rel="noopener">《来，我们一起》</a>，满满的温馨回忆。</p><p><img src="/images/xjg-2-birthday.jpeg" alt></p><p>从大疆离职后，我就告别了大疆的公租房福利，开始在外面租房了，这也是我第一次自行在深圳租房。为了上班方便，以及享受字节跳动的租房补贴福利，我就租在了公司旁边，走路十分钟的样子。怎么说呢，住得近也是有好有坏吧。好的方面，不用任何交通工具，每天在路上的时间非常短，再加上公司上班时间晚，因此我基本上都是睡到自然醒，差不多 9:40 才出门去公司（因为公司的早饭 10 点停止供应）。但也是住得太近，感觉就没有了上下班的感觉（俗称仪式感），基本上工作日就是两点一线，不是在公司上班就是在家睡觉，仿佛回到了中学住校的时候。有时候我甚至挺怀念之前开车上下班的时光，在开车的同时还能听下极客时间，而现在这个场景也彻底没了。</p><p>在深圳租房不得不面对的另外一块儿就是房租，七十来平的小两房，每个月房租加上物业水电费花费接近八千了，着实是一笔不小的开销。很多朋友都说，这租金都快赶上月供了，还不如买一套。说到在深圳买房，我之前是有考虑过，在 2018 年终总结中也困惑过。但现在我和老婆都想清楚了，算是彻底放弃了这个念头。深圳的房价已经这么高了，南山福田均价早已过了七八万，要再上车也不是不可以，但能买到啥品质的住房我也是清楚的。例如我当前租的这套楼龄十多年的小两房，当前市场价差不多也要 550 万的样子，而且还没有啥好学位。之前跟同事闲聊为啥要留在深圳的话题，同事的普遍说法是为了给孩子更高的起点，让孩子以后大学毕业后不再像我们这一代这样，还要纠结是否能留在一线城市。但我觉得那都太遥远了，先不说等孩子长大后社会形态如何，眼前的是深圳学位严重紧张，好点的学位房价格早已高攀不起，即使留在深圳，也无法给孩子提供好的教育资源和居住环境，那又何必呢？想清楚这些之后，也就没啥好纠结的了，还是过段时间去成都吧。</p><p>随着年龄的增大，我也越发地感受到健康的重要性。今年因为皮肤有些问题，跑了几趟医院。医生的说法是慢性荨麻疹，本身不是啥大的问题，主要是由于生活作息不规律、运动少、压力大、抵抗力下降造成的。这个春节爆发新型冠状病毒肺炎疫情后，我也初步了解了些健康相关的知识，对于身体抵抗力的重要性有了更多的认识。在过去的这些年，我在锻炼身体这方面的确做得很不到位，今年一时兴起每天中午到公司健身房跑步 5 公里，也就坚持了两个月。好在这两年身体还算健康没出啥大问题，今年的慢性荨麻疹也算是给我敲了个警钟，后面的日常锻炼必须得安排起来了。</p><h2 id="新年展望"><a href="#新年展望" class="headerlink" title="新年展望"></a>新年展望</h2><p>最后再展望下 2020 年吧。</p><p>1、持续提升个人的技术深度，特别是在服务端方向，充分学习并掌握字节跳动的统一技术栈。<br>2、深入学习 Go 语言（恰逢鼠年，Go 语言的吉祥物是土拨鼠，也算是应景），并将 Go 语言作为自己的第一生产力编程语言（替代 Python）。<br>3、HttpRunner 3.0 重构，支持更多的协议和应用场景，实现 Go 版本也不是不可能。<br>4、输入与输出相结合，系统性学习，勤思考，多输出，坚持技术博客创作。<br>5、学会生活，锻炼身体，陪伴家人，工作是长跑，讲究的是可持续发展。</p><h2 id="往年记录"><a href="#往年记录" class="headerlink" title="往年记录"></a>往年记录</h2><ul><li><a href="https://debugtalk.com/post/my-2018-summary/">《我的 2018 年终总结》</a></li><li><a href="https://debugtalk.com/post/my-2017-summary/">《我的 2017 年终总结》</a></li><li><a href="https://debugtalk.com/post/my-2016-summary/">《我的 2016 年终总结》</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还有两天就农历新年了，我也拖家带口，踏上了回重庆老家的列车。按照往年惯例，每年的年终总结必不可少，这是对自己过去一年的交代，也是给未来的自己留点记录和回忆。趁着高铁上的空闲时间，我开始逼迫自己快速回忆这一年来的点点滴滴，整理成为 2019 年终总结。&lt;/p&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="年终总结" scheme="https://debugtalk.com/categories/5-Growth/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://debugtalk.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>我的 MTSC 2019 分享经历</title>
    <link href="https://debugtalk.com/post/MTSC-2019/"/>
    <id>https://debugtalk.com/post/MTSC-2019/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年有幸第二次作为移动互联网测试开发大会（<a href="http://2019.test-china.org/" target="_blank" rel="noopener">MTSC 2019</a>）的讲师，在 TTF 开源项目专场分享了 HttpRunner 2.0 方面的内容。对于大会，这已经是连续第五届了，每年的规模也在逐步扩大，今年参会人数已经达到 2000+ 了，在此为组委会点个赞。</p><p>说起这次大会，能参加分享还真是挺意外的。因为今年上半年我主要都是在换工作的过渡期，感觉也没啥可以分享的内容，所以今年也没打算参加任何大会做讲师，想的还是再多积累沉淀下，等做出些东西后明年再看。前段时间茹炳晟老师邀请我参加 GIAC 做分享时，当时也是很不好意思地拒绝了。意外的是，五月底的时候思寒将我和孙圣翔（ATX 作者）拉了个小群，说希望在本次 MTSC 大会上搞个 TTF 开源项目专场，分享议题就是我们的开源项目，包括思寒自己的 <a href="https://github.com/seveniruby/AppCrawler" target="_blank" rel="noopener">AppCrawler</a>，孙圣翔的 <a href="https://github.com/openatx/uiautomator2" target="_blank" rel="noopener">ATX</a> 和我的 <a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener">HttpRunner</a>。这是大会的一个新的尝试，感觉挺有意思的，也是对开源项目进行宣传和推广的不错机会。特别地，当前 HttpRunner 仍然还主要是我一个人开发维护，或多或少有些孤独，要是能借此机会吸引一些小伙伴一起来做就更好了。所以，我也就欣然接受了这次参加大会做分享的机会。</p><p>答应下来后，就需要开始准备分享议题了。我们这个专场相比于其它会场还有点特殊，除了会更多聚焦于开源项目本身外，还会多一个现场演示环节，让听众能更好地体验到项目的功能和特色。那么在准备的时候，除了 Keynote 外，就还得准备好演示的案例。而恰恰是这个演示案例，在经过一些尝试后发现并没有想象中的那么容易。首先，这不能是一个纯粹的 demo，会显得太没诚意，肯定要结合真实的应用或业务场景。而涉及到业务场景的话，挑选的被测对象一定要稳定，不然在现场演示时出现点意外就比较尴尬；同时不能涉及太多的业务概念或业务逻辑，要在现场演示那么短时间内让听众先熟悉这些概念，本身就是一个比较高的理解成本，而且会显得喧宾夺主，毕竟听众重点要听的是测试框架的使用。当时思寒跟我推荐企业微信的接口，我看过官方文档后也是因为涉及较多业务概念而放弃了。因此，现场演示挑选的功能场景一定要简单，最好对听众来说不要有任何理解成本。但光是简单还不行，还得能覆盖接口测试时常见的一些机制，包括参数关联、隐私变量处理、公共变量处理、参数化、测试用例分层等等。挑来挑去，最后发现我平常用的大纲笔记 <code>幕布</code> 就挺合适，而且它现在也是字节跳动旗下的产品，假如遇到技术问题直接跟项目开发人员沟通也方便。</p><p>确定演示案例后，我自己也尝试了下脚本开发调试全流程，功能实现是没什么问题，但是操作总是不够流畅，特别是稍微遇到个问题卡一下壳，时间就会变得完全不可控。平时操作还好，但要在分享现场面对三四百号听众的时候，心境可能又是完全不一样了。不过我还是不想就这样放弃了，毕竟是开源项目专场，如果只是讲讲 Keynote 或者播放个视频回放，风险是降低了，但实际效果就大打折扣了。于是，我还是明确了采用现场演示的形式，只是要提前解决好可能存在的问题。其实仔细想想，使用测试框架开发调试脚本的操作不流畅，说明框架本身还是存在易用性的问题。因此，我也在准备案例的过程中，重点针对体验方面的问题进行了一些优化，包括工程脚手架脚生成、脚本格式展示、默认参数配置、日志展示等，直到达到自己相对满意的状态。</p><p>后来跟孙圣翔交流时得知，他也是在准备案例演示时对 ATX 进行了一些优化，发布了多个优化的小版本。通过这个共性的现象，我觉得是可以得出一些有指导意义的方法论的。</p><blockquote><p>我们做工具框架时还是要多站在演示的角度，演示不是目的，但它可以营造条件，倒逼我们去对工具进行极致优化和改进。这也跟我之前推崇的一个观点非常类似，知识只有做到可以通过文字或语言通俗易懂地教授给别人，才算是真正理解和掌握了。</p></blockquote><p>实际在现场分享时，现场来的听众比预期中多了不少，将整个会场塞得满满的，在此也十分感谢大家的关注和支持。而我自己比较出乎意料的是，从头到尾基本上没有紧张的感觉，可能是之前已经有过多次大会分享的经历了吧，也可能是自己心态变好（脸皮变厚）了，想好最坏的结果无非就是现场演示出现意外，然后在一阵“哈哈哈”中拿出事先录制好的演示视频，总不会被轰下去吧。庆幸的是，现场网络环境、被测对象、框架和脚本都很稳定，最终演示也一切顺利。不过时间把控还是没有做好，最后没有剩下时间跟大家 Q&amp;A 互动，颇为遗憾。</p><p><img src="/images/MTSC2019-1.jpeg" alt></p><p><img src="/images/MTSC2019-2.jpeg" alt></p><p>现场演示出现小意外时，表情被摄影师捕获到了，😝</p><p>另外，很开心的是又一次跟行业内的朋友们聚在一起。平时大家都是分散在全国各地的网友，即使是同在一个城市，因为时间关系也很少见面。有了 MTSC 后，大会已经成为了大家每年一聚的节日，大家聚在一起闲扯下近况和八卦，兴致来了再合个影，这些都是我们终将逝去的青春啊。</p><p>最后，祝愿 MTSC 越来越好，我们明年再见！</p><p><img src="/images/MTSC2019-3.jpeg" alt></p><p>附录：本次分享的 Keynote <a href="https://cn.httprunner.org/attachments/MTSC2019-HttpRunner-2.0.pdf" target="_blank" rel="noopener">下载链接</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年有幸第二次作为移动互联网测试开发大会（&lt;a href=&quot;http://2019.test-china.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MTSC 2019&lt;/a&gt;）的讲师，在 TTF 开源项目专场分享了 HttpRunner 2.
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="演讲记录" scheme="https://debugtalk.com/categories/5-Growth/%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="演讲" scheme="https://debugtalk.com/tags/%E6%BC%94%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>写在大疆毕业之际</title>
    <link href="https://debugtalk.com/post/dji-graduated/"/>
    <id>https://debugtalk.com/post/dji-graduated/</id>
    <published>2019-05-08T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>2019 年 5 月 9 日，是我加入大疆创新刚好三周年的日子，也是我从大疆毕业的日子。非常感谢在大疆的三年时光，伴随着大疆的快速发展，我收获了许多成长，也完成了诸多人生中的大事，结了婚、生了娃，尝试了技术管理。庆幸的是，这三年来我每年都有写年终总结，详细记录了成长过程中的心路历程，回过头看，也是感慨万千，这些都将是我人生中最美好的回忆。</p><p>在开启新的职业旅程之前，我想通过这篇文章对自己的想法和选择进行下记录。</p><h2 id="换工作的想法"><a href="#换工作的想法" class="headerlink" title="换工作的想法"></a>换工作的想法</h2><p>首先，为什么想换工作了？是大疆不好么？</p><p>大疆并没有不好。恰恰相反，大疆仍然是我心目中崇敬的世界级科技公司。在这几年，我也切身感受到大疆越来越好，不管是流程规范还是员工福利方面。对应到我个人，领导给了我非常大的认可和施展的空间，而公司也给了我丰厚的激励回报，包括 Top绩效排名、职级晋升、内部股奖励、免费人才住房、150万无息购房贷款资格等等。可以确切地说，在大疆只要你做得好，确实是可以获得丰厚回报的，所以对于想来大疆的朋友也不要有顾虑。</p><p>而最终确定离开大疆，的确也是我综合个人当前阶段职业发展诉求后确定的想法。</p><p>在<a href="https://debugtalk.com/post/my-2018-summary/">《我的 2018 年终总结》</a>中，我也聊到了当前阶段面临的困惑，当时罗列了诸多没有想清楚的问题，后来我又仔细想了下，归根结底，我觉得问题还是在于自己当前的技术视野局限性。虽然我也去一些大会做了分享并收获了不少好评，但在我自己看来，我当前的技术积累还是远远不够，甚至是局限于皮毛的。这肯定不是我想要的状态。</p><p>另外，我个人一直存在着一个较大的短板，那就是缺乏对特定业务领域的持续积累。最开始在工信部电子五所的时候做的第三方测评，接触的行业太多太杂，电子政务、电网、互联网、交通、石化、民爆等都有涉及；后来去了 UC 做测试开发，当时主要是纯技术研发，基本上也没有涉及到公司业务；而到了大疆这家智能硬件的生产制造企业以后，也是根据工作需要，在电商、生产制造供应链、企业 IT 信息化等系统之间切换。说的好听点是见多识广，实际情况就是业务方面啥也不精。</p><p>再加上在大疆待了三年，做了团队管理者，我感觉自己也在逐渐走入舒适区，这对我而言也是一个十分危险的信号。因此，想着现在才刚过三十，自己也还有动力和体力去折腾，那我就不妨再折腾一次吧。</p><p>确定了内心的诉求后，离职的想法也就明确了，接下来就是开始尝试去接触新的公司了。</p><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><p>回想起之前每一次找（换）工作，感觉自己也挺草率的，不管是校招进工信部电子五所，还是从五所到 UC，UC 到大疆，都是只面一家，通过后就定下来了。现在想来，要是当时校招时勤快点多面几家公司，现在的路可能就又很不一样了吧。因此，这次在一开始就告诫自己要克服懒癌，多面几家，在面试的过程中确定出最适合自己的，毕竟换工作的成本是越来越高的。</p><p>得益于身处互联网行业，在拉勾网上更新简历后，就有不少猎头和 HR 开始主动联系了。另外，跟一些朋友聊了想法后，他们也热心地帮我做了引荐。再次得益于互联网行业，面试基本都可以通过电话或视频，而且可以安排在晚上，因此基本上不用请假。</p><p>这次接触的公司还是挺多的，包括 OPPO、腾讯（PCG &amp; 游戏 &amp; 微信）、蚂蚁金服（IOT &amp; 国际）、字节跳动、shopee。当然，这里面也并不是全都去完整聊过。例如腾讯游戏，那边 HR 联系后，约了电话面试时间，后面因为其它事情改了几次时间，但最主要还是因为我自己对游戏兴趣不大，平时也不玩游戏，所以最后就没去面了。而腾讯微信，因为是在广州，而且面试轮数至少有六七轮，想想都好累，所以就放弃了（还是太懒，囧）。</p><p>实际参加面试的有 6 家，时间上没有严格的先后，但大致的顺序是 Oppo、蚂蚁金服IOT、腾讯PCG、字节跳动、shopee、蚂蚁金服国际。最后面试的结果，有两家没通过，四家通过。</p><h3 id="失败经历"><a href="#失败经历" class="headerlink" title="失败经历"></a>失败经历</h3><p>先从面试失败的两家说起吧。</p><p>一个是蚂蚁金服的 IOT，当时 HR 跟我联系的时候，因为之前我对 IOT 也有大致的了解，感觉前景也很不错，因此就打算尝试下。不过在细看岗位描述后，发现基本都是偏嵌入式的，对于编程语言也都是要求 C/C++，对此也向 HR 表达了疑惑和顾虑。而 HR 给我的回答是没关系，不强制要求语言，也不要求有嵌入式的背景，总之就是没问题的快来面试吧。然后我就接受了面试邀请，约了某个晚上的视频面试。结果在开始面试后，着实也惊了一把。接通视频后，面试官没有任何寒暄，也没让我做自我介绍，直接发给我一道链表相关的算法题，要求我用 C/C++ 语言实现。呃，说好的编程语言不限呢。但我也是在大学毕业后基本上就没再写过 C 语言，C++ 更是从没学过，于是只能硬着头皮说我只能用 Python 来写，但 Python 里面没有指针和链表数据结构啊，我就只有想着先用 Python 构造一个链表的存储结构。想法是这样，但最后终究没有给出正确的代码实现。狼狈地结束了代码部分后，才开始面试问答环节，基本上也是岗位需要的内容（嵌入式）我没相关经验，我擅长的部分面试官没怎么接触。在面试的最后，我也问了面试官几个感兴趣的问题，诸如蚂蚁金服的 IOT 跟阿里云的 IOT 业务有啥差异，在蚂蚁金服官网上写的三大战略方向是国际、农村和绿色金融，那 IOT 在其中是什么角色定位，结果面试官都以公司机密不方便透露回绝了我。</p><p>另一个失败经历是腾讯的 PCG。本来是没有投递简历的，结果有一天一位没聊过的微信好友跟我发消息，说听思寒说我在看机会，问我要不要去他那儿聊下。问了以后才得知，他就是 PCG 的测试总监，当时着实也令我颇为惊讶，自己加了这么位大佬的微信居然都不知道。然后就约了个工作日晚上八点的时间过去聊，结果恰好那天他晚上有其它事情插入，于是就改为提前去腾讯食堂一起吃晚饭。就这样，我就去腾讯食堂蹭了一顿饭。说回聊的过程，大佬非常谦和，也跟我详细介绍了他们的各个业务线；因为业务中会有比较多的推荐算法，因此对算法背景的要求会比较高；另外也有一些相对偏传统的，接口、UI自动化测试之类的。同时他也了解了下我的想法，总之聊的过程是比较轻松愉快的。吃过晚饭也聊完了，大佬找了一位负责技术的面试官，就跟我开始了正式的面试。从总体面试的感觉来看，面试官对我之前在 UC 做 Android 客户端性能专项的那段工作经历最感兴趣，问的比较深比较细，估计也是跟他们的工作需求最为匹配吧，而由于我近三年在大疆基本都在 Web 和服务端方向，移动端没再接触，所以当时在 UC 涉及的技术细节很多也记不清了。后面在考察编程语言的基础知识时，问了我一些 C++ 方面的问题，而我的确没有学过 C++，也是比较尴尬。最后有个让我至今比较费解的点，在面试快结束的时候有听面试官说后续再聊，结果再详细看了我的简历，发现第一段工作经历在电子五所待了四年后，面试官的态度出现了些变化，结束面试后，就再也没了然后。后面我也没好意思去问大佬原因，应该就是不合适吧。</p><p>这两场面试结束后我一度十分沮丧，颇受打击。虽然技术方向不匹配是一方面（蚂蚁金服的IOT，HR是为了拉人去凑数的吗？），但我也通过这次面试认识到自身存在的不足，主要有两大问题：</p><p>一方面，我在算法和数据结构方面存在较大不足，平时工作过程中用的很少。特别是在考察算法和数据结构时，通常都会涉及到链表、栈、二叉树等数据结构，而我熟悉的 Python 编程语言是没有指针和这些数据结构的。显然，为了面试现去学 C/C++ 肯定是来不及了，那么就需要尽快熟悉如何使用 Python 语言构造各种常见的数据结构，以及常见算法的 Python 实现。</p><p>另一方面，我对自己新工作的方向定位没有想清楚。当时 PCG 技术面试官问了我一个问题，我对这份新工作的期望是什么，更具体地，期望在哪些方面能有更大的提升，当时我也的确是没有想清楚的。同时，自己在面试时也没有针对性地展示自己的优势和特长。虽然自己之前各个方向都有做过，但像三年前在 UC 做的 Android 客户端性能方向，好多年没再接触，的确也是忘的差不多了。所以在面试过程中的确是需要对面试官主动进行一些引导，避免面试官在这些我不再熟悉的领域纠缠。</p><p>理清问题后，在接下来的几个周末里，我也针对性地做了补救准备。针对第一个问题，就是恶补算法和数据结构，特别是常见的算法数据结构，都尽量使用 Python 语言实现一遍。针对第二个问题，就是对自己的技能进行梳理，针对许久没有做过的技术方向，还是需要再至少找出一两个亮点进行回顾，避免问到该方面问题时完全懵逼；另外更主要的，就是想清楚自己后续的目标方向，对自己擅长的领域进行整理，并结合自己的工作经历，尽量准备好怎么在面试时将面试官的兴趣吸引到自己擅长的领域，以及怎么去更好地展现自己的成绩和亮点。</p><p>庆幸也是有了这么个突击准备，在后续面试中虽然没有都用上，但也从容了许多，基本上也没有再遇到什么太大的问题。</p><h3 id="成功经历"><a href="#成功经历" class="headerlink" title="成功经历"></a>成功经历</h3><p>接下来再讲下其它几家的面试经历。</p><h4 id="Oppo"><a href="#Oppo" class="headerlink" title="Oppo"></a>Oppo</h4><p>首先说下 Oppo，面的是其互联网部门，这是我最早面试的一家。其实那时我也还没有特别明确的想法，只是恰好当时卡总去了 Oppo，推荐我也过去看看，于是就答应了。最开始本来是约的晚上去和部门测试负责人（廖总）聊下，结果廖总也是客气，后面改为在外面一起吃饭，一起的还有卡总和另一位测试架构师。在席间其实也不算是面试，更多的还是闲聊，包括个人的工作情况和想法，以及了解了下那边的工作内容和规划。当时了解到的情况感觉还是很不错的，当前 Oppo 手机市场份额已经很高了，而且当前各大手机厂商的份额也基本开始固定，手机硬件利润也是越来越薄，急需在互联网软件方向上加大投入获取利润，毕竟 Oppo 作为亿级用户流量入口，可以施展的空间是非常大的。那次聊完后，廖总应该是给了我一个初步的定位（同时貌似也是过了第二轮部门面），接下来就是走正式的面试流程，包括第一轮技术面、第三轮 Oppo 测试总监面、第四轮 HR 面。效率还是非常高的，花了几个工作日晚上就聊完了。个人总体感觉，整个面试过程更多的都是围绕个人做过的项目（做了什么、怎么做的），以及一些宏观方法论、沟通协调能力、工作态度和换工作动机的考察，在技术基础细节和编码能力方面考察的很少。所以当时虽然是面试的第一家公司，也没有做过任何准备，但最后也都通过了面试。在此也给 Oppo 提个建议，技术基础细节和编码能力还是得多考察一些（近期华为在面试方面也做了很大调整，加大了编码能力考察力度），一方面可以提升面试候选人的技术准入门槛，另一方面也可以对外加强公司技术能力要求的形象，让候选人更多地感受到这是一家技术要求高、工程师文化强的公司。</p><p>在 Oppo 面试完成后，因为这还是我面的第一家，想再多聊下其它公司综合做下对比，所以当时就跟 HR 说明了想法，暂时先不给答复。然后，就是面了蚂蚁金服 IOT 和腾讯 PCG，前面也已经详述了这两段失败的经历。</p><h4 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h4><p>接下来就是在准备的过程中，有猎头推荐了字节跳动。其实当时猎头跟我推荐字节跳动的时候我内心是很抗拒的，因为那段时间网上也有很多文章抨击今日头条和抖音让太多人沉迷于其中，耗费大量时间，从政治正确的角度，当时我也的确是不太想去参与到该类产品。但猎头跟我聊的时候，她的观点我不得不认同，字节跳动能做出这么多爆款产品，其产品布局能力、基础设施技术建设、公司管理文化肯定都是相当优秀的，加入字节跳动肯定可以学习到很多。另一方面，她给我推荐的部门不是今日头条和 IES 互娱，而是其效率工程部，主要的业务方向做办公协作套件和效率工具，面向的是海外 B 端市场，并且公司在此方面也具有非常大的资源投入。而且当前国内各个大厂（BAT）主要的营收都在 C 端市场，与国际大厂（FLAG）B端、C端市场营收各占一半相比，国内 B 端市场还有相当大的空间，因此当前国内各大厂也都在加大 B 端市场的布局。当时也是基于这些信息，我产生了比较大的兴趣，打算去尝试下。但众所周知，字节跳动面试对算法的考察是非常严格的，在网上也看到了非常多的吐槽，再加上前面的面试失败经历，我当时也是完全没底儿。于是我在跟字节跳动约面试的时间时，特地往后延了一两周，主要也是想多争取点时间进行下突击准备。</p><p>总算到了约定的面试时间，虽然准备仍然非常不充分，但也没有办法，只能硬着头皮上了。字节跳动的面试都是通过视频进行，从面试体验上讲还是非常不错的，完全不比现场面试的效果差。从面试的内容上讲，考察的也的确是最深的（相比面试的其它几家而言），个人项目经历中涉及到的底层原理、计算机基础技术细节都问的比较多，而代码能力部分，在每轮技术面都会进行考察，要求做到运行正确且 bugfree，并且会针对写出的代码实现提出性能优化的要求。庆幸的是我遇到的题目都是常见的算法和数据结构，思路是知道的，剩下的就是代码工程能力了，相对来说问题不大。印象最深的是第一轮面试，面试官是李昶博（有兴趣可以在网上搜下他的信息），当时整场面试持续了两个小时，从晚上八点到十点多。之所以会持续这么久，主要是在代码部分，当时我最开始写完了实现，并且写了比较完善的单元测试用例（TDD）；也得益于这些单元测试用例，当时我因为有些紧张，虽然没有把算法实现想清楚，但也通过一些补丁的方式跑通了所有单元测试，实现了 bugfree。但面试官提出要求，这些补丁代码太丑陋，代码也存在冗余，要求将代码行数缩短到15行之内。然后我就继续优化，紧张加上心理压力，头脑有些发懵，调试也有些卡壳，总之不是很顺利，但面试官也非常耐心，不断对我进行引导，直到最终完成了目标。在面试结束的时候，他还针对我的编码过程，给了我两个十分中肯的建议，着实令我非常感动，对字节跳动的认可度也大幅增强。回顾字节跳动的面试历程，总共面了3轮技术面，1轮HR面。面试给我的总体感受，就是面试官都非常有活力，虽然年龄不一定小，但能明显感受到特别有朝气。</p><h4 id="Shopee"><a href="#Shopee" class="headerlink" title="Shopee"></a>Shopee</h4><p>在面试字节跳动的过程中，又有猎头跟我推荐了 Shopee，因为之前对该公司也有一定的了解，所以就参与了面试。</p><p>当时面试的是 Shopee 的金融业务线（Airpay），可以打个比方，Shopee 做的是东南亚市场的电商，如果类比淘宝，那么 Airpay 就类比支付宝，主要做的就是电子支付和信用卡方向。之前该业务是在新加坡，也是在不久前将整个业务迁到深圳，因此人员缺口比较大，也在重点招 leader 岗位。从总体的面试经历来看，在技术方面还是非常顺利的，一方面是技术栈比较匹配，面试难度适中，介于 Oppo 和字节跳动之间，没有遇到太大问题；另一个主要的原因是 Shopee 的另一条业务线告知 Airpay 这边的测试经理，他们那边有多个项目也在使用我个人的开源测试框架 HttpRunner，因此在这方面应该是给了我不少加分，Airpay 的测试经理也对我比较认可，定位为 leader 岗位。相对来说不大顺利的是第二轮面试，面试官是 Airpay 的业务线负责人。在这一轮面试时没有涉及到技术，主要都是对我个人在团队管理、沟通协作、职业规划方面的考察。当时在面试过程中我也很是纠结，一方面我个人想法是在技术方向有更深入的投入和积累，但同时因为岗位定位为 leader 岗，我也知道完全按照内心真实想法去回答肯定也不行，所以实际在回答时有些心口不一，着实难受。在二面中，面试官还问了我一个问题，自己觉得在性格方面的优缺点是什么，我当时也是很懵，优点能罗列出几个，但性格上的缺点怎么说呢，的确是不知道怎么回答，最后就勉强说了个不太会拒绝别人（囧）。本以为二轮面试挂了，毕竟自我感觉是很不好，但最后居然也通过了。然后第三轮面试就是 Shopee 在深圳的黄老板了，面试能去跟老板聊，着实也是个收获。黄老板的确是个很有意思（个性）的人，面试过程很随性，总共就聊了不到15分钟，这其中还包括我向他提问的五六分钟。后来听乙醇说他当时面试跟黄老板总共就聊了6分钟，估计风格就是如此吧。</p><p>在跟黄老板聊的时候，能感受到他的确是一个很有想法的人。当时我问了他一个问题：</p><blockquote><p>shopee 的直接竞争对手 lazada 是阿里系，团队狼性，加班凶猛，而 shopee 比较佛性，团队基本不加班。当然这只是战术层面的差异，并不能起到决定性的作用，想了解下从战略层面上，shopee 与 lazada 有哪些不同，来保障不会落后于竞争对手呢？</p></blockquote><p>黄老板的回答很谦虚，说战略层面的事情他也不懂，这是 CEO 关注的问题。但从他的角度来看，如果做事的方向错了，加班做得越多，也就错的越多。他还打了个比喻，公司做事跟骡子拉磨没啥区别，都是想让拉磨越快越好。但正确的做法无非就两个，一个是找更多的骡子一起来拉磨，即扩大团队规模，另一个就是将骡子换成马，即进行组织升级、提升团队战斗力；而让骡子加班加点去拉磨，虽然在短期内也可以达成目标，但骡子也会累的，从长期来看结果并不一定会更好。听完这回答我不禁肃然起敬，在当前遍地打鸡血搞 996 的环境下，老板能有这么正的价值观，着实难得。再说回做事的方向，当前 Shopee 跟 lazada 一个很大的不同点在于，Shopee 在东南亚各个国家的市场团队都是本地人员，更熟悉当地文化风俗，而 lazada 更多的是将国内淘宝的模式在东南亚各个国家进行复制。</p><p>然后我又问了他另外一个问题：</p><blockquote><p>当前 Shopee 内技术团队的地位和话语权是怎样的？（我问这问题的目的主要是想知道 Shopee 是不是一家技术导向的公司）</p></blockquote><p>结果他的回答让我很出乎意料。在他看来，公司内讲团队的话语权本就是个伪命题。各个部门团队也只是分工协作不一样，最终的目的都是达成公司的商业目标。接着他没有继续回答这个问题，而是做了个类比。从做事的难度来看，相比于互联网软件开发，生产电视机的工序更多更复杂，但做电视机技术人员的薪酬就是比不上互联网软件开发人员，这都是市场行情和岗位供求关系产生的结果。具体的我记不大清了，但确实感受到他的观点和想法角度很不一样，实在是佩服。</p><h4 id="蚂蚁金服国际事业部"><a href="#蚂蚁金服国际事业部" class="headerlink" title="蚂蚁金服国际事业部"></a>蚂蚁金服国际事业部</h4><p>最后还有一家是蚂蚁金服的国际事业部，这家是思寒找他熟悉的在蚂蚁金服的朋友（紫嫣）帮我内推的；后来我才知道原来我也加过紫嫣的微信，之前在 MTSC 都做过讲师，圈子的确也真是小哇。</p><p>对于蚂蚁金服，之前我也是有过一些了解，一方面是猎头推荐，还有就是跟朋友聊天时，大家都对其前（钱）景十分看好。从业务角度，做金融业务的确是不会过时的业务，按照卡总的说法，社会生产力总是少不了金融支撑的。而从技术角度，金融系统对系统的稳定性和可靠性要求非常高，质量保障也会是非常高的优先级。总的来说就是，不管是业务前景和个人职业发展，蚂蚁金服都是个挺不错的选择。</p><p>回到面试流程，其实蚂蚁金服国际并不是我最后才开始面试的，而是阿里的面试流程的确是很长，之前也听朋友说过，前前后后跨度三四个月是常有的事儿。好在紫嫣帮我做了很多协调工作，面试时间已经尽量缩短，但从开始面试到全部面完也花了一个多月。面试都是通过电话的形式，不得不说，相比于视频面试，电话面试的体验还是差了许多。而且有个比较神奇的事情就是，在前四轮技术面试过程中始终没有接触过 HR，也基本没有提前约面试，差不多都是面试官直接打电话过来问方便面试不，但这的确是很难恰好遇到时间合适，然后就又重新约定个时间。从面试考察的维度来看，蚂蚁金服的考察面是最广的（相比于面试的其它家），基本上各个领域的知识都会问一遍，同时也会问的比较深；但终究是电话面试，像代码能力方面的考察就少了许多，更多都是在算法和数据结构的解题思路上，没涉及实际编码环节。另外，蚂蚁金服的面试安排比较有意思，面试官是各个城市的质量负责人。例如我这次面试，技术面有四轮，第一轮面试官是杭州的，第二轮是成都的，第三轮是上海的，第四轮是蚂蚁金服国际部门的质量负责人（P10）。当时听说第四轮面试官是 P10 时，我着实惊讶不已，不过听说现在的面试流程的确都是这样，定级 P7 及以上的候选人，都要经过 P10 的面试。估计也是因为这个原因，面试流程会拉得很长，因为 P10 这种段位的大佬实在是太忙了。当时在跟他约面试时间的时候，也是约了好几次，但他那边经常会插入其它事情，然后不得不取消面试安排更改为其它时间。就这样变更几次时间后，我也十分焦急，因为其它几家公司都已经面完了，需要尽快给答复，而蚂蚁金服这边还迟迟没约上面试时间。实在是不得己，我就跟面试官发信息说明了情况，时间的确是非常紧急，我也不想就这样直接放弃蚂蚁金服这边的机会。最后面试官就跟我约了周一早上 8:30 的时间，很明显，这是他挤出来的个人时间，对此我真的非常感激。在面试过程中，总体来说比较温和，更多都还是围绕我的工作经历来聊的，而且他看到我的个人博客后比较感兴趣，围绕着之前我写过的文章聊了许多。技术面完成后，很快就安排了 HR 面，终于完成了所有面试。</p><p>再补充个信息。当时在面试过程中，面试官问我意向城市选择，因为蚂蚁金服除了总部杭州，在上海、深圳、成都都是有分公司的。当得知相同职级在各个城市的薪酬待遇完全一样时，我着实惊呆了。在<a href="https://debugtalk.com/post/my-2018-summary/">《我的 2018 年终总结》</a>中，我也聊到了当前面临的深圳房价压力，当时也有在纠结要不要回成都或重庆。而假如去到成都，可以拿着跟深圳一线城市相同的薪水，房价和物价却都低了一大截，那确实是一个非常大的吸引力。不过也有不足的地方，那就是成都那边的测试开发岗更多的是偏向于业务测试，工具平台方向的测试开发岗都是在杭州总部的，紫嫣也非常希望我能到杭州那边。但对我来说，虽然杭州的房价比深圳也会低一些，但我当前已经是拖家带口了，去到一个全新的城市，离老家还那么远，的确不是一个合适的选择。所以我当时就跟蚂蚁金服明确了选择成都分公司的意向。同时我也了解到 Oppo 在成都也建立了互联网研发中心，并且问过 Oppo HR，答复说我也可以选择去成都，薪酬方案保持跟当前深圳谈的不变。就此我内心也萌发了去成都的念头，详细的后面再继续讲。</p><p>本以为顺利完成了面试应该就没啥问题了，结果就在面试后两天，从紫嫣那里得到消息，蚂蚁金服国际部门进行组织架构调整和人力资源盘点，HC 冻结，所有 offer 暂停发放，具体的结果最快也要五一节后两周才能出来（乐观估计）。而且更悲剧的是，跟我面试的 HR 在第二天突然离职了，我本想跟那位 HR 打电话确认下有没有做好我这边面试结果的交接，结果也是一直没人接听电话。。。</p><p>我想，也许这就是缘分吧，唉。</p><h2 id="offer-选择"><a href="#offer-选择" class="headerlink" title="offer 选择"></a>offer 选择</h2><p>总算是经历完了曲折的面试过程，但在这之后，我迎来了新的苦恼，那就是到底选择去哪一家，Oppo、字节跳动、Shopee，还是等蚂蚁金服国际。</p><p>说实话，这几家都是十分优秀的公司，并没有明确的优劣之分。从给到我的薪酬方案来看，Oppo、字节跳动、Shopee 基本差异不太大，总包差异在十万以内；而从市场行情来看，假如蚂蚁金服发了 Offer，估计也都差不多，所以薪酬这块儿不算是主要的因素，更多还是要从工作本身进行考虑。</p><h3 id="进一步跟未来主管详聊"><a href="#进一步跟未来主管详聊" class="headerlink" title="进一步跟未来主管详聊"></a>进一步跟未来主管详聊</h3><p>对于工作本身的信息，虽然在面试的过程中可以了解到一些，以及在面试结束后都会有机会向面试官进行提问，但那时作为面试候选人，能问的问题终究是有限的。所以在拿到 offer 后，肯定还是会有许多未知的信息，这也是造成我拿不准想法的重要原因。</p><p>因此，在存在较多未知信息的时候，我觉得最好的方式还是跟各个公司未来的直接主管再深入地聊下，详细了解下业务和团队方面的情况，个人岗位的具体工作内容，以及未来主管对自己的期望。当时我的确也是这么做的，主动跟 Shopee、字节跳动、Oppo 的未来直接主管提出想再深入聊下的想法，感激的是他们也都非常乐意跟我约时间详细解答我的疑惑。</p><p>在聊之前我也做了个大概的问题梳理，主要是围绕如下几方面的信息去了解：</p><ul><li>工作内容：包括业务形态、业务中的痛点难点、业务面临的技术调整、当前测试技术建设等情况</li><li>团队情况：包括团队规模、团队定位、分工协作方式、技术栈、团队成员背景等</li><li>岗位情况：包括岗位具体工作内容、主管对个人的期望、考核评价标准和形式等</li></ul><p>基本上，将这几方面聊完后，对于工作本身就有了足够清晰的了解了。</p><p>其实在最开始聊之前我也存在一些顾虑，那就是未来主管是否愿意跟我聊，毕竟挺花时间的，而且要是聊了以后最后没选择去人家那里，感觉也特别不好意思。后来我也想清楚了，个人在工作中接触最多的就是直接主管，跟 TA 相处融洽想法一致是再重要不过的了，假如 TA 都不愿意花这个时间，那过去后在工作中的沟通也可能存在比较多的问题了。另外，我觉得详细了解足够的信息，对于自己做决定的确是非常有必要的，假如自己没有充分了解清楚，结果去了新公司后发现不是自己想要的，工作很痛苦或者再有离开的想法，那么对于新公司的影响会更大，相信这更不是未来主管愿意看到的。</p><h3 id="基本信息对比"><a href="#基本信息对比" class="headerlink" title="基本信息对比"></a>基本信息对比</h3><p>掌握了足够的信息后，就可以对每家公司的优缺点进行对比了。当然，这个更多是从我个人的角度，具有<strong>非常大的主观性</strong>，信息也可能存在较大的偏差。</p><p>首先说 Oppo。在面试过程中，也了解到了其业务前景和技术挑战空间都是很大的，给予到我个人也有比较好的认可和定位。从了解到的信息来看，Oppo 对员工在给钱方面还是很大方的，不光是在职期间（听说如果选择浮动薪酬方案的话），甚至员工主动离职也会补偿 N+1，在离职后还会补发年终奖，持有的股票也能继续持有并享有分红等。从脉脉匿名区看到的信息，普遍对于 Oppo 在这方面都评价很正面。对应到给我的薪酬方案，固定薪酬方案是比较明确的现金（月薪和年终），相比其它家也还比较有竞争力；浮动方案看不大懂，但听说按照往年的情况，选择浮动方案的实际到手会比选择固定方案多很多（公司效益正常个人绩效正常的情况）。还有点比较有吸引力的，可以选择成都研发中心，薪酬不变。不足的方面，一个是感觉当前技术建设偏滞后，工程师文化偏弱，与第一二梯队的互联网公司存在一定差距；另外就是听说加班会很多，公司管理文化也偏传统一些（特别是想吐槽下收集信息的那个表格，感觉是好多年前的模版，还有科室类的字眼）。总结起来就是：钱多多+可选成都+技术建设滞后+加班多+偏传统。</p><p>接着说 Shopee。从业务上来讲，东南亚电商是一个非常有增长空间的市场，类似于X年前的国内，所以当前阿里电商也在重点投入东南亚。而 Shopee 在东南亚电商市场还是非常给力的，虽然当前排名第二，但增长非常迅速，远高于阿里系的 lazada，前景可期。给予到个人的机会也很不错，核心业务、leader 岗位，可以施展的空间也非常大。另外，相比于其它几家加班严重的情况，Shopee 可以说是一股清流，完全不加班，15天带薪年假，可以充分享受工作和生活的平衡。与此同时，薪酬也是很给力的，总包上看跟其它家给的都差不多，因此从时薪上算可以说是完爆其它家。技术氛围方面，听说也还不错，对入职员工的要求也不低，BAT背景的听说比例也非常高（40%～50%）。总结起来就是：时薪最高+技术氛围不错+不加班+外企文化。</p><p>然后说字节跳动效率工程。从业务上来看，其实是最不被很多人看好的，在脉脉上也有很多人表达了对这个部门的不认可。不过他们了解到的信息有限，以为这只是服务于字节跳动公司内部的 IT 支撑部门。而实际上，这是字节跳动在 B 端市场的重要布局，并且在企业效率工具方面已经有了较多投入，包括收购幕布、朝夕日历、坚果云，投资石墨文档成为其最大股东等。当前各个大厂都在重点投入 B 端市场，这也说明了 B 端市场的确是存在较大的机会。而字节跳动这家公司自上而下对企业效率工具都是有非常高的要求，当前已经产出的 lark 也获得了广泛好评，使用过的用户都赞不绝口，并已形成了自增长的趋势（的确不得不佩服其做产品的能力），因此我个人还是非常看好其业务前景的。同时，我个人也是非常喜欢效率工具，平时也投了很多业余时间来把玩这些产品，例如幕布、滴答清单、各种笔记软件等，所以可以说字节跳动效率工程的业务跟我的个人兴趣是最对口的。在技术氛围方面，从外界了解到的情况和自己的感受，我觉得其工程师文化是很强的。除此之外，还有两个很吸引我的点。一个是字节跳动全公司采用 OKR 文化，员工可以看到任意其他人的 OKR，所以说信息是非常透明的。另一个是效率工程部采用的是去 QE 的模式，没有业务测试人员，产品质量由开发人员全权负责，测试开发对接开发人员提供测试工具平台，这也是我个人非常期望尝试的协作模式。总的来说，不管是业务方向、技术氛围，还是公司文化，我个人都是很满意的。但除此之外，还是有一些让我纠结的问题。最主要的就是期权价格，当前入职时每股的期权价格已经达到 60 美金了，对应到的公司估值要达到 900 亿美金。而字节跳动的估值去年年底是 750 亿美金（对应期权价格 50 美金），短短几个月时间，就涨出了一个大疆，着实让人感觉有些不可思议。实际上，去年年底在估值 750 亿美金的时候，网上已经存在非常多质疑的言论，认为泡沫太大。所以虽然我个人也是非常看好字节跳动的发展，但对于是否存在泡沫太大的问题着实也是心里没底儿（当前百度的市值已经跌到不足 450 亿美金了）。所以在薪酬这块儿，我也不得不做好公司上市后跌破发行价的心理准备，那么实际对应到个人的年收入，相比其它家实实在在的现金来说，可能就存在一定的风险。还有个比较不爽的点，就是今年字节跳动在招人的薪资策略上也做了些调整，不再像往年那么给力，基本上都会卡 30% 的涨幅；而且都说字节跳动的工作强度会比较大，加班比较多，那么在总包跟 Shopee 这类完全不加班的公司差异不大的情况下，计算时薪就会很低了。总结起来就是：业务符合口味+技术氛围好+公司文化赞+薪酬回报风险+加班多。</p><p>最后再说下蚂蚁金服国际。这个的确是比较悲剧，赶在了尴尬的时间点，我也的确不可能直接拒掉其它几家 offer 而专门等这家的，风险因素太大，主要也还是意向没强到那个程度，所以就此错过吧。其实回头想想，蚂蚁金服最吸引我的，除了前面说的业务前景以及阿里的技术积累外，最大的点还是在于可以选择去到成都吧。虽然 Oppo 也可以选择成都，但从个人对公司技术氛围的期望来看，蚂蚁金服对我的吸引力会更大些。当然，蚂蚁金服国际的机会也并不是十全十美，其同样也存在一些不足的点。最大的一个点应该是阿里的 361 文化，团队里总要有个 3.25，但谁不希望是自己，造成的结果就是一个比一个拼，加班一个比一个猛，甚至团队之间还会出现抢活干的情况，在这个环境下个人的压力是非常巨大的。另外，在期权价格上，蚂蚁金服当前也存在与字节跳动类似的情况，就是当前的期权价格已经非常高了，再往上的空间很有限，也有可能出现上市跌破发行价的情况，因此从财务回报的角度存在一定的风险。还有就是选择成都的蚂蚁金服，听说那边的业务比较边缘一些，毕竟核心业务都在杭州和上海，而且去到那边是做偏业务测试的测试开发岗位，而个人还是更倾向于测试工具平台的产品规划和开发工作。</p><p>从详细对比可以看出，十全十美的工作机会是不存在的，每家公司都有其亮点和不足。在这个时候，如果想通过找别人给建议帮助自己做决定，肯定是不合适的。真实情况是，每个人都有自己的出发点和偏好，因此不同人做出的选择也可能出现比较大的差异，而且更重要的是，别人帮忙做出的决定通常并不一定适合自己。当时我也很是迷茫，所以我就在脉脉匿名区去发了个贴，期望得到一些建议。结果居然大多数人的建议颇为一致，那就是选 Shopee 啊，工作轻松时薪高，干嘛要去其它家苦逼加班。这个答案也在我的意料之中，但对于我自身而言，当前阶段并不是想轻松，挣钱也并不是最主要的目标啊。</p><h3 id="想清楚内心的真实诉求"><a href="#想清楚内心的真实诉求" class="headerlink" title="想清楚内心的真实诉求"></a>想清楚内心的真实诉求</h3><p>所以，我不得不承认，要做出最适合自己的决定，一定要想清楚自己内心最真实的渴望是什么。那对我而言，当前我想换工作的最大诉求是什么呢？</p><p>其实对于这个问题我已经想的很清楚了，那就是在当前阶段趁自己还有动力和体力的时候，快速提升自己的技术视野，在技术深度上有更多的积累和沉淀。而相比于这些，至于是否带团队、是否加班多压力大、是否挣更多的钱，的确就没那么重要了。</p><h2 id="最终选择"><a href="#最终选择" class="headerlink" title="最终选择"></a>最终选择</h2><p>明确了自己的真实诉求后，再回到前面的选择也就没那么难了，<strong>字节跳动效率工程部</strong>的确是我当前阶段最合适的选择。</p><p>那后续规划呢？是否要带团队走技术管理路线，是否要离开深圳去成都？</p><p>我的初步想法是，在我 35 岁之前（还有四年的时间），提升技术视野和加强技术积累都是我的首要目标，在有了足够的积累后，我再考虑是继续走技术专家路线还是转做技术管理，相信那时也都有足够的底气，个人想法也更明确了。</p><p>而成都呢？在今年五一节前我和家人去成都市区玩了几天，对于成都的环境的确是比较满意的。我也了解到一个信息，当前成都买房限购，需要有成都户口和社保年限累计才能获得购房资格。但要解决这两个问题也不难，成都落户很简单，只要是本科学历就可以直接落户；而社保这块儿，即使没有在成都工作，也是可以自己找中介公司代缴社保。因此我也不用急着转去成都工作，毕竟当前小孩才一岁多，离他上小学还有好几年的时间；同步地，可以让我老婆先将户口迁去成都，再在当地缴纳社保，那么最快在一年之后，就可以获得购房资格，如果合适，就先在成都购房，解决住房和学位的问题。然后等几年后，需要考虑小孩上学了，成都的互联网就业环境应该也已变得更好了（现在也已经比较不错），到时再转去成都工作也就比较自然了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>终于，我又要开启新的职业旅程了。我不确定这是否是一个正确的或者好的决定，但我确定这是我自己充分聆听内心想法并经过思考后做的改变，我想这就够了。</p><p>我也比较庆幸自己从毕业至今一路走来，虽然也经受了不少社会的摧残，但我仍然没有太多的改变，至少我自认为我还是那个充满斗志和活力、不断努力将自己变得更好的少年。是的，虽已一把年纪，但我内心还是个少年。</p><p>最后，真心祝愿大疆越来越好，各位领导和同事一切顺利！</p><p><img src="/images/dji-graduated.jpeg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019 年 5 月 9 日，是我加入大疆创新刚好三周年的日子，也是我从大疆毕业的日子。非常感谢在大疆的三年时光，伴随着大疆的快速发展，我收获了许多成长，也完成了诸多人生中的大事，结了婚、生了娃，尝试了技术管理。庆幸的是，这三年来我每年都有写年终总结，详细记录了成长过程中的
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="思考 &amp; 感悟" scheme="https://debugtalk.com/categories/5-Growth/%E6%80%9D%E8%80%83-%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="大疆" scheme="https://debugtalk.com/tags/%E5%A4%A7%E7%96%86/"/>
    
      <category term="思考记录" scheme="https://debugtalk.com/tags/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 的测试用例分层机制（适用于 2.X）</title>
    <link href="https://debugtalk.com/post/HttpRunner-testcase-layer-2x/"/>
    <id>https://debugtalk.com/post/HttpRunner-testcase-layer-2x/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>在<a href="/post/httprunner-2.0-release">《HttpRunner 2.0 正式发布》</a>中提到，HttpRunner 从 2.0 版本开始，对测试用例组织形式进行了较大的调整，更正了之前在自动化测试概念上的偏差。</p><p>对应地，测试用例分层机制也进行了重新设计，因此在概念和使用方法方面都会出现很大的差异。本文便是对新的测试用例分层机制进行介绍。</p><h2 id="测试用例分层模型"><a href="#测试用例分层模型" class="headerlink" title="测试用例分层模型"></a>测试用例分层模型</h2><p>关于为什么要使用测试用例分层机制，在<a href="/post/HttpRunner-testcase-layer">《HttpRunner 的测试用例分层机制（已过期）》</a>中已经进行了详细的介绍，虽然使用方法变化了，但原理上都是相同的。</p><p>概括来说，测试用例分层机制的核心是将接口定义、测试步骤、测试用例、测试场景进行分离，单独进行描述和维护，从而尽可能地减少自动化测试用例的维护成本。</p><p>逻辑关系图如下所示：</p><p><img src="/images/20190418145309.png" alt></p><p>同时，强调如下几点核心概念：</p><ul><li>测试用例（testcase）应该是完整且独立的，每条测试用例应该是都可以独立运行的</li><li>测试用例是测试步骤（teststep）的 <code>有序</code> 集合，每一个测试步骤对应一个 API 的请求描述</li><li>测试用例集（testsuite）是测试用例的 <code>无序</code> 集合，集合中的测试用例应该都是相互独立，不存在先后依赖关系的；如果确实存在先后依赖关系，那就需要在测试用例中完成依赖的处理</li></ul><p>如果对于上述第三点感觉难以理解，不妨看下上图中的示例：</p><ul><li>testcase1 依赖于 testcase2，那么就可以在测试步骤（teststep12）中对 testcase2 进行引用，然后 testcase1 就是完整且可独立运行的；</li><li>在 testsuite 中，testcase1 与 testcase2 相互独立，运行顺序就不再有先后依赖关系了。</li></ul><h2 id="分层描述详解"><a href="#分层描述详解" class="headerlink" title="分层描述详解"></a>分层描述详解</h2><p>理解了测试用例分层模型，接下来我们再来看下在分层模型下，接口、测试用例、测试用例集的描述形式。</p><h3 id="接口定义（API）"><a href="#接口定义（API）" class="headerlink" title="接口定义（API）"></a>接口定义（API）</h3><p>为了更好地对接口描述进行管理，推荐使用独立的文件对接口描述进行存储，即每个文件对应一个接口描述。</p><p>接口定义描述的主要内容包括：<strong>name</strong>、variables、<strong>request</strong>、base_url、validate 等，形式如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">get</span> <span class="string">headers</span></span><br><span class="line"><span class="attr">base_url:</span> <span class="attr">http://httpbin.org</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line"><span class="attr">    expected_status_code:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">request:</span></span><br><span class="line"><span class="attr">    url:</span> <span class="string">/headers</span></span><br><span class="line"><span class="attr">    method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">validate:</span></span><br><span class="line"><span class="attr">    - eq:</span> <span class="string">["status_code",</span> <span class="string">$expected_status_code]</span></span><br><span class="line"><span class="attr">    - eq:</span> <span class="string">[content.headers.Host,</span> <span class="string">"httpbin.org"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>其中，name 和 request 部分是必须的，request 中的描述形式与 <a href="http://docs.python-requests.org/en/master/api/" target="_blank" rel="noopener">requests.request</a> 完全相同。</p><p>另外，API 描述需要尽量保持完整，做到可以单独运行。如果在接口描述中存在变量引用的情况，可在 variables 中对参数进行定义。通过这种方式，可以很好地实现单个接口的调试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ hrun api/get_headers.yml</span><br><span class="line">INFO     Start to run testcase: get headers</span><br><span class="line">headers</span><br><span class="line">INFO     GET http://httpbin.org/headers</span><br><span class="line">INFO     status_code: 200, response_time(ms): 477.32 ms, response_length: 157 bytes</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 <span class="built_in">test</span> <span class="keyword">in</span> 0.478s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h3 id="测试用例（testcase）"><a href="#测试用例（testcase）" class="headerlink" title="测试用例（testcase）"></a>测试用例（testcase）</h3><h4 id="引用接口定义"><a href="#引用接口定义" class="headerlink" title="引用接口定义"></a>引用接口定义</h4><p>有了接口的定义描述后，我们编写测试场景时就可以直接引用接口定义了。</p><p>在测试步骤（teststep）中，可通过 <code>api</code> 字段引用接口定义，引用方式为对应 API 文件的路径，绝对路径或相对路径均可。推荐使用相对路径，路径基准为项目根目录，即 <code>debugtalk.py</code> 所在的目录路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"setup and reset all."</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        user_agent:</span> <span class="string">'iOS/10.3'</span></span><br><span class="line"><span class="attr">        device_sn:</span> <span class="string">"TESTCASE_SETUP_XXX"</span></span><br><span class="line"><span class="attr">        os_platform:</span> <span class="string">'ios'</span></span><br><span class="line"><span class="attr">        app_version:</span> <span class="string">'2.8.6'</span></span><br><span class="line"><span class="attr">    base_url:</span> <span class="string">"http://127.0.0.1:5000"</span></span><br><span class="line"><span class="attr">    verify:</span> <span class="literal">False</span></span><br><span class="line"><span class="attr">    output:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">session_token</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span> <span class="string">(setup)</span></span><br><span class="line"><span class="attr">    api:</span> <span class="string">api/get_token.yml</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        user_agent:</span> <span class="string">'iOS/10.3'</span></span><br><span class="line"><span class="attr">        device_sn:</span> <span class="string">$device_sn</span></span><br><span class="line"><span class="attr">        os_platform:</span> <span class="string">'ios'</span></span><br><span class="line"><span class="attr">        app_version:</span> <span class="string">'2.8.6'</span></span><br><span class="line"><span class="attr">    extract:</span></span><br><span class="line"><span class="attr">        - session_token:</span> <span class="string">content.token</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - len_eq:</span> <span class="string">["content.token",</span> <span class="number">16</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">reset</span> <span class="string">all</span> <span class="string">users</span></span><br><span class="line"><span class="attr">    api:</span> <span class="string">api/reset_all.yml</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        token:</span> <span class="string">$session_token</span></span><br></pre></td></tr></table></figure><p>若需要控制或改变接口定义中的参数值，可在测试步骤中指定 variables 参数，覆盖 API 中的 variables 实现。</p><p>同样地，在测试步骤中定义 validate 后，也会与 API 中的 validate 合并覆盖。因此推荐的做法是，在 API 定义中的 validate 只描述最基本的校验项，例如 status_code，对于与业务逻辑相关的更多校验项，在测试步骤的 validate 中进行描述。</p><h4 id="引用测试用例"><a href="#引用测试用例" class="headerlink" title="引用测试用例"></a>引用测试用例</h4><p>在测试用例的测试步骤中，除了可以引用接口定义，还可以引用其它测试用例。通过这种方式，可以在避免重复描述的同时，解决测试用例的依赖关系，从而保证每个测试用例都是独立可运行的。</p><p>在测试步骤（teststep）中，可通过 <code>testcase</code> 字段引用其它测试用例，引用方式为对应测试用例文件的路径，绝对路径或相对路径均可。推荐使用相对路径，路径基准为项目根目录，即 <code>debugtalk.py</code> 所在的目录路径。</p><p>例如，在上面的测试用例（”setup and reset all.”）中，实现了对获取 token 功能的测试；同时，在很多其它功能中都会依赖于获取 token 的功能，如果将该功能的测试步骤脚本拷贝到其它功能的测试用例中，那么就会存在大量重复，当需要对该部分进行修改时就需要修改所有地方，显然不便于维护。</p><p>比较好的做法是，在其它功能的测试用例（如创建用户）中，引用获取 token 功能的测试用例（testcases/setup.yml）作为一个测试步骤，从而创建用户（”create user and check result.”）这个测试用例也变得独立可运行了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"create user and check result."</span></span><br><span class="line"><span class="attr">    id:</span> <span class="string">create_user</span></span><br><span class="line"><span class="attr">    base_url:</span> <span class="string">"http://127.0.0.1:5000"</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        uid:</span> <span class="number">9001</span></span><br><span class="line"><span class="attr">        device_sn:</span> <span class="string">"TESTCASE_CREATE_XXX"</span></span><br><span class="line"><span class="attr">    output:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">session_token</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">setup</span> <span class="string">and</span> <span class="string">reset</span> <span class="string">all</span> <span class="string">(override)</span> <span class="string">for</span> <span class="string">$device_sn.</span></span><br><span class="line"><span class="attr">    testcase:</span> <span class="string">testcases/setup.yml</span></span><br><span class="line"><span class="attr">    output:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">session_token</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">create</span> <span class="string">user</span> <span class="string">and</span> <span class="string">check</span> <span class="string">result.</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        token:</span> <span class="string">$session_token</span></span><br><span class="line"><span class="attr">    testcase:</span> <span class="string">testcases/deps/check_and_create.yml</span></span><br></pre></td></tr></table></figure><h3 id="测试用例集（testsuite）"><a href="#测试用例集（testsuite）" class="headerlink" title="测试用例集（testsuite）"></a>测试用例集（testsuite）</h3><p>当测试用例数量比较多以后，为了方便管理和实现批量运行，通常需要使用测试用例集来对测试用例进行组织。</p><p>在前文的测试用例分层模型中也强调了，测试用例集（testsuite）是测试用例的 <code>无序</code> 集合，集合中的测试用例应该都是相互独立，不存在先后依赖关系的；如果确实存在先后依赖关系，那就需要在测试用例中完成依赖的处理。</p><p>因为是 <code>无序</code> 集合，因此测试用例集的描述形式会与测试用例有些不同，在每个测试用例集文件中，第一层级存在两类字段：</p><ul><li>config: 测试用例集的总体配置参数</li><li>testcases: 值为字典结构（无序），key 为测试用例的名称，value 为测试用例的内容；在引用测试用例时也可以指定 variables，实现对引用测试用例中 variables 的覆盖。</li></ul><h4 id="非参数化场景"><a href="#非参数化场景" class="headerlink" title="非参数化场景"></a>非参数化场景</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">create</span> <span class="string">users</span> <span class="string">with</span> <span class="string">uid</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        device_sn:</span> <span class="string">$&#123;gen_random_string(15)&#125;</span></span><br><span class="line"><span class="attr">        var_a:</span> <span class="string">$&#123;gen_random_string(5)&#125;</span></span><br><span class="line"><span class="attr">        var_b:</span> <span class="string">$var_a</span></span><br><span class="line"><span class="attr">    base_url:</span> <span class="string">"http://127.0.0.1:5000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">testcases:</span></span><br><span class="line">    <span class="string">create</span> <span class="string">user</span> <span class="number">1000</span> <span class="string">and</span> <span class="string">check</span> <span class="string">result.:</span></span><br><span class="line"><span class="attr">        testcase:</span> <span class="string">testcases/create_user.yml</span></span><br><span class="line"><span class="attr">        variables:</span></span><br><span class="line"><span class="attr">            uid:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">            var_c:</span> <span class="string">$&#123;gen_random_string(5)&#125;</span></span><br><span class="line"><span class="attr">            var_d:</span> <span class="string">$var_c</span></span><br><span class="line"></span><br><span class="line">    <span class="string">create</span> <span class="string">user</span> <span class="number">1001</span> <span class="string">and</span> <span class="string">check</span> <span class="string">result.:</span></span><br><span class="line"><span class="attr">        testcase:</span> <span class="string">testcases/create_user.yml</span></span><br><span class="line"><span class="attr">        variables:</span></span><br><span class="line"><span class="attr">            uid:</span> <span class="number">1001</span></span><br><span class="line"><span class="attr">            var_c:</span> <span class="string">$&#123;gen_random_string(5)&#125;</span></span><br><span class="line"><span class="attr">            var_d:</span> <span class="string">$var_c</span></span><br></pre></td></tr></table></figure><h4 id="参数化场景（parameters）"><a href="#参数化场景（parameters）" class="headerlink" title="参数化场景（parameters）"></a>参数化场景（parameters）</h4><p>对于参数化场景，可通过 parameters 实现，描述形式如下所示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">create</span> <span class="string">users</span> <span class="string">with</span> <span class="string">parameters</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        device_sn:</span> <span class="string">$&#123;gen_random_string(15)&#125;</span></span><br><span class="line"><span class="attr">    base_url:</span> <span class="string">"http://127.0.0.1:5000"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">testcases:</span></span><br><span class="line">    <span class="string">create</span> <span class="string">user</span> <span class="string">$uid</span> <span class="string">and</span> <span class="string">check</span> <span class="string">result</span> <span class="string">for</span> <span class="string">$device_sn.:</span></span><br><span class="line"><span class="attr">        testcase:</span> <span class="string">testcases/create_user.yml</span></span><br><span class="line"><span class="attr">        variables:</span></span><br><span class="line"><span class="attr">            uid:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">            device_sn:</span> <span class="string">TESTSUITE_XXX</span></span><br><span class="line"><span class="attr">        parameters:</span></span><br><span class="line"><span class="attr">            uid:</span> <span class="string">[101,</span> <span class="number">102</span><span class="string">,</span> <span class="number">103</span><span class="string">]</span></span><br><span class="line"><span class="attr">            device_sn:</span> <span class="string">[TESTSUITE_X1,</span> <span class="string">TESTSUITE_X2]</span></span><br></pre></td></tr></table></figure><p>参数化后，parameters 中的变量将采用笛卡尔积组合形成参数列表，依次覆盖 variables 中的参数，驱动测试用例的运行。</p><h2 id="文件目录结构管理-amp-amp-脚手架工具"><a href="#文件目录结构管理-amp-amp-脚手架工具" class="headerlink" title="文件目录结构管理 &amp;&amp; 脚手架工具"></a>文件目录结构管理 &amp;&amp; 脚手架工具</h2><p>在对测试用例文件进行组织管理时，对于文件的存储位置均没有要求和限制，在引用时只需要指定对应的文件路径即可。但从约定大于配置的角度，最好是按照推荐的文件夹名称进行存储管理，并可通过子目录实现项目模块分类管理。</p><p>总结如下：</p><ul><li><code>debugtalk.py</code> 放置在项目根目录下，假设为 <code>PRJ_ROOT_DIR</code></li><li>接口定义（API）放置在 <code>PRJ_ROOT_DIR/api</code> 目录下</li><li>测试用例（testcase）放置在 <code>PRJ_ROOT_DIR/testcases</code> 目录下</li><li>测试用例集（testsuite）文件必须放置在 <code>PRJ_ROOT_DIR/testsuite</code> 目录下</li></ul><p>目录结构如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tree tests</span><br><span class="line">tests</span><br><span class="line">├── api</span><br><span class="line">│   ├── create_user.yml</span><br><span class="line">│   ├── get_headers.yml</span><br><span class="line">│   ├── get_token.yml</span><br><span class="line">│   ├── get_user.yml</span><br><span class="line">│   └── reset_all.yml</span><br><span class="line">├── debugtalk.py</span><br><span class="line">├── testcases</span><br><span class="line">│   ├── create_user.yml</span><br><span class="line">│   ├── deps</span><br><span class="line">│   │   └── check_and_create.yml</span><br><span class="line">│   └── setup.yml</span><br><span class="line">└── testsuites</span><br><span class="line">    ├── create_users.yml</span><br><span class="line">    └── create_users_with_parameters.yml</span><br></pre></td></tr></table></figure><p>同时，在 <code>HttpRunner</code> 中实现了一个脚手架工具，可以快速创建项目的目录结构。该想法来源于 <code>Django</code> 的 <code>django-admin.py startproject project_name</code>。</p><p>使用方式也与 <code>Django</code> 类似，只需要通过 <code>--startproject</code> 指定新项目的名称即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ hrun --startproject demo</span><br><span class="line">Start to create new project: demo</span><br><span class="line">CWD: /Users/debugtalk/MyProjects/examples</span><br><span class="line"></span><br><span class="line">created folder: demo</span><br><span class="line">created folder: demo/api</span><br><span class="line">created folder: demo/testcases</span><br><span class="line">created folder: demo/testsuites</span><br><span class="line">created folder: demo/reports</span><br><span class="line">created file: demo/debugtalk.py</span><br><span class="line">created file: demo/.env</span><br></pre></td></tr></table></figure><h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a>相关参考</h2><ul><li><a href="/post/HttpRunner-testcase-layer">《HttpRunner 的测试用例分层机制（已过期）》</a></li><li>测试用例分层详细示例：<a href="https://github.com/HttpRunner/HttpRunner/tree/master/tests" target="_blank" rel="noopener">HttpRunner/tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描述&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;/post/httprunner-2.0-release&quot;&gt;《HttpRunner 2.0 正式发布》&lt;
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>我的 2018 年终总结</title>
    <link href="https://debugtalk.com/post/my-2018-summary/"/>
    <id>https://debugtalk.com/post/my-2018-summary/</id>
    <published>2019-02-01T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 2019 农历新年即将来临之际，趁着在家闲适的日子，我也对我的 2018 年进行下年终总结。这一年，我也不知不觉迈过了 30 岁，成为了大家口中的“人到中年”。想总结的内容挺多，就从工作、生活、个人成长和困惑几部分进行展开吧。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>在 2017 年，我开始承担了部分技术管理的角色，个人的工作内容和重心也有了一些转变。在 2018 年初，随着部门的组织架构调整，之前我所带的测试开发小组也变成了测试开发部，部门工作职责也进行了更明确的划分。打个比喻，如果产品测试部是冲锋在各大战场一线的战士，那么我们测试开发部就是兵工厂，保障一线战士拥有理念先进、功能强大、稳定好用的武器就是我们的首要责任。当然，我们也会经常对一线战士进行指导和培训，让他们掌握武器的技术原理，从而更好地使用武器，发挥更大的战斗力。因为是全新的部门，因此我也从 0 开始梳理了适合当前大部门环境的测试开发团队规章制度，主要包括目标价值导向、协作机制、统一技术栈、技术规范、项目运作机制、培训机制、奖惩机制等等，并且团队人数也从年初的 3 个人稳步增长到当前的 7 个人。</p><p>在工作内容方面，今年我们做的事情比较多且杂，主要包括技术体系建设和重点项目支撑两大方面。</p><p>在技术体系建设方面，今年重点建设了接口自动化测试平台和性能测试平台，这两个平台都是基于 HttpRunner 来做的，因此也很好地实现了脚本的复用，并初步在公司内数十个项目中投入了使用，为后续要做的数据服务平台、线上业务功能监控、CI/CD 也做好了铺垫。在功能测试方面，基于商业测试用例管理平台 TestRail 做了些二次开发，将所有测试覆盖项目的测试用例全部统一规范管理了起来，告别了之前全靠 Excel 文件传来传去的低效，也极大地推动了开发自测，保障了质量体系规范的落地。在项目质量度量方面，我们基于 Jira 建设了质量看板，为项目质量概况、部门质量概况、业务线质量概况等不同维度提供了共二十余个质量度量指标，实现了各项目的可视化质量度量，并对于月度质量数据统计、项目质量回顾这类统计工作也提大地减少了人力时间投入。另外，团队在 UI自动化测试（Katalon）、网页资源爬虫检测、移动 APP 自动化（外购 MQC）等方面也有投入，但覆盖的项目有限。</p><p>在重点项目支撑方面，主要是进入到重点项目主导进行效率提升。当时我们的测试技术平台初步建成，虽然在一些项目中开始投入使用，但效果并不理想，我们也开始重点考虑怎么让我们的测试平台能更好地在项目中落地。后来我们听取了一位领导的建议，与其将10个项目都提升10%~20%，不如集中精力将一个重点项目提升70%。于是我们选择了一些重点项目，测试开发团队的人员深入到项目中，帮助项目组建设并梳理质量保障体系，并带领项目组成员（主要是产品测试和开发人员）一起进行效率提升方面的建设工作。在这个过程中，我们测试开发团队成员更加贴近了实际业务场景，对产品测试同学的痛点有了更多的体会，同时也收集了很多需求，帮助我们后续的迭代优化。</p><p>乍一看，感觉我们今年做出了挺多的成果，但实际上也存在比较多的问题。概括地说，就是我们在 2018 年做了非常多的事情，但目标不够聚焦，并行项目太多，人力投入分散，并且缺乏对工作内容和成果的数据化度量。最终造成的结果就是，2018 年我们建设了很多工具平台，支撑了很多重点项目，并且协助产品测试同学解决了很多技术问题，团队成员也都非常辛苦，但具体有多少工作内容对公司的业务和项目产生了正向作用，产出了多大的价值，我们很难给出数字化的展现。我们也不得不承认，没有度量的提升不算提升，无法展现的成果不算很好的成果。在<a href="https://debugtalk.com/post/SDET-Value-Measurement/">《如何度量测试开发的价值产出？》</a>一文中，我也很是赞同一个观点：我们可以反过来看，现在有了这些测试工具平台各个项目组可能都在用，那假如没有了这些测试工具平台会怎么样？是毫无影响？是变得有点不大方便？还是无法正常开展工作？显然，当然我们做得离不可或缺还存在比较大的差距。</p><p>这一年来，我感觉自己也发生了比较大的变化。在之前做工程师的时候，崇尚技术，“在墙角安静地写代码才是我的最爱”，不想去碰管理，因为感觉比较繁琐且不够纯粹。当然，我现在也非常热爱技术，后续也会一直都在一线参与开发工作，但对于技术和工作本身，却有了更多的感悟。最主要的，就是深刻认识到了相比于“攻克技术难题”、“快速开发实现和交付”，将问题想清楚、明确方向和重点会更加重要。比较幸运的是，领导给了我充分的自由度，让我有机会按照自己的想法去选择团队工作方向、建设和管理团队，但这同时我也具有更多的责任和义务，带着团队走对方向，做出更多的价值产出，收获更多的认可，最终帮助团队成员收获更高的回报。其实对于每个人来说，工作基本上都奔着两个方面，更高的经济回报和更好的个人成长。经济回报方面我能决定的有限，这很多时候会受到经济大环境和公司、部门业绩的影响，我能做的就是尽量让团队在正确的方向做对事情，对他们的工作成果更好地对外进行呈现，最终在帮他们争取荣誉和经济回报的时候也有更多的砝码。在个人成长方面，我有更多的自主权，也有更多的责任，给团队成员更多的支持和帮助，给予他们舞台和机会，让他们获得更好更快的个人成长。值得庆幸的是，今年我们测试开发团队成员一共收获了 3 次月季度优秀员工的称号（占比质量部全年的 1/4），并有一名成员被评选为质量部年度优秀员工（占比质量部总名额的 1/2），这对于我们团队成员数仅占质量部总人数 1/10 的情况来说，还算是个不错的成绩。另外，在 2018 年事业部内部建立了职级通道，所有岗位拉通了职级，我们团队有两名成员成功完成了晋升，成功率 100%，远高于事业部的总体通过率（不足20%）。团队成员能在质量部层面和事业部层面收获到这些认可，我真的着实为他们高兴。不过，我仍然清晰地记得，每次替团队成员争取优秀名额最终落选时懊恼和自责的心情。希望在下一年，团队能做出更多的成绩，收获更多的认可和回报，这也是我努力为之奋斗的方向。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>在生活方面，总体来说还是很幸福和满足的。</p><p>2018 年，是我当爸爸后的第一年，我也有幸见证了小坚果从 0 到 1 的成长。从学会翻身到爬行，再到走路、小跑，小坚果总是在我们不知不觉中又学会了新的技能，给我们一次又一次带来惊喜。说到爬行，小坚果的运动能力着实惊人，当时在还只会爬行的时候带他去参加了一个爬行比赛，结果毫无悬念地获得了冠军，拿到了他人生中的第一块金牌。当然，随着他逐渐长大，也越来越调皮捣蛋，在还只能勉强走路的时候，就开始翻箱倒柜，一不注意就把家里进行了乾坤大挪移，一会儿把厨房的小米袋子提到了书房，一会儿又把书架的书全翻下来扔满了客厅，让我感觉家里像是刚被洗劫过一番。除了运动，小坚果的音乐感也十分强大，一听到音乐就开始摇摆，小手也挥个不停。在发现家里有把尘封多年的吉他后，就经常拉我的手让我给他弹。当然，我也早忘了怎么弹了，但装着样子拨几下弦，他也开心的不得了。哦对了，其实小坚果最感兴趣的还是我的笔记本电脑，在他还只有半岁不到的时候，一看到我打开笔记本电脑就啥也不顾地非要往电脑前挤，然后在键盘上乱按一通，手法还有模有样，看着屏幕有变化，就特别开心，流着口水对着我笑，让我一度感觉他以后又要继承我程序员的衣钵。不知道是不是父爱泛滥，对小坚果的笑完全没有抵抗力；得益于老婆的创作能力，用微信给他做了好多表情包，我也很是嘚瑟，经常在微信群里发他的表情包。有件令我老婆很是想不通的事情，虽然我平时上班很少在家，每天陪小坚果的时间基本上只有早上半个小时，但他特别喜欢我这个爸爸，看见我的照片就”baba~baba“叫个不停，有时候刚睡醒还迷糊着也是不停地叫着”baba“。在外面逛的时候，基本上只要我抱；而每次早上我要去上班的时候，更是生离死别般哭个不停，有时让我也很是不忍。</p><p>今年与小坚果一起度过了两个重要的日子。一个是他满百天的时候，当时带着他第一次回到了我的老家，办了一个百天宴，也让我的爷爷奶奶第一次抱上了曾孙，两位老人异常高兴，一大家人久违地聚在了一起，拍了四世同堂的全家福，非常圆满。另一个就是在他满一周岁的时候，给他在深圳公租房家里办了一个生日 Party，当时我妈从重庆过来了，也来了许多朋友和邻居，很是热闹。当时在生日 Party 上，老婆让我讲几句，我酝酿了下，终究没有讲出来。其实我想说，感谢小坚果的到来，我非常幸福，也非常自豪；此生我一定会做一个好爸爸，陪伴小坚果健康快乐成长。</p><p><img src="/images/xiaojianguo.jpg" alt></p><p>一口气唠叨了这么多小坚果的点点滴滴，还这么煽情，这些在我当爸爸之前都是完全不敢想象的。</p><p>从广州搬到深圳两年多以后，我也基本决定后续不会再回广州工作了。因此索性将户口从广州迁到了深圳，之前在广州空了两年多的房子也租出去了。得益于公司的福利，这两年一直都住的是公租房，因此在深圳的住房方面没有操太多的心。刚开始的时候是在龙海家园，还只是一室的，有了孩子后比较拥挤；而在今年则换到了深康村的三房，除了小区商业配套差了不少外，住房宽敞了不少，小坚果在室内也有了充分的活动空间。交通也很是方便，小区门口有地铁站，离公司四个站，早上开车去公司也只要十几分钟。而房租每个月只需交600块的物业水电费，这地段这价格，着实让不少朋友羡慕不已。</p><p>但在国人的内心，普遍都崇尚安居乐业，对拥有自己的房子也充满了信仰。我本来是对此不太在意的，觉得租一辈子房也没啥，但有了小坚果以后，不得不考虑得更多。再加上公司的福利，满足条件的情况下可以申请到10年期150万的无息房贷，在同事的劝说下，我也动了些在深圳买房的心思。不过在我初步去看了几处二手房后，内心感到异常难受。三四百万的价格，实打实的真金白银，但在深圳只能买到老旧破烂的小房子，着实很不甘心。想着当前对买房的需求还不算强烈，暂且作罢。</p><h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><p>在个人成长方面，今年我仍在持续学习中，并有幸完成了一些个人突破。</p><p>首先是我从 2017 年开始做的开源项目 <a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener"><code>HttpRunner</code></a>，经过一年半的时间，居然从最开始的个人业余练手项目一路迭代至今，不仅在大疆内部成为了测试技术体系的基石，在测试业界也有了一定的知名度，形成了一定的开源生态并被众多公司广泛使用。截至当前，HttpRunner 在 GitHub 上收获了一千多个 star，在 TesterHome 的<a href="https://testerhome.com/opensource_projects" target="_blank" rel="noopener">开源项目列表</a>上也排到了第一的位置，这都是我始料未及的。不过，因为工作和个人时间的关系，今年在该项目中我也存在做的不好的地方，一个是该项目在 GitHub 上的 <a href="https://github.com/HttpRunner/HttpRunner/issues" target="_blank" rel="noopener">issue</a> 我没能及时的处理，当前已经累积有一百多个未处理的 issue，在 TesterHome 和天使用户群的好多提问我也没能完成解答；另外就是在文档方面比较滞后，好多新的功能特性都没能及时更新文档，这些在后续都是要重点进行改善的。在 2019 年初，2.0 版本也正式发布了，<a href="https://debugtalk.com/post/httprunner-2.0-release/">《HttpRunner 2.0 正式发布》</a>，后续我也会持续地优化 HttpRunner，并希望能找到更多的朋友一起来维护该项目，让 HttpRunner 能有更好的发展。</p><p>源于 HttpRunner，今年我受邀参加了 4 场行业大会进行技术分享，包括移动互联网测试开发大会（<a href="https://www.bagevent.com/event/1193113" target="_blank" rel="noopener">MTSC2018</a>）和 <a href="http://cn.pycon.org/2018/city_beijing.html" target="_blank" rel="noopener"><code>PyCon China 2018</code></a> 这些千人以上规模的大会，并且收获了比较不错的成绩。在移动互联网测试开发大会（MTSC2018）中，在大会<a href="https://testerhome.com/topics/15077" target="_blank" rel="noopener">开幕式</a>上我有幸收获了两个奖项，个人的<code>年度社区贡献奖</code> 和 HttpRunner 项目的 <code>年度开源贡献奖</code>；大会结束后，最终经过听众投票，我也有幸被评选为服务端专场<a href="https://testerhome.com/topics/15163" target="_blank" rel="noopener">明星讲师</a>，在此也非常感谢大家的认可和鼓励。而在 PyCon China 2018 中，我的 topic 也有幸在 30 余个分享主题中，被推选作为主会场分享主题（总共 3 个），与 Python 海外核心开发者一起在主会场面向千余名听众进行分享；这是我第一次面向这么多的听众进行技术分享，听众还基本都是 Python 开发者，这对于我也都是全新的挑战，<a href="https://debugtalk.com/post/pycon-china-2018/">《PyCon China 2018 归来，感谢曾经没有怂的自己》</a>。</p><p>在个人职位方面，今年在公司内部开始建设职级通道，所在的事业部也将所有岗位拉通了职级，包括开发、测试、产品、运营、数据等。一年有两次申请机会，在第一次申请的时候，毫无意外地没有通过，通过率低得吓人，高级工程师升架构师（或技术经理）仅有一人通过（1/6）。在第二次申请的时候，本就不敢再报希望了，但想着要充分利用好每次锻炼和磨练（自虐）的机会，仍然尽力去做了准备，没想到最终竟然成功通过了（1/6），然后就有了测试架构师的 title，在此非常感谢事业部各领导的认可。不过我也非常清楚，我当前距离我心目中架构师的title仍然有非常大的差距，我后续也会不断努力，争取早日能配得上这个title。</p><p>在个人学习方面，今年极客邦出了极客时间这个产品，我也成为了铁杆用户，前前后后差不多买了三十来门课程。之所以这么喜欢这个产品，一方面是上面的课程内容基本都面向互联网从业者，专项技术和技术管理都有，内容质量也都非常不错，很多课程我买来后没有都看，但将其当做一个资料库，在需要的时候经常能找到不错资料（不过检索功能十分欠缺，希望后续能加强）。另一方面就是课程基本上都附带音频，特别适合在开车途中使用，这样我就能很好地将每天上下班途中的固定时间利用了起来；不过，很多时候下班回家时大脑十分疲惫，基本上就听歌了，所以主要还是上班途中用的比较多。通过极客时间这个产品，一方面在知识上开了眼界，另外也被不少讲师大牛圈粉了，有了奋斗的目标和方向。特别地，在今年参加大会做分享的时候，我也有幸认识了《软件测试52讲》的作者茹炳晟，《趣谈网络协议》的作者刘超，面对面进行了更多的交流。</p><p>说来惭愧，今年有几家出版社（也包括 GitChat、慕课网、实验楼 这类在线知识付费平台）跟我联系，询问我是否有意向进行合作和出版，而我在 2017 年年初跟博文视点签的出版合同，本来还打算在小坚果出生前出版呢，现在儿子都一岁多了，至今还没交稿，确切地说，是搁置好久了。唉，时间是一方面，主要还是执行力不够。不仅是写书，今年的博客和公众号也是沉寂了大半年，整个 2018 年基本就写了十来篇。回头再看看去年年终总结时的<a href="https://debugtalk.com/post/my-2017-summary/">展望</a>，打脸打得生疼。</p><h2 id="个人困惑"><a href="#个人困惑" class="headerlink" title="个人困惑"></a>个人困惑</h2><p>在这一年，我也遇到了不少困惑，或者说，当前我暂时还没有想清楚的问题。</p><p>今年，我有幸收到了多个在其它公司前辈的邀请，他们都给出了非常诱惑的条件。想走技术路线，可以给到更高职级的title；想带团队，预期团队规模是我当前团队的好几倍；而薪资待遇，也会有不错的增长。说实话，这些都是非常不错的工作机会，再加上在当前公司待了两年多后，多多少少会有些不如意的地方，所以到底要不要换个环境，着实也会有些犹豫。其实这也回到了对于工作本身，我到底追求的是什么了。前面我也说了，每个人对于工作基本上都奔着两个方面，更高的经济回报和更好的个人成长，只是对于每个人的不同阶段来说，这两个方面的关注重点或权重可能会有所侧重。在经济回报方面，毫不掩饰地说，我在乎钱，期望能给家庭更好的经济基础；但在我当前阶段，对于自身的个人成长和职业发展我应该是更在乎的。还记得之前在 UC 工作的时候，在一次内部分享会上，UC浏览器总经理朱挺分享了他自身的一个观点，我也很是认同，跳个槽也许可以在月薪上涨个几千块，但如果只是冲着这个点，终究是量的提升，相比下来，个人能力和格局成长带来的经济回报才是质的飞跃。</p><p>那在职业发展方面呢，对于我所在的行业来说，主要就是技术和管理两条路线。前段时间在极客时间《重学前端》专栏中看到一篇<a href="https://time.geekbang.org/column/article/77345" target="_blank" rel="noopener">文章</a>，其中一段话着实让我扎心了许久。</p><blockquote><p>做了管理，技术没跟上，并且还错过了最佳的学习时间，这个境遇可想而知，他们在工作中大概率只能是被动地接受需求解决问题，然后也同时焦虑着自己的未来，焦虑着自己的竞争力。</p></blockquote><p>显然，这并不是我想要的状态，我个人也是希望更多地在技术线发展。但我觉得这里说的管理可能偏向于纯管理角色，而我即使是作为团队负责人，也更多地是希望成为技术 leader 的角色（关于 leader 和 boss 的区别，可参考陈皓在极客时间《左耳听风》专栏中的解释），因此并不冲突。那最终的核心点就在于，我到底想在技术这条路上走多远，以及，我要怎么去走我的技术之路。</p><p>去互联网大厂（成熟型），有更多地解决海量用户技术难题的机会，也有更多与技术大牛共事的机会，在工作内容上可以在某一细分领域上持续投入，在技术深度上可以有更好的积累，我上一家所在的 UC 基本上也算是这种类型。而在当前类型的公司（成长型），可以有更多的机会按照自己的想法从 0 去做很多事情，工作内容覆盖面比较广，得到较为全面的锻炼，个人也有更多晋升的机会。所以说，这两种选择更多的就像是围城，不能说哪种更好，关键还是在哪种环境更适合自己，或者说自己更想要哪种环境。</p><p>如今我已经 30 了，可以说前 30 年基本上都挺中规中矩的，读书、毕业、参加工作、工作日上班、跳槽换家公司继续上班，稳步提升自己的个人能力和市场价格，总体上来说还是十分安稳的状态。如果我要打算在深圳买套还算不错的商品房，可能也要像同事那样，首付两百万，月供两万多，持续二三十年，然后也成为有房贷要还有娃要养的中年群体中的一员。一场说走就走的旅行？嗯，我之前没有想过，今后估计也更不敢想。</p><p>之前在网上看到过一些自由职业者（独立软件开发者）的故事，他们可以自由安排自己的时间，挑选自己喜欢的工作地点，按照自己的节奏做自己喜欢的事情。很多人都很羡慕这样的状态，表示等自己财务自由后就去过这样的生活。但什么才算是财务自由呢？年薪百万、千万？还是资产过亿、十亿？每个人的标准并不一样。前些天 stormzhang 发了篇文章，<a href="https://mp.weixin.qq.com/s/HvM-9eCqEl4zqqEFZSBUdQ" target="_blank" rel="noopener">《我，自由了！》</a>，里面提到的一个观点我也很是认同，其实财务自由更多的取决于一个人的欲望，简单来说，如果收入能覆盖所需的支出，那么就可以算作是财务自由了。</p><p>我也开始反思为什么要在深圳，为了更好的生活？还是为了孩子更好的未来？显然，都做不到。如果说生活，在重庆老家的生活品质比我们在深圳高太多了，每次回老家感受都特别强烈，不管是住房小区环境，消费水平，还是生活节奏，都能生活得更好。特别是今年回家去表姐家的洋房转了下后，着实惊叹不已，很不错的地段带前后花园的房子当初才买成两百多万，即使是在经历了近两年的大幅涨价后也才四百多万，而四百多万在深圳可以买到什么品质的住房呢？如果说是为了孩子，论教育资源和医疗资源，深圳的资源跟重庆也没好多少，甚至可以说还不如重庆（或成都）。</p><p>那为什么非要留在深圳呢？为了更多的工作机会，为了更好的工作环境，为了安放我这颗年轻躁动可能还没想清楚自己要什么的内心，嗯，真的就更多的是为了我自己。但为了我自己，让老婆孩子在深圳过更差的生活，真的是一个好的选择么？在若干年后，我真的可以通过自己的努力，让老婆孩子在深圳也能过上跟老家同品质的生活么？说实话，我没有十足的把握。</p><p>在这一刻，我有些迷茫了。</p><h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p>本想就对自己的 2018 年进行下年终总结，结果不知不觉就写了这么多。不过，这些也的确是我 2018 年在工作方面主要投入和思考的内容，索性都记录下来，虽然会显得稚嫩且琐碎，但能给未来的自己多留点记忆也挺好的。</p><p>最后再展望下 2019 年吧。</p><p>1、找到内心的平静。当前存在的困惑和迷茫只能靠自己去寻找答案，也只有真正明确了自己内心的追求和渴望，才能获取内心的平静，做出最合适的选择。</p><p>2、持续提升个人能力和认知水平。个人能力方面，在前后端 Web 开发方面会加强系统性的知识积累，并锻炼更多的产品思维，期待能在测试开发领域做出更好的产品。</p><p>3、坚持阅读和写作。多阅读，勤思考，并通过写作进行记录，记录下自己成长的轨迹。</p><p>4、学会生活，锻炼身体，陪伴家人，工作是长跑，讲究的是可持续发展。再次引用了去年和前年的展望，希望 2019 年做得更好。</p><p>5、做好时间任务管理。明确工作任务的优先级和重要性，更好地管理个人时间；滴答清单是个不错的产品，后续会坚持使用。</p><h2 id="成长轨迹"><a href="#成长轨迹" class="headerlink" title="成长轨迹"></a>成长轨迹</h2><ul><li><a href="https://debugtalk.com/post/my-2017-summary/">《我的 2017 年终总结》</a></li><li><a href="https://debugtalk.com/post/my-2016-summary/">《我的 2016 年终总结》</a></li><li>《我的 2015 年终总结》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 2019 农历新年即将来临之际，趁着在家闲适的日子，我也对我的 2018 年进行下年终总结。这一年，我也不知不觉迈过了 30 岁，成为了大家口中的“人到中年”。想总结的内容挺多，就从工作、生活、个人成长和困惑几部分进行展开吧。&lt;/p&gt;
&lt;h2 id=&quot;工作&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="年终总结" scheme="https://debugtalk.com/categories/5-Growth/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://debugtalk.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>如何度量测试开发的价值产出？</title>
    <link href="https://debugtalk.com/post/SDET-Value-Measurement/"/>
    <id>https://debugtalk.com/post/SDET-Value-Measurement/</id>
    <published>2019-01-12T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>每到年底的时候，不管是个人还是团队，总是避免不了要对这一年的工作成果进行总结和汇报。而对于测试开发岗位来说，通常会面临一个共性的问题：做了这么多事情，究竟产出了多大的业务价值？</p><p>在很长一段时间内，我对这个问题也是非常困惑。困惑的原因倒不是觉得工作内容没有价值，而是对于测试开发类的工作，通常没有明确的业务需求方，对于工作成果度量也没有统一的方式。</p><p>为什么测试开发岗位会面临这个问题呢？</p><p>这应该和测试岗位的职责和工作内容有很大的关系。关于测试开发工程师的定义，在《Google测试之道》一书中已经有了很全面的解释，我也很是认同。测试开发工程师（SDET，Software Development Engineer in Testing）首先应该是开发角色，只是相比于业务开发工程师，他们的目标用户更多的是公司内部的测试人员（也包括其他岗位的项目组成员），而核心工作内容就是提供通用测试技术解决方案，开发实现测试工具或平台，协助测试人员更好地完成测试工作和项目交付，而效率和质量也是他们最为关注的方面。</p><p>从岗位职责和工作内容可以看出，测试开发通常不会直接参与业务交付，并且他们通常也不会隶属于具体的项目组，因此对于他们的工作到底产出了多少实际的价值收益，在上面的领导或老板看来就不是那么明确，最终他们面临价值产出度量的问题也就在所难免了。</p><p>本文就围绕测试开发价值产出度量的问题，谈下我的一些思考和建议。</p><h2 id="何为业务价值？"><a href="#何为业务价值？" class="headerlink" title="何为业务价值？"></a>何为业务价值？</h2><p>我们总是在说业务价值，那业务价值究竟指的是什么？为什么同样是写代码开发系统平台，大家通常会觉得开发电商、售后平台是产出业务价值，而开发测试工具平台就不产生业务价值呢？这种想法是否正确？</p><p>其实当我们回归商业的本质，就会得知问题的答案了。对于商业公司来说，通常是以盈利为目标的，而为了达成这个目标，就需要通过业务手段，对用户提供价值，最终获得用户的买单。从这个角度来讲，决定是否对公司产生业务价值与岗位类型无关，也与开发实现了什么系统或平台无关。例如，对于提供测试类服务的公司或项目组来说，例如听云、WeTest，开发出的测试工具平台就直接面向客户，并以此获得盈利，那么参与该类项目的测试开发工程师就直接产出了业务价值。而在绝大多数非测试服务类商业公司中，测试工具平台更多是提供一种辅助手段，帮助项目组更好更快地完成业务需求交付，而并不直接创造业务价值。当然，这个问题不仅在测试开发岗位上存在，对于某些开发岗位也是同样存在的，例如开发公司内部即时通讯工具、流程审批工具、消息网关、中间件等等。</p><p>因此，对于测试开发岗位来说，不必揪着“业务价值”不放，我们完全可以从其它角度来对工作成果产出进行度量和展现。</p><h2 id="节省人天数？"><a href="#节省人天数？" class="headerlink" title="节省人天数？"></a>节省人天数？</h2><p>那要使用什么度量指标呢？</p><p>在很多时候，大家可能会想到使用“<strong>节省人天数</strong>”这样一个指标。因为测试开发的主要职责之一就是提升测试效率，那如果能度量出在使用测试工具平台后减少了多少人力投入，那么就能很好地体现该工具平台的价值。</p><p>那么要怎么计算“节省人天数”呢？之前我们使用过的方式如下：</p><ul><li>统计出项目的回归测试场景，以及在固定周期内的发版次数（假设为N次）；</li><li>估算出通过人工去执行这些测试场景的耗时（假设为M人天）；</li><li>统计出工具平台执行测试的耗时（通常该耗时可忽略不计）；</li><li>那么节省的人天数就为：N * M</li></ul><p>乍一看，这个思路没啥问题，也能计算出具体的节省人天数。但在实际项目中尝试运作之后，我们发现该计算方式存在比较大的漏洞。</p><p>例如，某测试工具平台在 A 项目组投入使用后，通过计算，每月节省了人力10人天。可是，A 项目组的发版频率并没有改变，项目组人员编制也没有缩减，甚至根据招聘需求，人员编制还出现了增长的情况。那在这种情况下，通过计算得出节省的人力去哪儿了？</p><p>对此我们并不能给出很好的回答。事实上，测试人员借助测试工具平台从之前的重复手工工作解放出来后，他们可能花了更多的时间在需求分析上，也可能花了更多的时间在测试策略设计上。这都是我们所期望的结果，但问题在于，这些内容我们并不能很好地去统计和量化。这也就导致我们统计出的“节省人天数”缺乏说服力。</p><p>而且从更宏观的层面来看，度量项目组的质量情况时，更多是会关注交付效率和线上质量（漏测率）两个维度。交付效率，可以通过“交付需求数/投入人天数”进行计算，而线上质量（漏测率），可以通过“线上bug数/测试发现总bug数”得出。可以看出，线上质量（漏测率）与“节省人天数”基本没有关系，而交付效率方面，除非项目投入人天数真的减少了（通常不大可能），那么交付效率也很难通过“节省人天数”提升。</p><p>因此，“节省人天数”并不是一个可行的度量指标。</p><h2 id="建议的方案"><a href="#建议的方案" class="headerlink" title="建议的方案"></a>建议的方案</h2><p>那有没有其它更合适的度量指标呢？其实我也没法给出绝对正确的答案。</p><p>针对这个问题，我也请教了多位测试行业大佬，收获了诸多不错的建议。</p><p>其中，茹炳晟给出的一个观点给了我比较大的启发。我们可以反过来看，现在有了这些测试工具平台各个项目组可能都在用，那假如没有了这些测试工具平台会怎么样？是毫无影响？是变得有点不大方便？还是无法正常开展工作？问题越严重，说明工具平台本身的价值就更大。这也可以作为我们不断自我衡量工作成果产出价值大小的一种思路。</p><p>但要更好地进行量化，<strong>用户使用率</strong>会是一个比较不错的度量方式。</p><p>回归工具的属性，假如一个工具真的能帮助项目组带来价值，不管是效率优化还是质量提升方面，那么项目组成员肯定会更多地使用该工具；否则，项目组成员完全没有理由在这些测试工具平台上投入时间，因为使用也是有人力时间成本的。特别是在没有强制要求项目组使用的前提下，最终工具的覆盖用户范围和使用频率更能充分说明问题。这和当前各商业工具平台追求的用户数和日活数也是同样的思路。</p><p>因此，在 2019 年，我们也打算改变下思路：</p><p>1、在质量部总体层面，不再对各项目组制定自动化测试覆盖率的目标要求，对于项目组测试人员的考核方式也不再关注测试工具平台使用的情况，最终只重点关注交付效率和线上质量两大维度（统计方式同上）。</p><p>2、对于测试开发团队，测试工具平台的价值展现将更多地通过覆盖用户范围和使用频率进行展现；若要更多的提升用户范围，那么就需要更主动地去挖掘业务项目组的痛点，让开发出的工具平台能帮助更多的人（目标也不再局限于测试人员）解决实际工作中遇到的问题；而要达到比较高的使用频率（日活数），那么就势必要提升平台的可靠性，对问题反馈进行更快地响应，以及进行更多的宣传和推广。</p><p>当然，除了用户使用率（覆盖使用人数、日活数）这一类最核心的指标，我们也会关注其它的一些指标，包括：故障响应效率、平台可靠性、发现问题数、口碑评价反馈、响应需求数等。总之，这些指标都是可以明确度量和展现的，并且所有指标最终都将指向用户的实际使用情况（Adoption Rate）。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>有时候我不禁在想，做测试开发这个岗位也真挺不容易的。我们不仅需要负责需求规划和交互设计（<strong>想清楚要做什么</strong>），然后是开发和测试（<strong>将想法实现落地</strong>），并且要花费较多的时间和精力去进行推广（<strong>获取反馈及时调整</strong>），最后还要对工作成果进行度量和展现（<strong>收获价值认可，获得更多资源</strong>），只有我们开发出的工具平台最终在各业务项目中得到了很好的应用，才能说明我们的工作成果产出了价值。</p><p>这个过程跟创业真的挺像的，我也一直都是希望我所在的测试开发团队能更多地用创业的心态来对待我们的工作，而整个经历的过程，也许就是最大的乐趣所在吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每到年底的时候，不管是个人还是团队，总是避免不了要对这一年的工作成果进行总结和汇报。而对于测试开发岗位来说，通常会面临一个共性的问题：做了这么多事情，究竟产出了多大的业务价值？&lt;/p&gt;
&lt;p&gt;在很长一段时间内，我对这个问题也是非常困惑。困惑的原因倒不是觉得工作内容没有价值，
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="思考 &amp; 感悟" scheme="https://debugtalk.com/categories/5-Growth/%E6%80%9D%E8%80%83-%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="大疆" scheme="https://debugtalk.com/tags/%E5%A4%A7%E7%96%86/"/>
    
      <category term="价值度量" scheme="https://debugtalk.com/tags/%E4%BB%B7%E5%80%BC%E5%BA%A6%E9%87%8F/"/>
    
      <category term="思考记录" scheme="https://debugtalk.com/tags/%E6%80%9D%E8%80%83%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 2.0 正式发布</title>
    <link href="https://debugtalk.com/post/httprunner-2.0-release/"/>
    <id>https://debugtalk.com/post/httprunner-2.0-release/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 2017 年 6 月份的时候我写了一篇博客，<a href="https://debugtalk.com/post/ApiTestEngine-api-test-best-practice/">《接口自动化测试的最佳工程实践（ApiTestEngine）》</a>，并同时开始了 ApiTestEngine（HttpRunner的前身）的开发工作。转眼间一年半过去了，回顾历程不禁感慨万千。HttpRunner 从最开始的个人业余练手项目，居然一路迭代至今，不仅在大疆内部成为了测试技术体系的基石，在测试业界也有了一定的知名度，形成了一定的开源生态并被众多公司广泛使用，这都是我始料未及的。</p><p>但随着 HttpRunner 的发展，我在收获成就感的同时，亦感到巨大的压力。HttpRunner 在被广泛使用的过程中暴露出了不少缺陷，而且有些缺陷是设计理念层面的，这主要都是源于我个人对自动化测试理解的偏差造成的。因此，在近期相当长的一段时间内，我仔细研究了当前主流自动化测试工具，更多的从产品的角度，学习它们的设计理念，并回归测试的本质，对 HttpRunner 的概念重新进行了梳理。</p><p>难以避免地，HttpRunner 面临着一些与之前版本兼容的问题。对此我也纠结了许久，到底要不要保持兼容性。如果不兼容，那么对于老用户来说可能会造成一定的升级成本；但如果保持兼容，那么就相当于继续保留之前错误的设计理念，对后续的推广和迭代也会造成沉重的负担。最终，我还是决定告别过去，给 HttpRunner 一个新的开始。</p><p>经过两个月的迭代开发，HttpRunner 2.0 版本的核心功能已开发完毕，并且在大疆内部数十个项目中都已投入使用（实践证明，升级也并没有多么痛苦）。趁着 2019 开年之际，HttpRunner 2.0 正式在 <a href="https://pypi.org/project/HttpRunner/" target="_blank" rel="noopener">PyPI</a> 上发布了。从版本号可以看出，这会是一个全新的版本，本文就围绕 HttpRunner 2.0 的功能实现和开源项目管理两方面进行下介绍。</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><p>在 2.0 版本中，功能实现方面变化最大的有两部分，测试用例的组织描述方式，以及 HttpRunner 本身的模块化拆分。当时也是为了完成这两部分的改造，基本上对 HttpRunner 80% 以上的代码进行了重构。除了这两大部分的改造，2.0 版本对于测试报告展现、性能测试支持、参数传参机制等一系列功能特性都进行了较大的优化和提升。</p><p>本文就只针对测试用例组织调整和模块化拆分的变化进行下介绍，其它功能特性后续会在使用说明文档中进行详细描述。</p><h3 id="测试用例组织调整"><a href="#测试用例组织调整" class="headerlink" title="测试用例组织调整"></a>测试用例组织调整</h3><p>之所以要对测试用例的组织描述方式进行改造，是因为 HttpRunner 在一开始并没有清晰准确的定义。对于 HttpRunner 的老用户应该会有印象，在之前的博客文章中会提到 <code>YAML/JSON</code> 文件中的上下文作用域包含了 <code>测试用例集（testset）</code> 和 <code>测试用例（test）</code> 两个层级；而在测试用例分层机制中，又存在 <code>模块存储目录（suite）</code>、<code>场景文件存储目录（testcases）</code> 这样的概念，实在是令人困惑和费解。</p><p>事实上，之前的概念本身就是有问题的，而这些概念又是自动化测试工具（框架）中最核心的内容，必须尽快纠正。这也是推动 HttpRunner 升级到 2.0 版本最根本的原因。</p><p>在此我也不再针对之前错误的概念进行过多阐述了，我们不妨回归测试用例的本质，多思考下测试用例的定义及其关键要素。</p><p>那么，测试用例（testcase）的准确定义是什么呢？我们不妨看下 <a href="https://en.wikipedia.org/wiki/Test_case" target="_blank" rel="noopener">wiki</a> 上的描述。</p><blockquote><p>A test case is a specification of the inputs, execution conditions, testing procedure, and expected results that define a single test to be executed to achieve a particular software testing objective, such as to exercise a particular program path or to verify compliance with a specific requirement.</p></blockquote><p>概括下来，一条测试用例（testcase）应该是为了测试某个特定的功能逻辑而精心设计的，并且至少包含如下几点：</p><ul><li>明确的测试目的（achieve a particular software testing objective）</li><li>明确的输入（inputs）</li><li>明确的运行环境（execution conditions）</li><li>明确的测试步骤描述（testing procedure）</li><li>明确的预期结果（expected results）</li></ul><p>对应地，我们就可以对 HttpRunner 的测试用例描述方式进行如下设计：</p><ul><li>测试用例应该是完整且独立的，每条测试用例应该是都可以独立运行的；在 HttpRunner 中，每个 <code>YAML/JSON</code> 文件对应一条测试用例。</li><li>测试用例包含 <code>测试脚本</code> 和 <code>测试数据</code> 两部分：<ul><li>测试用例 = 测试脚本 + 测试数据</li><li><code>测试脚本</code> 重点是描述测试的 <code>业务功能逻辑</code>，包括预置条件、测试步骤、预期结果等，并且可以结合辅助函数（debugtalk.py）实现复杂的运算逻辑；可以将 <code>测试脚本</code> 理解为编程语言中的 <code>类（class）</code>；</li><li><code>测试数据</code> 重点是对应测试的 <code>业务数据逻辑</code>，可以理解为类的实例化数据；<code>测试数据</code> 和 <code>测试脚本</code> 分离后，就可以比较方便地实现数据驱动测试，通过对测试脚本传入一组数据，实现同一业务功能在不同数据逻辑下的测试验证。</li></ul></li><li>测试用例是测试步骤的 <code>有序</code> 集合，而对于接口测试来说，每一个测试步骤应该就对应一个 API 的请求描述。</li><li>测试场景和测试用例集应该是同一概念，它们都是测试用例的 <code>无序</code> 集合，集合中的测试用例应该都是相互独立，不存在先后依赖关系的；如果确实存在先后依赖关系怎么办，例如登录功能和下单功能；正确的做法应该是，在下单测试用例的预置条件中执行登录操作。</li></ul><p>理清这些概念后，那么 <code>接口（API）</code>、<code>测试用例（testcase）</code>、<code>辅助函数（debugtalk.py）</code>、<code>YAML/JSON</code>、<code>hooks</code>、<code>validate</code>、<code>环境变量</code>、<code>数据驱动</code>、<code>测试场景</code>、<code>测试用例集</code> 这些概念及其相互之间的关系也就清晰了。关于更具体的内容本文不再展开，后续会单独写文档并结合示例进行详细的讲解。</p><h3 id="模块化拆分（Pipline）"><a href="#模块化拆分（Pipline）" class="headerlink" title="模块化拆分（Pipline）"></a>模块化拆分（Pipline）</h3><p>随着 HttpRunner 功能的逐步增长，如何避免代码出现臃肿，如何提升功能特性迭代开发效率，如何提高代码单元测试覆盖率，如何保证框架本身的灵活性，这些都是 HttpRunner 本身的架构设计需要重点考虑的。</p><p>具体怎么去做呢？我采用的方式是遵循 Unix 哲学，重点围绕如下两点原则：</p><ul><li>Write programs that do one thing and do it well.</li><li>Write programs to work together.</li></ul><p>简而言之，就是在 HttpRunner 内部将功能进行模块化拆分，每一个模块只单独负责一个具体的功能，并且对该功能定义好输入和输出，各个功能模块也是可以独立运行的；从总体层面，将这个功能模块组装起来，就形成了 HttpRunner 的核心功能，包括自动化测试和性能测试等。</p><p>具体地，HttpRunner 被主要拆分为 6 个模块。</p><ul><li><code>load_tests</code>: 加载测试项目文件，包括测试脚本（YAML/JSON）、辅助函数（debugtalk.py）、环境变量（.env）、数据文件（csv）等；该阶段主要负责文件加载，不会涉及解析和动态运算的操作。</li><li><code>parse_tests</code>: 对加载后的项目文件内容进行解析，包括 变量（variables）、base_url 的优先级替换和运算，辅助函数运算，引用 API 和 testcase 的查找和替换，参数化生成测试用例集等。</li><li>add tests to test suite: 将解析后的测试用例添加到 unittest，组装成 <code>unittest.TestSuite</code>。</li><li>run test suite: 使用 unittest 运行组装好的 <code>unittest.TestSuite</code>。</li><li>aggregate results: 对测试过程的结果数据进行汇总，得到汇总结果数据。</li><li>generate html report: 基于 Jinja2 测试报告模板，使用汇总结果数据生成 html 测试报告。</li></ul><p>为了更好地展现自动化测试的运行过程，提升出现问题时排查的效率，HttpRunner 在运行时还可以通过增加 <code>--save-tests</code> 参数，将各个阶段的数据保存为 JSON 文件。</p><ul><li>XXX.loaded.json: load_tests 运行后加载生成的数据结构</li><li>XXX.parsed.json: parse_tests 运行后解析生成的数据结构</li><li>XXX.summary.json: 最终汇总得到的测试结果数据结构</li></ul><p>可以看出，这 6 个模块组装在一起，就像一条流水线（Pipline）一样，各模块分工协作各司其职，最终完成了整个测试流程。</p><p>基于这样的模块化拆分，HttpRunner 极大地避免了代码臃肿的问题，每个模块都专注于解决具体的问题，不仅可测试性得到了保障，遇到问题时排查起来也方便了很多。同时，因为每个模块都可以独立运行，在基于 HttpRunner 做二次开发时也十分方便，减少了很多重复开发工作量。</p><h2 id="开源项目管理"><a href="#开源项目管理" class="headerlink" title="开源项目管理"></a>开源项目管理</h2><p>除了功能实现方面的调整，为了 HttpRunner 能有更长远的发展，我也开始思考如何借助社区的力量，吸引更多的人加入进来。特别地，近期在学习 ASF（Apache Software Foundation）如何运作开源项目时，也对 <code>Community Over Code</code> 理念颇为赞同。</p><p>当然，HttpRunner 现在仍然是一个很小的项目，不管是产品设计还是代码实现都还很稚嫩。但我也不希望它只是一个个人自嗨的项目，因此从 2.0 版本开始，我希望能尽可能地将项目管理规范化，并寻找更多志同道合的人加入进来共同完善它。</p><p>开源项目管理是一个很大的话题，当前我也还处于初学者的状态，因此本文就不再进行展开，只介绍下 HttpRunner 在 2.0 版本中将改进的几个方面。</p><h3 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h3><p>作为一个产品，不仅要有个好名字，也要有个好的 logo。这个“好”的评价标准可能因人而异，但它应该是唯一的，能与产品本身定位相吻合的。</p><p>之前 HttpRunner 也有个 logo，但说来惭愧，那个 logo 是在网上找的，可能存在侵权的问题是一方面，logo 展示的含义与产品本身也没有太多的关联。</p><p>因此，借着 2.0 版本发布之际，我自己用 Keynote 画了一个。</p><p><img src="/images/HttpRunner-logo.png" alt="HttpRunner-logo"></p><p>个人的美工水平实在有限，让大家见笑了。</p><p>对于 logo 设计的解释，主要有如下三点：</p><ul><li>中间是个拼图（puzzle pieces），形似 H 字母，恰好是 HttpRunner 的首字母</li><li>拼图的寓意，对应的也是 HttpRunner 的设计理念；HttpRunner 本身作为一个基础框架，可以组装形成各种类型的测试平台，而在 HttpRunner 内部，也是充分解耦的各个模块组装在一起形成的</li><li>最后从实际的展示效果来看，个人感觉看着还是比较舒服的，在 <code>HttpRunner 天使用户群</code> 里给大家看了下，普遍反馈也都不错</li></ul><h3 id="版本号机制"><a href="#版本号机制" class="headerlink" title="版本号机制"></a>版本号机制</h3><p>作为一个开源的基础框架，版本号是至关重要的。但在之前，HttpRunner 缺乏版本规划，也没有规范的版本号机制，版本号管理的确存在较大的问题。</p><p>因此，从 2.0 版本开始，HttpRunner 在版本号机制方面需要规范起来。经过一轮调研，最终确定使用 <a href="https://semver.org/" target="_blank" rel="noopener"><code>Semantic Versioning</code></a> 的机制。该机制由 GitHub 联合创始人 Tom Preston-Werner 编写，当前被广泛采用，遵循该机制也可以更好地与开源生态统一，避免出现 “dependency hell” 的情况。</p><p>具体地，HttpRunner 将采用 <code>MAJOR.MINOR.PATCH</code> 的版本号机制。</p><ul><li>MAJOR: 重大版本升级并出现前后版本不兼容时加 1</li><li>MINOR: 大版本内新增功能并且保持版本内兼容性时加 1</li><li>PATCH: 功能迭代过程中进行问题修复（bugfix）时加 1</li></ul><p>当然，在实际迭代开发过程中，肯定也不会每次提交（commit）都对 PATCH 加 1；在遵循如上主体原则的前提下，也会根据需要，在版本号后面添加先行版本号（-alpha/beta/rc）或版本编译元数据（+20190101）作为延伸。</p><h3 id="HREPs"><a href="#HREPs" class="headerlink" title="HREPs"></a>HREPs</h3><p>在今年的一些大会上，我分享 HttpRunner 的开发设计思路时提到了 <code>博客驱动开发</code>，主要思路就是在开发重要的功能特性之前，不是直接开始写代码，而是先写一篇博客详细介绍该功能的需求背景、目标达成的效果、以及设计思路。通过这种方式，一方面可以帮助自己真正地想清楚要做的事情，同时也可以通过开源社区的反馈来从更全面的角度审视自己的想法，继而纠正可能存在的偏差，或弥补思考的不足。</p><p>直到我后来更深入地了解到了 <a href="https://www.python.org/dev/peps/" target="_blank" rel="noopener"><code>PEPs</code></a>(Python Enhancement Proposals)，以及类似的 <a href="https://github.com/ipython/ipython/wiki/IPEPs:-IPython-Enhancement-Proposals" target="_blank" rel="noopener"><code>IPEPs</code></a>(IPython Enhancement Proposals)，我才知道原来我曾经使用过的 <code>博客驱动开发</code> 并不是一个新方法，而是已经被广泛使用且行之有效的开发方式。</p><p>因此，从 2.0 版本开始，在 HttpRunner 的开发方面我想继续沿用这种方式，并且将其固化为一种机制。形式方面，会借鉴 <a href="https://www.python.org/dev/peps/" target="_blank" rel="noopener"><code>PEPs</code></a> 的方式，新增 <a href="https://github.com/HttpRunner/HREP" target="_blank" rel="noopener">HREPs</a>(HttpRunner Enhancement Proposals)；关于 HREPs 的分类和运作机制，后面我再具体进行梳理。</p><h3 id="License"><a href="#License" class="headerlink" title="License"></a>License</h3><p>最后再说下 License 方面。</p><p>HttpRunner 最开始选择的是 <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener">MIT</a> 开源协议，从 2.0 版本开始，将切换为 <a href="https://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="noopener">Apache-2.0</a> 协议。</p><p>如果熟悉这两个 License 的具体含义，应该清楚这两个协议对于用户来说都是十分友好的，不管是个人或商业使用，还是基于 HttpRunner 的二次开发，开源或闭源，都是没有任何限制的，因此协议切换对于大家来说没有任何影响。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，便是 HttpRunner 2.0 发布将带来的主要变化。</p><p>截止当前，HttpRunner 在 <a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener">GitHub</a> 上已经收获了近一千个star，在 TesterHome 的<a href="https://testerhome.com/opensource_projects" target="_blank" rel="noopener">开源项目列表</a>中也排到了第二名的位置，在此十分感谢大家的支持和认可。</p><p>希望 HttpRunner 2.0 会是一个新的开始，朝着更高的目标迈进。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 2017 年 6 月份的时候我写了一篇博客，&lt;a href=&quot;https://debugtalk.com/post/ApiTestEngine-api-test-best-practice/&quot;&gt;《接口自动化测试的最佳工程实践（ApiTestEngine）》&lt;/a&gt;，并同
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>PyCon China 2018 归来，感谢曾经没有怂的自己</title>
    <link href="https://debugtalk.com/post/pycon-china-2018/"/>
    <id>https://debugtalk.com/post/pycon-china-2018/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天有幸作为 PyCon China 2018 的分享嘉宾，在主会场面向近千名 Python 开发工程师做了一场关于自动化测试框架方面的分享。虽然之前多少有些忐忑和不自信，但终究挺过来了，最终现场效果也还不错，总算松了口气，个人也算是完成了一次自我突破。这会儿在返回深圳的航班上，借着这段空闲时间进行下总结和记录。</p><p>本件事情的起源挺有意思的，下面重点说下。</p><p>大概在两三个月前，无意中在微信公众号中看到了 PyCon China 2018 的主题征集，在里面看到了测试的字眼。因为近些年来 Python 一直都是我的主要工作语言，也是我个人最喜欢的编程语言，因此我也产生了些许兴趣，加了文章中主办方联系人（辛庆姐）的微信，主要是想询问下大会中会有哪些跟测试相关的主题分享。</p><p>在简单聊了下后，得知当前还没有测试相关的主题，对方也向我咨询是否有啥好的建议，同时也欢迎我参加大会进行下测试方面的分享。当时我也表达了我的疑虑，毕竟大会的参会者基本都是 Python 开发者，感觉测试相关的 topic 不一定受欢迎。然后就没继续聊了，这事儿我也就忘了。结果大概过了近一个月后，辛庆姐又跟我联系，还是希望我能做一场测试方面的分享，毕竟 Python 的应用领域这么广泛，当前在测试领域也有较多的应用。我想了下，那就参加下深圳分场的大会吧，多认识些珠三角地区的 Python 大佬也好。当然，我也存在点私心，就是想借这个机会再推广下我的开源项目 HttpRunner，要是能得到些指点就更好了，毕竟参会者基本都是 Python 开发者。</p><p>结果令我万万没想到的是，几天后的一个早晨，我睡醒后看到辛庆姐的信息，说是希望我能到北京主会场千人峰会进行分享。我顿时懵逼了，觉得很不可思议。我又再次确认了下，大会总共就一天，主会场总共就 4 个主题，而其它三位嘉宾中一位是洪教授，另外两位是国外嘉宾，他们都是 Python 领域非常资深的前辈，编程年限都快跟我岁数差不多了。我还是觉得难以置信，测试主题居然也可以排进主会场（不是对测试不自信，毕竟是开发者大会）？而且在之前的主题征集中，基本都是围绕 Python 核心语言特性、当前火热的机器学习、大数据方面，测试只是放在其它类别中，所以在被告知安排后的确觉得非常诧异。再三询问才得知，今年大会也是在做改革，想做 Pythoneer 想听的大会，而且组委会中也有成员之前看过我的博客，所以比较支持我（非常感谢）。当然，面对这前所未有的自我挑战的机会，虽然心里没底儿，我也挺想尝试的，就当作一次突破自己的机会好了。不过我也跟组委会说希望他们能再考虑下，因为我还是担心最终不能达成好的效果。再后来，组委会又进行了一轮投票，最终超过一半的成员同意将我的 topic 安排在主会场，这件事就这么定下来了。在此我也非常感谢组委会的认可和信任。</p><p>后来的事情就没啥特别的了，无非就是鼓足勇气，尽量克服内心的忐忑和不自信，然后尽量做好准备硬上了。最终结果证明，面对近千名听众进行分享也没那么可怕，和上一次 MTSC2018 服务端专场中面对三四百名听众相比感觉也都差不多，主要的差异还是在上台前的自我暗示。很庆幸，当初我克服了自身的恐惧心理将这件事答应下来了，我才能借助这次机会完成了一次自我突破，后面等我儿子长大了也多了件向他吹牛逼的素材。</p><p>说到这里，可能有人希望我能分享下如何克服在大会进行主题分享的恐惧心理。</p><p>其实对于这一点，我觉得也没有太多的秘诀，主要还是要多讲。如果还没有过技术分享的经历，不妨从公司的组内分享开始，勇敢地跨出第一步，然后不断地逼迫自己迎接更大的挑战，在部门层面、公司层面、行业沙龙活动等等，机会是非常多的。在这个过程中，积极地收集听众反馈并进行改进，多做几次之后，肯定大不一样。</p><p>另外，在分享准备阶段，推荐给大家两个比较有可操作性的做法。</p><ul><li>首先是分享的主题思路一定要清晰和明确，各部分内容的内在衔接尽量做到自然和不生硬，做到这一点后，听众会更便于掌握主题的思路，分享人也能讲得更流畅，避免因为生硬的内容切换造成忘词儿的尴尬情况。同时，分享的内容一定要都是分享者充分理解的内容，避免在网上抄一些自己都不清楚真实含义的概念和解释。</li><li>另一个很重要的点就是要充分重视开场白，如果心里没底儿，建议将开场白逐字写出来并反复进行斟酌，最终修改形成一份让自己满意的开场白，并多次自我演练直至熟练。之所以这么强调开场白，除了是要跟听众尽量留下好的第一印象外，还因为在开场阶段是演讲者最容易紧张的阶段，如果开场讲得不流畅，很容易造成演讲者变得更加紧张，影响后续一连串的表现，甚至会出现大脑一片空白，完全讲不下去的尴尬场面（之前我就有过这样的经历）。而如果开场经过精心准备并且有了一个比较好的表现后，就可以很好地建立自信，并且在这个过程中也熟悉了面向听众的感觉，后续的演讲也就不会有什么问题了。</li></ul><p>当然，这里只是列举了我个人觉得比较重要的两个点，对于其他人不一定适用。提升演讲和分享能力是一个持久的过程，我当前也是在不断摸索和提升的过程中。希望大家也能在留言中分享下这方面的经验，大家互相学习，共同进步。</p><p>最后，再说件比较尴尬的事情。</p><p>在会后，有几家出版社（也包括 GitChat 这类在线知识付费平台）的编辑跟我联系，询问我是否有意向进行合作和出版。我当然是非常难为情啦，去年年初跟博文视点签的出版合同，本来还打算在小坚果出生前出版呢，现在儿子都快满一岁了，至今还没交稿呢（确切地说，是搁置好久了）。唉，时间是一方面，主要还是执行力不够啊。所以现在对于出书的作者我是格外佩服的，内容好坏暂且不说，能坚持下来就真的很不容易了。如今我也有幸认识了不少畅销书的作者了，向他们看齐，加油吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天有幸作为 PyCon China 2018 的分享嘉宾，在主会场面向近千名 Python 开发工程师做了一场关于自动化测试框架方面的分享。虽然之前多少有些忐忑和不自信，但终究挺过来了，最终现场效果也还不错，总算松了口气，个人也算是完成了一次自我突破。这会儿在返回深圳的航
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="演讲记录" scheme="https://debugtalk.com/categories/5-Growth/%E6%BC%94%E8%AE%B2%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="演讲" scheme="https://debugtalk.com/tags/%E6%BC%94%E8%AE%B2/"/>
    
  </entry>
  
  <entry>
    <title>【大疆招聘】招聘核心项目测试负责人，诚意十足（附文末福利）</title>
    <link href="https://debugtalk.com/post/dji-hire-test-leader/"/>
    <id>https://debugtalk.com/post/dji-hire-test-leader/</id>
    <published>2018-06-30T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>近期，大疆互联网事业部急招项目测试负责人，岗位很核心，诚意也很足。</p><h2 id="关于我们"><a href="#关于我们" class="headerlink" title="关于我们"></a>关于我们</h2><p>关于大疆这家公司的介绍，直接引用下大疆互联网 Ruby 团队的<a href="https://ruby-china.org/topics/36849" target="_blank" rel="noopener">招聘文案</a>。</p><blockquote><p>DJI 大疆创新是全球领先的无人机公司，以“The Future of Possible（未来无所不能）”为理念，不断在各领域开拓创新，目前在全球有11000名员工，2017 年销售额破 180 亿元，估值超 150 亿美元。DJI 近几年每年都实现接近翻倍的增长，业务领域也不断拓展，产品目前已经广泛应用在农业、测绘、消防、公共安全、动物保护、地产、能源等多个领域。 DJI 目前在控制、算法、通信、IOT等方向技术积累深厚，在国内可以说难有匹敌。未来大疆将不仅是一家无人机硬件公司，很可能会逐步转变为智能机器人的解决方案公司，通过可以影响三维空间的技术，深刻的改变人类的生活。很多人说大疆在这样一种转型中，互联网、物联网方向的人才可以说是不可或缺。如果你想要跳上一艘正在高速运行的火箭飞船，尝试机遇与挑战并存的职业机会，大疆应该是个很不错的选择。</p></blockquote><p><img src="/images/mavic-air.jpg" alt="mavic-air"></p><blockquote><p>图为大疆新品 Mavic Air，在收起四轴折叠起来的时候，长宽只比一台普通的手机稍大一点。</p></blockquote><p>而互联网质量部，则是大疆创新互联网事业部的质量保障团队，为智能制造的生产运营体系，电商、ERP、智能工厂、全球供应链、企业信息系统、RoboMaster、农机app等DJI产品提供全生命周期保驾护航。</p><p>之前我也写过多篇文章详细介绍了质量部的工作内容，有兴趣的话可以看下历史文章。</p><ul><li><a href="https://debugtalk.com/post/d-test-hire-info/">《【大疆内推】岗位描述我只想这么写》</a></li><li><a href="https://debugtalk.com/post/introduction-to-testing-engineer-daily-work/">《【科普】互联网测试岗位的工作日常》</a></li><li><a href="https://debugtalk.com/post/test-dev-in-dji/">《在大疆做测试开发是一种什么体验？》</a></li></ul><p>接下来我就重点介绍下当前急招的岗位吧。</p><h2 id="岗位职责及要求"><a href="#岗位职责及要求" class="headerlink" title="岗位职责及要求"></a>岗位职责及要求</h2><p>大疆作为一家全球化的智能硬件生产制造企业，生产运营体系、ERP、智能工厂、全球供应链等都是非常重要的环节，相关系统的质量保证工作自然也是极其重要。近期重点招聘的岗位，主要也是围绕这些业务方向，期望新加入的成员能成为<strong>项目测试负责人</strong>或<strong>核心测试骨干</strong>的角色。</p><p>对于岗位的工作职责和任职资格，已经在拉勾网的 <a href="https://www.lagou.com/jobs/4688215.html" target="_blank" rel="noopener">JD</a> 中进行了描述，在此我只强调如下几点：</p><ul><li>具有丰富的项目测试经验，具备独立负责项目整体测试工作的能力；</li><li>具备较强的自驱力和项目推动能力；</li><li>最好在<code>MES/CRM/LMS/APS/ERP</code>等业务领域具有较为丰富的经验积累；</li><li>本科及以上学历。</li></ul><p>对于其它条件，都可以视面试情况而定。</p><h2 id="薪资福利"><a href="#薪资福利" class="headerlink" title="薪资福利"></a>薪资福利</h2><p>大厂都有的零食区、健身房、幼儿园、免费人才房、定期团建、节假日礼品这些硬性和软性福利，大疆这边都有，我也就不再重复了。重点就说下大家普遍关注的薪资待遇问题。</p><p>在月薪方面，本次招聘的岗位分为高级和中级，高级的范围在<code>20K～35K</code>，中级的范围在<code>15K~25K</code>。</p><p>年终奖视个人绩效而定，普遍在 3～6 个月，优秀的更多，甚至可以领到奔驰宝马福利车，而且还不用担心车牌的问题。</p><p>工作满两年并且绩效还不错的，可以申请到公司的无息购房贷款，额度在<strong>100万～200万</strong>之间，这也是可以秒杀其它大厂的。</p><p>对于优秀的员工，公司也很是舍得发股票。现在大疆还没有上市，其内部股的未来价值也是非常值得期待的。</p><p>当然，除了单纯的薪资福利，相信公司业务迅猛发展带来的个人能力成长空间，也是你所期待的。在大疆，公司的口号是探索未来无限可能（The future of possible），这对员工个人来说也同样适用。</p><h2 id="其它岗位"><a href="#其它岗位" class="headerlink" title="其它岗位"></a>其它岗位</h2><p>除了上面提到的岗位，大疆其它各岗位也具有大量的招聘需求，尤其是前后端开发、iOS/Android、运维等方向，工作地点覆盖深圳、北京、上海等地，详情以官方招聘网站为准。这些岗位我也都可以帮忙内推到对应的负责人。</p><p>至于测试开发岗位，招聘长期有效，欢迎直接联系我，进行推荐或自荐。</p><h2 id="投递方式"><a href="#投递方式" class="headerlink" title="投递方式"></a>投递方式</h2><p>请将简历直接发到我的工作邮箱：<code>leo.lee#dji.com</code></p><p>如果对岗位还有所疑问，也欢迎与我联系，只要是在不违反公司信息安全和保密规定的前提下，我都可以为你答疑解惑。</p><h2 id="文末福利"><a href="#文末福利" class="headerlink" title="文末福利"></a>文末福利</h2><p>在即将到来的中国移动互联网测试开发大会（简称MTSC2018）中，我将代表公司分享一个题目，《大疆互联网的一站式自动化测试解决方案（基于HttpRunner）》，期待届时能跟各位同行进行更多的交流。</p><p>在大会开始（7.13）前，若成功完成推荐或自荐的（通过一面就算），则送出价值1600元的 <a href="https://www.bagevent.com/event/1193113" target="_blank" rel="noopener"><strong>MTSC2018</strong></a> 门票一张！数量有限，先到先得。</p><p>期待你的加入！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期，大疆互联网事业部急招项目测试负责人，岗位很核心，诚意也很足。&lt;/p&gt;
&lt;h2 id=&quot;关于我们&quot;&gt;&lt;a href=&quot;#关于我们&quot; class=&quot;headerlink&quot; title=&quot;关于我们&quot;&gt;&lt;/a&gt;关于我们&lt;/h2&gt;&lt;p&gt;关于大疆这家公司的介绍，直接引用下大疆互联
      
    
    </summary>
    
      <category term="6. Recommendation" scheme="https://debugtalk.com/categories/6-Recommendation/"/>
    
    
      <category term="大疆" scheme="https://debugtalk.com/tags/%E5%A4%A7%E7%96%86/"/>
    
  </entry>
  
  <entry>
    <title>知识爆炸时代，技术人该如何克服焦虑？</title>
    <link href="https://debugtalk.com/post/recommend-geektime/"/>
    <id>https://debugtalk.com/post/recommend-geektime/</id>
    <published>2018-06-26T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>生活在这个知识爆炸的时代，我们是幸福的，但有时也是不幸的。</p><p>相比于早些年，我们有了太多的渠道和途径接收新的知识和信息，只要你想学，总能在网上找到大量相关的教程和学习资料。但与此同时，我们往往也会陷入更多的焦虑当中。不信你可以看下在你微信中收藏的技术文章，在上一次满减打折时囤的技术书籍，以及在你网盘中攒的以GB为单位的学习资料。</p><p>这个问题很普遍，仿佛也很无奈。要学的东西太多太多，但时间有限，我们发现根本学不完，为了克服焦虑，我们可能本能地就是搜藏更多的学习资料，继而更加焦虑，从而陷入了恶性循环。</p><p>有时候我甚至挺羡慕古代的人们，没有那么多选择，一本九阴真经读透了就能打遍天下无敌手。要是当时的信息也那么发达，同时给他们100本秘籍宝典，估计他们也会陷入选择困难症，最终也很难练出神功吧。</p><p>回到现状，当前我们普遍都是碎片化学习，微信公众号、知乎专栏、网络公开课都在学都在看，但很多都没有形成体系，多一榔头西一棒槌，最后的学习成果也可想而知了。</p><p>其实这个问题要克服也很简单，那就是针对你要学习的领域方向，找一份体系化的学习资料，然后啥也别想，坚持学下去就好了。这里的学习资料，可以是权威的经典书籍，也可以是行业领域专业人士的付费课程。具体形式不重要，重要的是一定要形成知识体系。</p><p>对于我个人而言，我推荐【极客时间】这款产品，这也不是我第一次跟大家推荐了。【极客时间】主要聚焦在互联网技术领域，里面的专栏内容的确非常不错，虽然是收费的订阅专栏，但知识体系很系统，比自己零散的学习效果好很多。</p><p>现在我已经是【极客时间】的重度用户，在上面累计订阅了12门付费课程，每天上下班的路上都会听这上面的课程（是的，包含音频这一点很是方便）。如果大家感兴趣，我后面可以再详细分享下我个人是如何利用通勤时间进行学习的。</p><p>最近，极客时间上线了第一门软件测试相关的课程，而其作者正是前两天朋友圈刷屏文章《“去QE”时代下，QE如何破茧重生?》的作者，茹炳晟。</p><p>这门课程的内容我不用多介绍了，大家可以直接看下课程列表，内容还是很不错的，基本涵盖了当前互联网测试领域中主要技术内容。不管是刚入门软件测试领域的新人，还是工作多年的从业者，相信都会有不少收获。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生活在这个知识爆炸的时代，我们是幸福的，但有时也是不幸的。&lt;/p&gt;
&lt;p&gt;相比于早些年，我们有了太多的渠道和途径接收新的知识和信息，只要你想学，总能在网上找到大量相关的教程和学习资料。但与此同时，我们往往也会陷入更多的焦虑当中。不信你可以看下在你微信中收藏的技术文章，在上一
      
    
    </summary>
    
      <category term="6. Recommendation" scheme="https://debugtalk.com/categories/6-Recommendation/"/>
    
    
      <category term="推荐" scheme="https://debugtalk.com/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>使用爬虫技术实现 Web 页面资源可用性检测</title>
    <link href="https://debugtalk.com/post/requests-crawler/"/>
    <id>https://debugtalk.com/post/requests-crawler/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>对于电商类型和内容服务类型的网站，经常会出现因为配置错误造成页面链接无法访问的情况（404）。</p><p>显然，要确保网站中的所有链接都具有可访问性，通过人工进行检测肯定是不现实的，常用的做法是使用爬虫技术定期对网站进行资源爬取，及时发现访问异常的链接。</p><p>对于网络爬虫，当前市面上已经存在大量的开源项目和技术讨论的文章。不过，感觉大家普遍都将焦点集中在爬取效率方面，例如当前就存在大量讨论不同并发机制哪个效率更高的文章，而在爬虫的其它特性方面探讨的不多。</p><p>个人认为，爬虫的核心特性除了<code>快</code>，还应该包括<code>全</code>和<code>稳</code>，并且从重要性的排序来看，<code>全</code>、<code>稳</code>、<code>快</code>应该是从高到低的。</p><p><code>全</code>排在第一位，是因为这是爬虫的基本功能，若爬取的页面不全，就会出现信息遗漏的情况，这种情况肯定是不允许的；而<code>稳</code>排在第二位，是因为爬虫通常都是需要长期稳定运行的，若因为策略处理不当造成爬虫运行过程中偶尔无法正常访问页面，肯定也是无法接受的；最后才是<code>快</code>，我们通常需要爬取的页面链接会非常多，因此效率就很关键，但这也必须建立在<code>全</code>和<code>稳</code>的基础上。</p><p>当然，爬虫本身是一个很深的技术领域，我接触的也只是皮毛。本文只针对使用爬虫技术实现 Web 页面资源可用性检测的实际场景，详细剖析下其中涉及到的几个技术点，重点解决如下几个问题：</p><ul><li>全：如何才能爬取网站所有的页面链接？特别是当前许多网站的页面内容都是要靠前端渲染生成的，爬虫要如何支持这种情况？</li><li>稳：很多网站都有访问频率限制，若爬虫策略处理不当，就常出现 403 和 503 的问题，该种问题要怎么解决？</li><li>快：如何在保障爬虫功能正常的前提下，尽可能地提升爬虫效率？</li></ul><h2 id="爬虫实现前端页面渲染"><a href="#爬虫实现前端页面渲染" class="headerlink" title="爬虫实现前端页面渲染"></a>爬虫实现前端页面渲染</h2><p>在早些年，基本上绝大多数网站都是通过后端渲染的，即在服务器端组装形成完整的 HTML 页面，然后再将完整页面返回给前端进行展现。而近年来，随着 AJAX 技术的不断普及，以及 AngularJS 这类 SPA 框架的广泛应用，前端渲染的页面越来越多。</p><p>不知大家有没有听说过，前端渲染相比于后端渲染，是不利于进行 SEO 的，因为对爬虫不友好。究其原因，就是因为前端渲染的页面是需要在浏览器端执行 JavaScript 代码（即 AJAX 请求）才能获取后端数据，然后才能拼装成完整的 HTML 页面。</p><p>针对这类情况，当前也已经有很多解决方案，最常用的就是借助 PhantomJS、<a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a> 这类 Headless 浏览器工具，相当于在爬虫中内置一个浏览器内核，对抓取的页面先渲染（执行 Javascript 脚本），然后再对页面内容进行抓取。</p><p>不过，要使用这类技术，通常都是需要使用 Javascript 来开发爬虫工具，对于我这种写惯了 Python 的人来说的确有些痛苦。</p><p>直到某一天，<a href="https://github.com/kennethreitz" target="_blank" rel="noopener">kennethreitz</a> 大神发布了开源项目 <a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a>，看到项目介绍中的那句 <code>Full JavaScript support!</code> 时不禁热泪盈眶，就是它了！该项目在 GitHub 上发布后不到三天，star 数就达到 5000 以上，足见其影响力。</p><p><a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a> 为啥会这么火？</p><p>写过 Python 的人，基本上都会使用 <a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 这么一个 HTTP 库，说它是最好的 HTTP 库一点也不夸张（不限编程语言），对于其介绍语 <code>HTTP Requests for Humans</code> 也当之无愧。也是因为这个原因，<a href="https://github.com/locustio/locust" target="_blank" rel="noopener">Locust</a> 和 <a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener">HttpRunner</a> 都是基于 <a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 来进行开发的。</p><p>而 <a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a>，则是 <a href="https://github.com/kennethreitz" target="_blank" rel="noopener">kennethreitz</a> 在 <a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 的基础上开发的另一个开源项目，除了可以复用 <a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 的全部功能外，还实现了对 HTML 页面的解析，即支持对 Javascript 的执行，以及通过 CSS 和 XPath 对 HTML 页面元素进行提取的功能，这些都是编写爬虫工具非常需要的功能。</p><p>在实现 Javascript 执行方面，<a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a> 也并没有自己造轮子，而是借助了 <a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">pyppeteer</a> 这个开源项目。还记得前面提到的 <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a> 项目么，这是 GoogleChrome 官方实现的 <code>Node API</code>；而 <a href="https://github.com/miyakogi/pyppeteer" target="_blank" rel="noopener">pyppeteer</a> 这个项目，则相当于是使用 Python 语言对 puppeteer 的非官方实现，基本具有 <a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noopener">puppeteer</a> 的所有功能。</p><p>理清了以上关系后，相信大家对 <a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a> 也就有了更好的理解。</p><p>在使用方面，<a href="https://github.com/kennethreitz/requests-html" target="_blank" rel="noopener">requests-html</a> 也十分简单，用法与 <a href="https://github.com/requests/requests" target="_blank" rel="noopener">requests</a> 基本相同，只是多了 <code>render</code> 功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> requests_html <span class="keyword">import</span> HTMLSession</span><br><span class="line"></span><br><span class="line">session = HTMLSession()</span><br><span class="line">r = session.get(<span class="string">'http://python-requests.org'</span>)</span><br><span class="line">r.html.render()</span><br></pre></td></tr></table></figure><p>在执行 <code>render()</code> 之后，返回的就是经过渲染后的页面内容。</p><h2 id="爬虫实现访问频率控制"><a href="#爬虫实现访问频率控制" class="headerlink" title="爬虫实现访问频率控制"></a>爬虫实现访问频率控制</h2><p>为了防止流量攻击，很多网站都有访问频率限制，即限制单个 IP 在一定时间段内的访问次数。若超过这个设定的限制，服务器端就会拒绝访问请求，即响应状态码为 403（Forbidden）。</p><p>这用来应对外部的流量攻击或者爬虫是可以的，但在这个限定策略下，公司内部的爬虫测试工具同样也无法正常使用了。针对这个问题，常用的做法就是在应用系统中开设白名单，将公司内部的爬虫测试服务器 IP 加到白名单中，然后针对白名单中的 IP 不做限制，或者提升限额。但这同样可能会出现问题。因为应用服务器的性能不是无限的，假如爬虫的访问频率超过了应用服务器的处理极限，那么就会造成应用服务器不可用的情况，即响应状态码为 503（Service Unavailable Error）。</p><p>基于以上原因，爬虫的访问频率应该是要与项目组的开发和运维进行统一评估后确定的；而对于爬虫工具而言，实现对访问频率的控制也就很有必要了。</p><p>那要怎样实现访问频率的控制呢？</p><p>我们可以先回到爬虫本身的实现机制。对于爬虫来说，不管采用什么实现形式，应该都可以概括为生产者和消费者模型，即：</p><ul><li>消费者：爬取新的页面</li><li>生产者：对爬取的页面进行解析，得到需要爬取的页面链接</li></ul><p>对于这种模型，最简单的做法是使用一个 FIFO 的队列，用于存储未爬取的链接队列（unvisited_urls_queue）。不管是采用何种并发机制，这个队列都可以在各个 worker 中共享。对于每一个 worker 来说，都可以按照如下做法：</p><ul><li>从 unvisited_urls_queue 队首中取出一个链接进行访问；</li><li>解析出页面中的链接，遍历所有的链接，找出未访问过的链接；</li><li>将未访问过的链接加入到 unvisited_urls_queue 队尾</li><li>直到 unvisited_urls_queue 为空时终止任务</li></ul><p>然后回到我们的问题，要限制访问频率，即单位时间内请求的链接数目。显然，worker 之间相互独立，要在执行端层面协同实现整体的频率控制并不容易。但从上面的步骤中可以看出，unvisited_urls_queue 被所有 worker 共享，并且作为源头供给的角色。那么只要我们可以实现对 unvisited_urls_queue 补充的数量控制，就实现了爬虫整体的访问频率控制。</p><p>以上思路是正确的，但在具体实现的时候会存在几个问题：</p><ul><li>需要一个用于存储已经访问链接的集合（visited_urls_set），该集合需要在各个 worker 中实现共享；</li><li>需要一个全局的计数器，统计到达设定时间间隔（rps即1秒，rpm即1分钟）时已访问的总链接数；</li></ul><p>并且在当前的实际场景中，最佳的并发机制是选择多进程（下文会详细说明原因），每个 worker 在不同的进程中，那要实现对集合的共享就不大容易了。同时，如果每个 worker 都要负责对总请求数进行判断，即将访问频率的控制逻辑放到 worker 中实现，那对于 worker 来说会是一个负担，逻辑上也会比较复杂。</p><p>因此比较好的方式是，除了未访问链接队列（unvisited_urls_queue），另外再新增一个爬取结果的存储队列（fetched_urls_queue），这两个队列都在各个 worker 中共享。那么，接下来逻辑就变得简单了：</p><ul><li>在各个 worker 中，只需要从 unvisited_urls_queue 中取数据，解析出结果后统统存储到 fetched_urls_queue，无需关注访问频率的问题；</li><li>在主进程中，不断地从 fetched_urls_queue 取数据，将未访问过的链接添加到 unvisited_urls_queue，在添加之前进行访问频率控制。</li></ul><p>具体的控制方法也很简单，假设我们是要实现 RPS 的控制，那么就可以使用如下方式（只截取关键片段）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">start_timer = time.time()</span><br><span class="line">requests_queued = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = self.fetched_urls_queue.get(timeout=<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">except</span> queue.Empty:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># visited url will not be crawled twice</span></span><br><span class="line">    <span class="keyword">if</span> url <span class="keyword">in</span> self.visited_urls_set:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># limit rps or rpm</span></span><br><span class="line">    <span class="keyword">if</span> requests_queued &gt;= self.requests_limit:</span><br><span class="line">        runtime_secs = time.time() - start_timer</span><br><span class="line">        <span class="keyword">if</span> runtime_secs &lt; self.interval_limit:</span><br><span class="line">            sleep_secs = self.interval_limit - runtime_secs</span><br><span class="line">            <span class="comment"># exceed rps limit, sleep</span></span><br><span class="line">            time.sleep(sleep_secs)</span><br><span class="line"></span><br><span class="line">        start_timer = time.time()</span><br><span class="line">        requests_queued = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    self.unvisited_urls_queue.put(url)</span><br><span class="line">    self.visited_urls_set.add(url)</span><br><span class="line">    requests_queued += <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="提升爬虫效率"><a href="#提升爬虫效率" class="headerlink" title="提升爬虫效率"></a>提升爬虫效率</h2><p>对于提升爬虫效率这部分，当前已经有大量的讨论了，重点都是集中在不同的并发机制上面，包括多进程、多线程、asyncio等。</p><p>不过，他们的并发测试结果对于本文中讨论的爬虫场景并不适用。因为在本文的爬虫场景中，实现前端页面渲染是最核心的一项功能特性，而要实现前端页面渲染，底层都是需要使用浏览器内核的，相当于每个 worker 在运行时都会跑一个 Chromium 实例。</p><p>众所周知，Chromium 对于 CPU 和内存的开销都是比较大的，因此为了避免机器资源出现瓶颈，使用多进程机制（multiprocessing）充分调用多处理器的硬件资源无疑是最佳的选择。</p><p>另一个需要注意也是比较被大家忽略的点，就是在页面链接的请求方法上。</p><p>请求页面链接，不都是使用 GET 方法么？</p><p>的确，使用 GET 请求肯定是可行的，但问题在于，GET 请求时会加载页面中的所有资源信息，这本身会是比较耗时的，特别是遇到链接为比较大的图片或者附件的时候。这无疑会耗费很多无谓的时间，毕竟我们的目的只是为了检测链接资源是否可访问而已。</p><p>比较好的的做法是对网站的链接进行分类：</p><ul><li>资源型链接，包括图片、CSS、JS、文件、视频、附件等，这类链接只需检测可访问性；</li><li>外站链接，这类链接只需检测该链接本身的可访问性，无需进一步检测该链接加载后页面中包含的链接；</li><li>本站页面链接，这类链接除了需要检测该链接本身的可访问性，还需要进一步检测该链接加载后页面中包含的链接的可访问性；</li></ul><p>在如上分类中，除了第三类是必须要使用 GET 方法获取页面并加载完整内容（render），前两类完全可以使用 HEAD 方法进行代替。一方面，HEAD 方法只会获取状态码和 headers 而不获取 body，比 GET 方法高效很多；另一方面，前两类链接也无需进行页面渲染，省去了调用 Chromium 进行解析的步骤，执行效率的提高也会非常明显。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文针对如何使用爬虫技术实现 Web 页面资源可用性检测进行了讲解，重点围绕爬虫如何实现 <code>全</code>、<code>稳</code>、<code>快</code> 三个核心特性进行了展开。对于爬虫技术的更多内容，后续有机会我们再进一步进行探讨。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;对于电商类型和内容服务类型的网站，经常会出现因为配置错误造成页面链接无法访问的情况（404）。&lt;/p&gt;
&lt;p&gt;显然，要确保网站中的所有链接都
      
    
    </summary>
    
      <category term="3. Testing" scheme="https://debugtalk.com/categories/3-Testing/"/>
    
      <category term="爬虫" scheme="https://debugtalk.com/categories/3-Testing/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="requests" scheme="https://debugtalk.com/tags/requests/"/>
    
      <category term="requests-crawler" scheme="https://debugtalk.com/tags/requests-crawler/"/>
    
      <category term="requests-html" scheme="https://debugtalk.com/tags/requests-html/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 实现 hook 机制</title>
    <link href="https://debugtalk.com/post/httprunner-hook/"/>
    <id>https://debugtalk.com/post/httprunner-hook/</id>
    <published>2018-05-11T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在自动化测试中，通常在测试开始前需要做一些预处理操作，以及在测试结束后做一些清理性的工作。</p><p>例如，测试使用手机号注册账号的接口：</p><ul><li>测试开始前需要确保该手机号未进行过注册，常用的做法是先在数据库中删除该手机号相关的账号数据（若存在）；</li><li>测试结束后，为了减少对测试环境的影响，常用的做法是在数据库中将本次测试产生的相关数据删除掉。</li></ul><p>显然，在自动化测试中的这类预处理操作和清理性工作，由人工来做肯定是不合适的，我们最好的方式还是在测试脚本中进行实现，也就是我们常说的 hook 机制。</p><p>hook 机制的概念很简单，在各个主流的测试工具和测试框架中也很常见。</p><p>例如 Python 的 unittest 框架，常用的就有如下几种 hook 函数。</p><ul><li>setUp：在每个 test 运行前执行</li><li>tearDown：在每个 test 运行后执行</li><li>setUpClass：在整个用例集运行前执行</li><li>tearDownClass：在整个用例集运行后执行</li></ul><p>概括地讲，就是针对自动化测试用例，要在单个测试用例和整个测试用例集的前后实现 hook 函数。</p><h2 id="描述方式设想"><a href="#描述方式设想" class="headerlink" title="描述方式设想"></a>描述方式设想</h2><p>在 HttpRunner 的 YAML/JSON 测试用例文件中，本身就具有分层的思想，用例集层面的配置在 config 中，用例层面的配置在 test 中；同时，在 YAML/JSON 中也实现了比较方便的函数调用机制，<code>$func($a, $b)</code>。</p><p>因此，我们可以新增两个关键字：<code>setup_hooks</code> 和 <code>teardown_hooks</code>。类似于 variables 和 parameters 关键字，根据关键字放置的位置来决定是用例集层面还是单个用例层面。</p><p>根据设想，我们就可以采用如下形式来描述 hook 机制。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">basic</span> <span class="string">test</span> <span class="string">with</span> <span class="string">httpbin</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        base_url:</span> <span class="attr">http://127.0.0.1:3458/</span></span><br><span class="line"><span class="attr">    setup_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;hook_print(setup_testset)&#125;</span></span><br><span class="line"><span class="attr">    teardown_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;hook_print(teardown_testset)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">headers</span></span><br><span class="line"><span class="attr">    times:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/headers</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    setup_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;hook_print(---setup-testcase)&#125;</span></span><br><span class="line"><span class="attr">    teardown_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;hook_print(---teardown-testcase)&#125;</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">[content.headers.Host,</span> <span class="string">"127.0.0.1:3458"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>同时，hook 函数需要定义在项目的 debugtalk.py 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hook_print</span><span class="params">(msg)</span>:</span></span><br><span class="line">    print(msg)</span><br></pre></td></tr></table></figure><h2 id="基本实现方式"><a href="#基本实现方式" class="headerlink" title="基本实现方式"></a>基本实现方式</h2><p>基于 hook 机制的简单概念，要在 HttpRunner 中实现类似功能也就很容易了。</p><p>在 HttpRunner 中，负责测试执行的类为 <code>httprunner/runner.py</code> 中的 Runner。因此，要实现用例集层面的 hook 机制，只需要将用例集的 setup_hooks 放置到 <code>__init__</code> 中，将 teardown_hooks 放置到 <code>__del__</code> 中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config_dict=None, http_client_session=None)</span>:</span></span><br><span class="line">        <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># testset setup hooks</span></span><br><span class="line">        testset_setup_hooks = config_dict.pop(<span class="string">"setup_hooks"</span>, [])</span><br><span class="line">        <span class="keyword">if</span> testset_setup_hooks:</span><br><span class="line">            self.do_hook_actions(testset_setup_hooks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># testset teardown hooks</span></span><br><span class="line">        self.testset_teardown_hooks = config_dict.pop(<span class="string">"teardown_hooks"</span>, [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.testset_teardown_hooks:</span><br><span class="line">            self.do_hook_actions(self.testset_teardown_hooks)</span><br></pre></td></tr></table></figure><p>类似地，要实现单个用例层面的 hook 机制，只需要将单个用例的 setup_hooks 放置到 request 之前，将 teardown_hooks 放置到 request 之后。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_test</span><span class="params">(self, testcase_dict)</span>:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># setup hooks</span></span><br><span class="line">        setup_hooks = testcase_dict.get(<span class="string">"setup_hooks"</span>, [])</span><br><span class="line">        self.do_hook_actions(setup_hooks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># request</span></span><br><span class="line">        resp = self.http_client_session.request(method, url, name=group_name, **parsed_request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># teardown hooks</span></span><br><span class="line">        teardown_hooks = testcase_dict.get(<span class="string">"teardown_hooks"</span>, [])</span><br><span class="line">        <span class="keyword">if</span> teardown_hooks:</span><br><span class="line">            self.do_hook_actions(teardown_hooks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 省略</span></span><br></pre></td></tr></table></figure><p>至于具体执行 hook 函数的 do_hook_actions，因为之前我们已经实现了文本格式函数描述的解析器 <code>context.eval_content</code>，因此直接调用就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_hook_actions</span><span class="params">(self, actions)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> action <span class="keyword">in</span> actions:</span><br><span class="line">        logger.log_debug(<span class="string">"call hook: &#123;&#125;"</span>.format(action))</span><br><span class="line">        self.context.eval_content(action)</span><br></pre></td></tr></table></figure><p>通过以上方式，我们就在 HttpRunner 中实现了用例集和单个用例层面的 hook 机制。</p><p>还是上面的测试用例，我们执行的效果如下所示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ hrun tests/httpbin/hooks.yml</span><br><span class="line">setup_testset</span><br><span class="line">get headers</span><br><span class="line">INFO     GET /headers</span><br><span class="line">---setup-testcase</span><br><span class="line">INFO     status_code: 200, response_time(ms): 10.29 ms, response_length: 151 bytes</span><br><span class="line">---teardown-testcase</span><br><span class="line">.</span><br><span class="line">get headers</span><br><span class="line">INFO     GET /headers</span><br><span class="line">---setup-testcase</span><br><span class="line">INFO     status_code: 200, response_time(ms): 4.46 ms, response_length: 151 bytes</span><br><span class="line">---teardown-testcase</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.028s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">teardown_testset</span><br></pre></td></tr></table></figure><p>可以看出，这的确已经满足了我们在用例集和单个用例层面的 hook 需求。</p><h2 id="进一步优化"><a href="#进一步优化" class="headerlink" title="进一步优化"></a>进一步优化</h2><p>以上实现已经可以满足大多数场景的测试需求了，不过还有两种场景无法满足：</p><ul><li>需要对请求的 request 内容进行预处理，例如，根据请求方法和请求的 Content-Type 来对请求的 data 进行加工处理；</li><li>需要根据响应结果来进行不同的后续处理，例如，根据接口响应的状态码来进行不同时间的延迟等待。</li></ul><p>在之前的实现方式中，我们无法实现上述两个场景，是因为我们无法将请求的 request 内容和响应的结果传给 hook 函数。</p><p>问题明确了，要进行进一步优化也就容易了。</p><p>因为我们在 hook 函数（类似于<code>$func($a, $b)</code>）中，是可以传入变量的，而变量都是存在于当前测试用例的上下文（context）中的，那么我们只要将 request 内容和请求响应分别作为变量绑定到当前测试用例的上下文即可。</p><p>具体地，我们可以约定两个变量，<code>$request</code>和<code>$response</code>，分别对应测试用例的请求内容（request）和响应实例（requests.Response）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_test</span><span class="params">(self, testcase_dict)</span>:</span></span><br><span class="line"></span><br><span class="line">        self.context.bind_variables(&#123;<span class="string">"request"</span>: parsed_request&#125;, level=<span class="string">"testcase"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 省略</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># setup hooks</span></span><br><span class="line">        setup_hooks = testcase_dict.get(<span class="string">"setup_hooks"</span>, [])</span><br><span class="line">        self.do_hook_actions(setup_hooks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># request</span></span><br><span class="line">        resp = self.http_client_session.request(method, url, name=group_name, **parsed_request)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># teardown hooks</span></span><br><span class="line">        teardown_hooks = testcase_dict.get(<span class="string">"teardown_hooks"</span>, [])</span><br><span class="line">        <span class="keyword">if</span> teardown_hooks:</span><br><span class="line">            self.context.bind_variables(&#123;<span class="string">"response"</span>: resp&#125;, level=<span class="string">"testcase"</span>)</span><br><span class="line">            self.do_hook_actions(teardown_hooks)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 省略</span></span><br></pre></td></tr></table></figure><p>在优化后的实现中，新增了两次调用，<code>self.context.bind_variables</code>，作用就是将解析后的 request 内容和请求的响应实例绑定到当前测试用例的上下文中。</p><p>然后，我们在 YAML/JSON 测试用例中就可以在需要的时候调用<code>$request</code>和<code>$response</code>了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">headers</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/headers</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    setup_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;setup_hook_prepare_kwargs($request)&#125;</span></span><br><span class="line"><span class="attr">    teardown_hooks:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">$&#123;teardown_hook_sleep_N_secs($response,</span> <span class="number">1</span><span class="string">)&#125;</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">[content.headers.Host,</span> <span class="string">"127.0.0.1:3458"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>对应的 hook 函数如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_hook_prepare_kwargs</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request[<span class="string">"method"</span>] == <span class="string">"POST"</span>:</span><br><span class="line">        content_type = request.get(<span class="string">"headers"</span>, &#123;&#125;).get(<span class="string">"content-type"</span>)</span><br><span class="line">        <span class="keyword">if</span> content_type <span class="keyword">and</span> <span class="string">"data"</span> <span class="keyword">in</span> request:</span><br><span class="line">            <span class="comment"># if request content-type is application/json, request data should be dumped</span></span><br><span class="line">            <span class="keyword">if</span> content_type.startswith(<span class="string">"application/json"</span>) <span class="keyword">and</span> isinstance(request[<span class="string">"data"</span>], (dict, list)):</span><br><span class="line">                request[<span class="string">"data"</span>] = json.dumps(request[<span class="string">"data"</span>])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> isinstance(request[<span class="string">"data"</span>], str):</span><br><span class="line">                request[<span class="string">"data"</span>] = request[<span class="string">"data"</span>].encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_hook_sleep_N_secs</span><span class="params">(response, n_secs)</span>:</span></span><br><span class="line">    <span class="string">""" sleep n seconds after request</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        time.sleep(n_secs)</span><br></pre></td></tr></table></figure><p>值得特别说明的是，因为 request 是可变参数类型（dict），因此该函数参数为引用传递，我们在 hook 函数里面对 request 进行修改后，后续在实际请求时也同样会发生改变，这对于我们需要对请求参数进行预处理时尤其有用。</p><h2 id="更多内容"><a href="#更多内容" class="headerlink" title="更多内容"></a>更多内容</h2><ul><li>中文使用说明文档：<a href="http://cn.httprunner.org/advanced/request-hook/" target="_blank" rel="noopener">http://cn.httprunner.org/advanced/request-hook/</a></li><li>代码实现：<a href="https://github.com/HttpRunner/HttpRunner/commit/2bb84b38745d004d336ed9867df5e63534b596bc" target="_blank" rel="noopener">GitHub commit</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在自动化测试中，通常在测试开始前需要做一些预处理操作，以及在测试结束后做一些清理性的工作。&lt;/p&gt;
&lt;p&gt;例如，测试使用手机号注册账号的接口
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
      <category term="hook" scheme="https://debugtalk.com/tags/hook/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 再议参数化数据驱动机制</title>
    <link href="https://debugtalk.com/post/httprunner-data-driven-refactor/"/>
    <id>https://debugtalk.com/post/httprunner-data-driven-refactor/</id>
    <published>2018-03-24T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://debugtalk.com/post/httprunner-data-driven/">《HttpRunner 实现参数化数据驱动机制》</a>一文中，我们实现了参数化数据驱动的需求，并阐述了其设计思路的演变历程和开发实现涉及的核心要素。</p><h2 id="问题及思考"><a href="#问题及思考" class="headerlink" title="问题及思考"></a>问题及思考</h2><p>经过一段时间的实际应用后，虽然参数化数据驱动的功能可以正常使用，但终究感觉不够优雅。</p><p>概括下来，主要有如下 4 个方面。</p><p>1、调用方式不够自然，描述方式比较繁琐。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"user management testset."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - user_agent:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - app_version:</span> <span class="string">Sequential</span></span><br></pre></td></tr></table></figure><p>描述参数取值方式的时候，需要采用<code>Sequential</code>和<code>Random</code>来进行指定是要顺序取值还是随机乱序取值。暂且不说<code>Sequential</code>这个单词大家能否总是保证拼写正确，绝大多数情况下都是顺序取值，却也总是需要指定<code>Sequential</code>，的确会比较繁琐。</p><p>2、即使是简单的数据驱动场景，也同样需要准备 CSV 文件，问题复杂化。</p><p>指定数据驱动的数据源时，必须创建一个 CSV 文件，并将参数化数据放置在其中。对于大数据量的情况可能没啥问题，但是假如是非常简单的场景，例如上面的例子中，我们只需要对<code>app_version</code>设定参数列表 <code>[&#39;2.8.5&#39;, &#39;2.8.6&#39;]</code>，虽然只有两个参数值，也同样需要去单独创建一个 CSV 文件，就会显得比较繁琐了。</p><p>试想，假如对于简单的参数化数据驱动场景，我们可以直接在 YAML/JSON 测试用例中描述参数列表，如下所示，那就简单得多了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"user management testset."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - user_agent:</span> <span class="string">['iOS/10.1',</span> <span class="string">'iOS/10.2'</span><span class="string">,</span> <span class="string">'iOS/10.3'</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - app_version:</span> <span class="string">['2.8.5',</span> <span class="string">'2.8.6'</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>3、无法兼顾没有现成参数列表，或者需要更灵活的方式动态生成参数列表的情况。</p><p>例如，假如我们期望每次执行测试用例的时候，里面的参数列表都是按照特定规则动态生成的。那在之前的模式下，我们就只能写一个动态生成参数的函数，然后在每次运行测试用例之前，先执行函数生成参数列表，然后将这些参数值导入到 CSV 文件中。想想都感觉好复杂。</p><p>既然 HttpRunner 已经实现了在 YAML/JSON 测试用例中调用函数的功能，那为啥不将函数调用与获取参数化列表的功能实现和描述语法统一起来呢？</p><p>试想，假如我们需要动态地生成 10 个账号，包含用户名和密码，那我们就可以将动态生成参数的函数放置到 <code>debugtalk.py</code> 中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_account</span><span class="params">(num)</span>:</span></span><br><span class="line">    accounts = []</span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, num+<span class="number">1</span>):</span><br><span class="line">        accounts.append(</span><br><span class="line">            &#123;<span class="string">"username"</span>: <span class="string">"user%s"</span> % index, <span class="string">"password"</span>: str(index) * <span class="number">6</span>&#125;,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> accounts</span><br></pre></td></tr></table></figure><p>然后，在 YAML/JSON 测试用例中，再使用 <code>${}</code> 的语法来调用函数，并将函数返回的参数列表传给需要参数化的变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - username-password:</span> <span class="string">$&#123;get_account(10)&#125;</span></span><br></pre></td></tr></table></figure><p>实现了这一特性后，要再兼容从 CSV 文件数据源中读取参数列表的方式也很简单了。我们只需要在 HttpRunner 中内置一个解析 CSV 文件的 <code>parameterize</code> 函数（也可以简写为 <code>P</code> 函数），然后就可以在 YAML/JSON 中通过函数调用的方式引用 CSV 文件了。如下例中的 user_id 所示。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo"</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - user_agent:</span> <span class="string">["iOS/10.1",</span> <span class="string">"iOS/10.2"</span><span class="string">,</span> <span class="string">"iOS/10.3"</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - user_id:</span> <span class="string">$&#123;P(user_id.csv)&#125;</span></span><br><span class="line"><span class="attr">        - username-password:</span> <span class="string">$&#123;get_account(10)&#125;</span></span><br></pre></td></tr></table></figure><p>这样一来，我们就可以优雅地实现参数列表数据源的指定了，并且从概念理解和框架实现的角度也能完成统一，即对于 <code>parameters</code> 中的参数变量而言，传入的都是一个参数列表，这个列表可以是直接指定的，可以是从 CSV 文件中加载的，也可以是通过调用自定义函数动态生成的。</p><p>4、数据驱动只能在测试用例集（testset）层面，不能针对单个测试用例（testcse）进行数据驱动。</p><p>例如，用例集里面有两个接口，第一个接口是获取 token，第二个接口是创建用户（参考 <a href="http://cn.httprunner.org/quickstart/#_12" target="_blank" rel="noopener">QuickStart</a> 中的 <a href="http://cn.httprunner.org/data/demo-quickstart-6.json" target="_blank" rel="noopener">demo-quickstart-6.json</a>）。那么按照之前的设计，在 config 中配置了参数化之后，就是针对整个测试用例集（testset）层面的数据驱动，使用每一组参数运行的时候都要先执行第一个接口，再执行第二个接口。</p><p>这可能就跟我们预期的情况不一样了。假如我们期望的是只针对第二个接口做数据驱动，即第一个接口只需要调用一次获取到 token，然后使用参数列表中的数值分别调用第二个接口创建用户，那么之前的方法就行不通了。</p><p>既然有这类需求，因此数据驱动也应该具有作用域的概念。</p><p>类似于定义的 <code>variables</code>，定义在 config 中是全局有效的，定义在 test 中就只对当前测试用例有效。同样地，我们也可以针对 parameters 增加作用域的概念，若只需实现对当前用例（testcase）的参数化数据驱动，就可以将 parameters 配置放置到当前 test 中。</p><h2 id="新的实现"><a href="#新的实现" class="headerlink" title="新的实现"></a>新的实现</h2><p>想法明确了，改造实现也就比较简单了。</p><p>从版本 <code>1.1.0</code> 开始，HttpRunner 便支持了上述新的数据驱动方式。详细的使用方法，可参考如下使用说明文档：</p><p><a href="http://cn.httprunner.org/advanced/data-driven/" target="_blank" rel="noopener">http://cn.httprunner.org/advanced/data-driven/</a></p><p>至此，HttpRunner 的数据驱动机制就比较完善和稳定了，应该可以解决绝大多数数据驱动场景的需求。</p><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><p>不过，还有一类场景暂时没有实现支持，即需要根据先前接口返回结果来对后续接口进行数据驱动的情况。</p><p>以如下场景为例：</p><ul><li>加载用户列表，获取当前用户列表中的所有用户；</li><li>依次对每一个用户进行点赞或者发送消息的操作。</li></ul><p>这和前面的第三条有点类似，都需要先动态获取参数列表，然后再使用获取得到的参数列表进行数据驱动。但也存在较大的差异，即获取用户列表的操作也是测试场景的一部分，并且通常因为需要共享 session 和 cookies，因此不能将第一步的请求放置到 debugtalk.py 中。</p><p>之前的一个想法是，在第一个接口中，将结果返回的用户列表提取（extract）出来保存至变量（user_list），然后在后续需要做数据驱动的接口中，在 parameters 中引用前面提取出的用户列表（$user_list）；若有需要，还可以自定义函数（parse_users），将前面提取出来的用户列表转换至框架支持的格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">load</span> <span class="string">user</span> <span class="string">list</span></span><br><span class="line"><span class="attr">    request:</span> <span class="string">&#123;...&#125;</span></span><br><span class="line"><span class="attr">    extract:</span></span><br><span class="line"><span class="attr">        - user_list:</span> <span class="string">content.users</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">send</span> <span class="string">message</span> <span class="string">to</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - user:</span> <span class="string">$&#123;parse_users($user_list)&#125;</span></span><br><span class="line"><span class="attr">    request:</span> <span class="string">&#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>这个方式乍一看是可行的，但实际却是行不通的。</p><p>问题在于，在 HttpRunner 的数据驱动机制中，采用参数列表构造测试用例是在初始化阶段，做的工作主要是根据参数列表中的数据生成测试用例并添加至 unittest 的 TestSuite 中，此时测试用例还没有进入执行环节，因此也没法从接口的响应结果中提取参数列表。</p><p>若非要解决这个问题，针对 test 的数据驱动，可以将解析 parameters 的实现放置到 request 中；这的确可以实现上述场景中的功能，但在测试用例执行统计方面就会出现问题。以该场景为例，假如获取到的用户列表有100个用户，那么整个用例集将执行101次测试用例，但最终生成的测试报告中却只会展示运行了2条测试用例。</p><p>针对该场景，我还没有想到很好的解决方案，暂且将其作为一个遗留问题吧。若你有比较好的实现方案，欢迎反馈给我，或者直接提交 <a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener">PR</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://debugtalk.com/post/httprunner-data-driven/&quot;&gt;《HttpRunner 实现参数化数据驱动机制》&lt;/a&gt;一文中，我们实现了参数化数据驱动的需求，并阐述了其设计思路的演变历程和开发实现涉及的核心要素。
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>在大疆做测试开发是一种什么体验？</title>
    <link href="https://debugtalk.com/post/test-dev-in-dji/"/>
    <id>https://debugtalk.com/post/test-dev-in-dji/</id>
    <published>2018-03-05T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>提到测试开发这个岗位，可能有的人会有些陌生，都听说过软件测试和软件开发，但测试开发又是干什么的呢？</p><p>说到这里，我又想起之前在阿里移动事业群的一件趣事儿。当时也是做测试开发岗位，我所在的组在公司内部有一个响当当的名号，“牲畜组”，生产力促进组嘛。有的同事更直接，亲切地叫我们组为”畜牲组“，促进生产力组的简称。</p><p>可以看到，不管是”牲畜“还是”畜牲“，测试开发这个岗位的核心都是提升团队生产力，也就是工作效率。更具体地，在大多数公司内部，测试开发岗位的职责就是提升业务测试人员的测试效率。</p><p>接触过软件测试的同学都知道，在项目版本迭代的过程中，业务测试人员需要进行大量的回归测试，重复工作量较大，在短暂的时间内也很难保证较大的测试覆盖率。这就需要测试开发人员来辅助开发相应的工具和平台，常见的包括实现接口测试自动化、UI自动化、性能专项、持续集成、线上监控等，将测试人员从重复性的工作解放出来，从而能有更多的时间精力投入到探索性测试当中去。</p><p>从这个层面上来讲，当前各个互联网公司的做法都差不多，只是不同公司可能会因为业务类型差异而有所侧重而已。</p><p>但回归生产力的本质，我们会发现，测试效率只能算是团队生产力的一部分。这就好比一个木桶，测试效率只是其中的一块木板，而研发效率、运维效率、项目管理等木板，同样制约着项目团队的整体工作效率。</p><p>可能有人会说，这些都不是测试开发的工作范畴啊！</p><p>事实上，很多公司的测试开发的确是没法触及到测试以外的工作内容的。甚至很多时候，整个测试团队都是直接向研发团队进行工作汇报，即使在提升测试效率的本职工作中话语权也是少之又少，更别谈测试以外的了。</p><p><strong>那么，在大疆互联网事业部做测试开发又有什么不同呢？</strong></p><p>得益于大疆“<em>激极尽致，求真品诚</em>”的企业文化，岗位并没有那么严格的界限划分。如果你发现一件事确实有价值，但当前却没有人去做，那么即使这不在你的工作范畴之内，你也可以主动站出来挑起这块儿的担子。</p><p>对于大疆的测试开发岗位同样如此，岗位性质决定了我们会比其它任何岗位都更关注团队的生产力和工作效率，那么不管是研发、运维、测试、运营还是项目管理，假如其中任何一个环节存在效率低下的问题，我们都可以申请立项，通过开发工具或平台来解决团队的痛点。当然，可能某些事情并不是测试开发岗位的同学就能独自完成的，那也没有关系，只要提出的问题确实具有业务价值，那么我们也可以申请到其它岗位的同学来协作一起完成。可能对于某些公司来说不可想象，但这在大疆确实就是切实可行的。</p><p>另一方面，大疆发展极其迅速，触及的领域也越来越广。这对我们测试开发来说，既是机遇，也是挑战。在这种环境下，我们有机会充分发挥主观能动性，去挖掘并解决团队中实际存在的痛点。分析需求、设计方案、技术选型、编码实现、收集反馈、迭代优化，这么一个流程下来，产出的工具或平台就如同自己精心打造的产品，成就感和按部就班地搬砖是完全不一样的。也许，我们测试开发岗位才是最接近”全栈“的工程师？</p><p>除此之外，在大疆的测试开发工程师还兼具着更多的职责。例如，整个互联网事业部的所有系统，遇到新品发布、技术升级改造、系统架构重构等重大事件时，压力测试都是由我们测试开发组来主导完成的。在质量部内部，我们测试开发组还会兼顾对业务测试同学进行测试技术和编程语言的培训，以及协助业务测试同学解决一些技术难题等。在这个过程中，我们测试开发本身的技术视野和解决问题的能力也得到了极大的增强。</p><p>最后，如果你对我们的岗位感兴趣，欢迎加入我们！</p><h2 id="广告时间"><a href="#广告时间" class="headerlink" title="广告时间"></a>广告时间</h2><p>近期，大疆创新开启新的一轮招聘啦，深圳总部、北京研发中心、上海分公司均有大量岗位招聘需求。</p><p>详细的招聘需求和日程安排请见：<a href="https://mp.weixin.qq.com/s/vlhAWho2hMOiWIVwkfIf0A" target="_blank" rel="noopener">【内推】大疆创新春季招聘开启啦（深圳+北京）</a></p><p>如需找我内推，请发送简历至我的个人邮箱: <strong><a href="mailto:mail@debugtalk.com">mail@debugtalk.com</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;提到测试开发这个岗位，可能有的人会有些陌生，都听说过软件测试和软件开发，但测试开发又是干什么的呢？&lt;/p&gt;
&lt;p&gt;说到这里，我又想起之前在阿里移动事业群的一件趣事儿。当时也是做测试开发岗位，我所在的组在公司内部有一个响当当的名号，“牲畜组”，生产力促进组嘛。有的同事更直接，
      
    
    </summary>
    
      <category term="6. Recommendation" scheme="https://debugtalk.com/categories/6-Recommendation/"/>
    
    
      <category term="大疆" scheme="https://debugtalk.com/tags/%E5%A4%A7%E7%96%86/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 实现参数化数据驱动机制</title>
    <link href="https://debugtalk.com/post/httprunner-data-driven/"/>
    <id>https://debugtalk.com/post/httprunner-data-driven/</id>
    <published>2018-02-15T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从 1.1.0 版本开始，数据驱动机制进行了较大的优化和调整。<br>请参考：<a href="https://debugtalk.com/post/httprunner-data-driven/">《HttpRunner 再议参数化数据驱动机制》</a></p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在自动化测试中，经常会遇到如下场景：</p><blockquote><p>1、测试搜索功能，只有一个搜索输入框，但有10种不同类型的搜索关键字；<br>2、测试账号登录功能，需要输入用户名和密码，按照等价类划分后有20种组合情况。</p></blockquote><p>这里只是随意找了两个典型的例子，相信大家都有遇到过很多类似的场景。总结下来，就是在我们的自动化测试脚本中存在参数，并且我们需要采用不同的参数去运行。</p><p>经过概括，参数基本上分为两种类型：</p><ul><li>单个独立参数：例如前面的第一种场景，我们只需要变换搜索关键字这一个参数</li><li>多个具有关联性的参数：例如前面的第二种场景，我们需要变换用户名和密码两个参数，并且这两个参数需要关联组合</li></ul><p>然后，对于参数而言，我们可能具有一个参数列表，在脚本运行时需要按照不同的规则去取值，例如顺序取值、随机取值、循环取值等等。</p><p>对于这一块儿，没有太多新的概念，这就是典型的参数化和数据驱动。遗憾的是，当前<code>HttpRunner</code>并未支持该功能特性。</p><p>考虑到该需求的普遍性，并且近期提到该需求的的人也越来越多（<a href="https://github.com/HttpRunner/HttpRunner/issues/74" target="_blank" rel="noopener">issue #74</a>, <a href="https://github.com/HttpRunner/HttpRunner/issues/87" target="_blank" rel="noopener">issue #87</a>, <a href="https://github.com/HttpRunner/HttpRunner/issues/88" target="_blank" rel="noopener">issue #88</a>, <a href="https://github.com/HttpRunner/HttpRunner/issues/97" target="_blank" rel="noopener">issue #97</a>），因此趁着春节假期的空闲时间，决定优先实现下。</p><p>经过前面的场景分析，我们的目标已经很明确了，接下来就是如何实现的问题了。</p><h2 id="借鉴-LoadRunner-的数据参数化"><a href="#借鉴-LoadRunner-的数据参数化" class="headerlink" title="借鉴 LoadRunner 的数据参数化"></a>借鉴 LoadRunner 的数据参数化</h2><p>要造一个轮子，最好是先看下现有知名轮子的实现机制。之前有用过一段时间的 LoadRunner，对其参数化机制印象蛮深的，虽然它是性能测试工具，但在脚本参数化方面是通用的。</p><p>我们先看下在 LoadRunner 中是如何实现参数化的。</p><p>在 LoadRunner 中，可以在脚本中创建一个参数，然后参数会保存到一个<code>.dat</code>的文件中，例如下图中的<code>psd.dat</code>。</p><p><img src="/images/loadrunner-parameterize.jpg" alt></p><p>在<code>.dat</code>文件中，是采用表格的形式来存储参数值，结构与<code>CSV</code>基本一致。</p><p>对于单个独立参数，可以将参数列表保存在一个单独的<code>.dat</code>文件中，第一行为参数名称，后续每一行为一个参数值。例如本文背景介绍中的第一类场景，数据存储形式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Keyword</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">debugtalk</span><br></pre></td></tr></table></figure><p>然后对于参数的取值方式，可以通过<code>Select next row</code>和<code>Update value on</code>进行配置。</p><p><code>Select next row</code>的可选方式有：</p><ul><li>Sequential：顺序取值</li><li>Random：随机取值</li><li>Unique：为每个虚拟用户分配一条唯一的数据</li></ul><p><code>Update value on</code>的可选方式有：</p><ul><li>Each iteration：每次脚本迭代时更新参数值</li><li>Each occurrence：每次出现参数引用时更新参数值</li><li>Once：每条数据只能使用一次</li></ul><p>而且，可以通过对这两种方式进行组合，配制出9种参数化方式。</p><p>另外，因为 LoadRunner 本身是性能测试工具，具有长时间运行的需求，假如<code>Select next row</code>选择为<code>Unique</code>，同时<code>Update value on</code>设置为<code>Each iteration</code>，那么就会涉及到参数用完的情况。在该种情况下，可通过<code>When out of value</code>配置项实现如下选择：</p><ul><li>Abort vuser：当超出时终止脚本</li><li>Continue in a cyclic manner：当超出时回到列表头再次取值</li><li>Continue with last value：使用参数表中的最后一个值</li></ul><p>对于多个具有关联性的参数，可以将关联参数列表保存在一个<code>.dat</code>文件中，第一行为参数名称，后续每一行为一个参数值，参数之间采用逗号进行分隔。例如本文背景介绍中的第二类场景，数据存储形式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UserName,Password</span><br><span class="line">test1,111111</span><br><span class="line">test2,222222</span><br><span class="line">test3,333333</span><br></pre></td></tr></table></figure><p>对于参数的取值方式，与上面单个独立参数的取值方式基本相同。差异在于，我们可以只配置一个参数（例如<code>UserName</code>）的取值方式，然后其它参数（例如<code>Password</code>）的取值方式选择为<code>same line as UserName</code>。如此一来，我们就可以保证参数化时的数据关联性。</p><p>LoadRunner 的参数化机制就回顾到这里，可以看出，其功能还是很强大的，使用也十分灵活。</p><h2 id="设计思路演变历程"><a href="#设计思路演变历程" class="headerlink" title="设计思路演变历程"></a>设计思路演变历程</h2><p>现在再回到我们的 HttpRunner，要如何来实现参数化机制呢？</p><p>因为 LoadRunner 的参数化机制比较完善，用户群体也很大，因此我在脑海里最先冒出的想法就是照抄 LoadRunner，将 LoadRunner 在 GUI 中配置的内容在 HttpRunner 中通过<code>YAML/JSON</code>来进行配置。</p><p>按照这个思路，在 HttpRunner 的 config 中，就要有一块儿地方用来进行参数化配置，暂且设定为<code>parameters</code>吧。然后，对于每一个参数，其参数列表要单独存放在文件中，考虑到LoadRunner中的<code>.dat</code>文件基本就是<code>CSV</code>格式，因此可以约定采用大众更熟悉的<code>.csv</code>文件来存储参数；在脚本中，要指定参数变量从哪个文件中取值，那么就需要设定一个<code>parameter_file</code>，用于指定对应的参数文件路径。接下来，要实现取值规则的配置，例如是顺序取值还是随机取值，那么就需要设定<code>select_next_row</code>和<code>update_value_on</code>。</p><p>根据该设想，在<code>YAML</code>测试用例文件中，数据参数化将描述为如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo for data driven."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - Keyword:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">keywords.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">            update_value_on:</span> <span class="string">EachIteration</span></span><br><span class="line"><span class="attr">        - UserName:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">account.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Sequential</span></span><br><span class="line"><span class="attr">            update_value_on:</span> <span class="string">EachIteration</span></span><br><span class="line"><span class="attr">        - Password:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">account.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">same</span> <span class="string">line</span> <span class="string">as</span> <span class="string">UserName</span></span><br></pre></td></tr></table></figure><p>这个想法基本可行，但就是感觉配置项有些繁琐，我们可以尝试再对其进行简化。</p><p>首先，比较明显的，针对每个参数都要配置<code>select_next_row</code>和<code>update_value_on</code>，虽然从功能上来说比较丰富，但是对于用户来说，这些功能并不都是必须的。特别是<code>update_value_on</code>这个参数，绝大多数情况下我们的需求应该都是采用<code>Each iteration</code>，即每次脚本再次运行时更新参数值。因此，我们可以去除<code>update_value_on</code>这个配置项，默认都是采用<code>Each iteration</code>的方式。</p><p>经过第一轮简化，配置描述方式变为如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo for data driven."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - Keyword:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">keywords.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - UserName:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">account.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Sequential</span></span><br><span class="line"><span class="attr">        - Password:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">account.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">same</span> <span class="string">line</span> <span class="string">as</span> <span class="string">UserName</span></span><br></pre></td></tr></table></figure><p>然后，我们可以看到<code>UserName</code>和<code>Password</code>这两个参数，它们有关联性，但却各自单独进行了配置；而且对于有关联性的参数，除了需要对第一个参数配置取值方式外，其它参数的<code>select_next_row</code>应该总是为<code>same line as XXX</code>，这样描述就显得比较累赘了。</p><p>既然是有关联性的参数，那就放在一起吧，参数名称可以采用约定的符号进行分离。考虑到参数变量名称通常包含字母、数字和下划线，同时要兼顾<code>YAML/JSON</code>中对字符的限制，因此选择短横线（<code>-</code>）作为分隔符吧。</p><p>经过第二轮简化，配置描述方式变为如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo for data driven."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - Keyword:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">keywords.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - UserName-Password:</span></span><br><span class="line"><span class="attr">            parameter_file:</span> <span class="string">account.csv</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Sequential</span></span><br></pre></td></tr></table></figure><p>接着，我们再看下<code>parameter_file</code>参数。因为我们测试用例中的参数名称必须与数据源进行绑定，因此这一项信息是不可少的。但是在描述形式上，还是会感觉有些繁琐。再一想，既然我们本来就要指定参数名称，那何必不将参数名称约定为文件名称呢？</p><p>例如，对于参数<code>Keyword</code>，我们可以将其数据源文件名称约定为<code>Keyword.csv</code>；对于参数<code>UserName</code>和<code>Password</code>，我们可以将其数据源文件名称约定为<code>UserName-Password.csv</code>；然后，再约定数据源文件需要与当前<code>YAML/JSON</code>测试用例文件放置在同一个目录。</p><p>经过第三轮简化，配置描述方式变为如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo for data driven."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - Keyword:</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - UserName-Password:</span></span><br><span class="line"><span class="attr">            select_next_row:</span> <span class="string">Sequential</span></span><br></pre></td></tr></table></figure><p>同时该用例文件同级目录下的数据源文件名称为<code>Keyword.csv</code>和<code>UserName-Password.csv</code>。</p><p>现在，我们就只剩下<code>select_next_row</code>一个配置项了。既然是只剩一项，那就也省略配置项名称吧。</p><p>最终，我们的配置描述方式变为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"demo for data driven."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - Keyword:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - UserName-Password:</span> <span class="string">Sequential</span></span><br></pre></td></tr></table></figure><p>不过，我们还忽略了一个信息，那就是脚本的运行次数。假如参数取值都是采用<code>Sequential</code>的方式，那么我们可以将不同组参数进行笛卡尔积的组合，这是一个有限次数，可以作为自动化测试运行终止的条件；但如果参数取值采用<code>Random</code>的方式，即每次都是在参数列表里面随机取值，那么就不好界定自动化测试运行终止的条件了，我们只能手动进行终止，或者事先指定运行的总次数，不管是采用哪种方式，都会比较麻烦。</p><p>针对参数取值采用<code>Random</code>方式的这个问题，我们不妨换个思路。从数据驱动的角度来看，我们期望在自动化测试时能遍历数据源文件中的所有数据，那么重复采用相同参数进行测试的意义就不大了。因此，在选择<code>Random</code>的取值方式时，我们可以先将参数列表进行乱序排序，然后采用顺序的方式进行遍历；对于存在多组参数的情况，也可以实现乱序排序后再进行笛卡尔积的组合方式了。</p><p>到此为止，我们的参数化配置方式应该算是十分简洁了，而且在功能上也能满足常规参数化的配置需求。</p><p>最后，我们再回过头来看脚本参数化设计思路的演变历程，基本上都可以概括为<code>约定大于配置</code>，这的确也是<code>HttpRunner</code>崇尚和遵循的准则。</p><h2 id="开发实现"><a href="#开发实现" class="headerlink" title="开发实现"></a>开发实现</h2><p>设计思路理顺了，实现起来就比较简单了，点击此处查看<a href="https://github.com/HttpRunner/HttpRunner/commit/f8569aad914d4fe47ec24ac2e2e472b7b93c310d" target="_blank" rel="noopener">相关代码</a>，就会发现实际的代码量并不多。</p><p>在这里我就只挑几个典型的点讲下。</p><h3 id="数据源格式约定"><a href="#数据源格式约定" class="headerlink" title="数据源格式约定"></a>数据源格式约定</h3><p>既然是参数化，那么肯定会存在数据源的问题，我们约定采用<code>.csv</code>文件格式来存储参数列表。同时，在同一个测试场景中可能会存在多个参数的情况，为了降低问题的复杂度，我们可以约定独立参数存放在独立的<code>.csv</code>文件中，多个具有关联性的参数存放在一个<code>.csv</code>文件中。另外，我们同时约定在<code>.csv</code>文件中的第一行必须为参数名称，并且要与文件名保持一致；从第二行开始为参数值，每个值占一行。</p><p>例如，<code>keyword</code>这种独立的参数就可以存放在<code>keyword.csv</code>中，内容形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">keyword</span><br><span class="line">hello</span><br><span class="line">world</span><br><span class="line">debugtalk</span><br></pre></td></tr></table></figure><p><code>username</code>和<code>password</code>这种具有关联性的参数就可以存放在<code>username-password.csv</code>中，内容形式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">username,password</span><br><span class="line">test1,111111</span><br><span class="line">test2,222222</span><br><span class="line">test3,333333</span><br></pre></td></tr></table></figure><h3 id="csv-解析器"><a href="#csv-解析器" class="headerlink" title="csv 解析器"></a>csv 解析器</h3><p>数据源的格式约定好了，我们要想进行读取，那么就得有一个对应的解析器。因为我们后续想要遍历每一行数据，并且还会涉及到多个参数进行组合的情况，因此我们希望解析出来的每一行数据应该同时包含参数名称和参数值。</p><p>于是，我们的数据结构就约定采用<code>list of dict</code>的形式。即每一个<code>.csv</code>文件解析后会得到一个列表（list），而列表中的每一个元素为一个字典结构（dict），对应着一行数据的参数名称和参数值。具体实现的代码函数为<a href="https://github.com/HttpRunner/HttpRunner/commit/f8569aad914d4fe47ec24ac2e2e472b7b93c310d#diff-1ef6376047562e36a304745bca9ade9aR47" target="_blank" rel="noopener"><code>_load_csv_file</code></a>。</p><p>例如，上面的<code>username-password.csv</code>经过解析，会生成如下形式的数据结构。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;'username': 'test1', 'password': '111111'&#125;,</span><br><span class="line">    &#123;'username': 'test2', 'password': '222222'&#125;,</span><br><span class="line">    &#123;'username': 'test3', 'password': '333333'&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里还会涉及到一个问题，就是参数取值顺序。</p><p>在<code>YAML/JSON</code>测试用例中，我们会配置参数的取值顺序，是要顺序取值（<code>Sequential</code>）还是乱序随机取值（<code>Random</code>）。对于顺序的情况没啥好说的，默认从<code>.csv</code>文件中读取出的内容就是顺序的；对于随机取值，更确切地说，应该是乱序取值，我们需要进行一次乱序排序，实现起来也很简单，使用<code>random.shuffle</code>函数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> fetch_method.lower() == <span class="string">"random"</span>:</span><br><span class="line">    random.shuffle(csv_content_list)</span><br></pre></td></tr></table></figure><h3 id="多个参数的组合"><a href="#多个参数的组合" class="headerlink" title="多个参数的组合"></a>多个参数的组合</h3><p>然后，对于多个参数的情况，为了组合出所有可能的情况，我们就需要用到笛卡尔积的概念。直接看例子可能会更好理解些。</p><p>例如我们在用例场景中具有三个参数，<code>a</code>为独立参数，参数列表为[1, 2]；<code>x</code>和<code>y</code>为关联参数，参数列表为[[111,112], [121,122]]；经过解析后，得到的数据分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a:</span><br><span class="line">[&#123;&quot;a&quot;: 1&#125;, &#123;&quot;a&quot;: 2&#125;]</span><br><span class="line"></span><br><span class="line">x &amp; y:</span><br><span class="line">[</span><br><span class="line">    &#123;&quot;x&quot;: 111, &quot;y&quot;: 112&#125;,</span><br><span class="line">    &#123;&quot;x&quot;: 121, &quot;y&quot;: 122&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>那么经过笛卡尔积，就可以组合出4种情况，组合后的结果应该为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;'a': 1, 'x': 111, 'y': 112&#125;,</span><br><span class="line">    &#123;'a': 1, 'x': 121, 'y': 122&#125;,</span><br><span class="line">    &#123;'a': 2, 'x': 111, 'y': 112&#125;,</span><br><span class="line">    &#123;'a': 2, 'x': 121, 'y': 122&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里需要强调的是，多个参数经过笛卡尔积运算转换后，仍然是<code>list of dict</code>的数据结构，列表中的每一个字典（dict）代表着参数的一种组合情况。</p><h3 id="参数化数据驱动"><a href="#参数化数据驱动" class="headerlink" title="参数化数据驱动"></a>参数化数据驱动</h3><p>现在，我们已经实现了在<code>YAML/JSON</code>测试用例文件中对参数进行配置，从<code>.csv</code>数据源文件中解析出参数列表，并且生成所有可能的组合情况。最后还差一步，就是如何使用参数值来驱动测试用例的执行。</p><p>听上去很高大上，但实际却异常简单，直接对照着<a href="https://github.com/HttpRunner/HttpRunner/commit/f8569aad914d4fe47ec24ac2e2e472b7b93c310d#diff-fe4aef5754006b3e9100eb41eb3ca28cR57" target="_blank" rel="noopener">代码</a>来说吧。</p><p><img src="/images/httprunner-parameterize.jpg" alt></p><p>对于每一组参数组合情况来说，我们完全可以将其视为当前用例集运行时定义的变量值。而在 HttpRunner 中每一次运行测试用例集的时候都需要对<code>runner.Runner</code>做一次初始化，里面会用到定义的变量（即<code>config_dict[&quot;variables&quot;]</code>），那么，我们完全可以在每次初始化的时候将组合好的参数作为变量传进去，假如存在同名的变量，就进行覆盖。</p><p>这样一来，我们就可以使用所有的参数组合情况来依次驱动测试用例的执行，并且每次执行时都采用了不同的参数，从而也就实现了参数化数据驱动的目的。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>最后我们再来看下实际的运行效果吧。</p><p>假设我们有一个获取token的接口，我们需要使用 user_agent 和 app_version 这两个参数来进行参数化数据驱动。</p><p>YAML 测试用例的描述形式如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"user management testset."</span></span><br><span class="line"><span class="attr">    parameters:</span></span><br><span class="line"><span class="attr">        - user_agent:</span> <span class="string">Random</span></span><br><span class="line"><span class="attr">        - app_version:</span> <span class="string">Sequential</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        - user_agent:</span> <span class="string">'iOS/10.3'</span></span><br><span class="line"><span class="attr">        - device_sn:</span> <span class="string">$&#123;gen_random_string(15)&#125;</span></span><br><span class="line"><span class="attr">        - os_platform:</span> <span class="string">'ios'</span></span><br><span class="line"><span class="attr">        - app_version:</span> <span class="string">'2.8.6'</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        base_url:</span> <span class="string">$BASE_URL</span></span><br><span class="line"><span class="attr">        headers:</span></span><br><span class="line"><span class="attr">            Content-Type:</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">            device_sn:</span> <span class="string">$device_sn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span> <span class="string">with</span> <span class="string">$user_agent</span> <span class="string">and</span> <span class="string">$app_version</span></span><br><span class="line"><span class="attr">    api:</span> <span class="string">get_token($user_agent,</span> <span class="string">$device_sn,</span> <span class="string">$os_platform,</span> <span class="string">$app_version)</span></span><br><span class="line"><span class="attr">    extract:</span></span><br><span class="line"><span class="attr">        - token:</span> <span class="string">content.token</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="attr">        - "eq":</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - "len_eq":</span> <span class="string">["content.token",</span> <span class="number">16</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>其中，user_agent 和 app_version 的数据源列表分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_agent</span><br><span class="line">iOS/10.1</span><br><span class="line">iOS/10.2</span><br><span class="line">iOS/10.3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app_version</span><br><span class="line">2.8.5</span><br><span class="line">2.8.6</span><br></pre></td></tr></table></figure><p>那么，经过笛卡尔积组合，应该总共有6种参数组合情况，并且 user_agent 为乱序取值，app_version 为顺序取值。</p><p>最终的测试结果如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ hrun tests/data/demo_parameters.yml</span><br><span class="line"></span><br><span class="line">Running tests...</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"> get token with iOS/10.2 and 2.8.5 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 13 ms, response_length: 46 bytes</span><br><span class="line">OK (0.014845)s</span><br><span class="line"> get token with iOS/10.2 and 2.8.6 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 2 ms, response_length: 46 bytes</span><br><span class="line">OK (0.003909)s</span><br><span class="line"> get token with iOS/10.1 and 2.8.5 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 3 ms, response_length: 46 bytes</span><br><span class="line">OK (0.004090)s</span><br><span class="line"> get token with iOS/10.1 and 2.8.6 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 5 ms, response_length: 46 bytes</span><br><span class="line">OK (0.006673)s</span><br><span class="line"> get token with iOS/10.3 and 2.8.5 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 3 ms, response_length: 46 bytes</span><br><span class="line">OK (0.004775)s</span><br><span class="line"> get token with iOS/10.3 and 2.8.6 ... INFO:root: Start to POST http://127.0.0.1:5000/api/get-token</span><br><span class="line">INFO:root: status_code: 200, response_time: 3 ms, response_length: 46 bytes</span><br><span class="line">OK (0.004846)s</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 6 tests in 0.046s</span><br></pre></td></tr></table></figure><p>至此，我们就已经实现了参数化数据驱动的需求。对于测试用例中参数的描述形式，大家要是发现还有更加简洁优雅的方式，欢迎反馈给我。</p><p>最后，本文发表于 2018 年大年初一，祝大家新年快乐，狗年旺旺旺！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从 1.1.0 版本开始，数据驱动机制进行了较大的优化和调整。&lt;br&gt;请参考：&lt;a href=&quot;https://debugtalk.com/post/httprunner-data-driven/&quot;&gt;《HttpRunner 再议参数化数据驱动机制》
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 通过 skip 机制实现对测试用例的分组执行控制</title>
    <link href="https://debugtalk.com/post/HttpRunner-skip-feature/"/>
    <id>https://debugtalk.com/post/HttpRunner-skip-feature/</id>
    <published>2018-02-07T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>近期，某位同学对<code>HttpRunner</code>提了一个<a href="https://github.com/HttpRunner/HttpRunner/issues/96" target="_blank" rel="noopener">需求点</a>：</p><blockquote><p>能否支持类似unittest中的skip注解，方便灵活剔除某些用例，不执行。<br>目前在接口测试日常构建中，会遇到一些接口开发暂时屏蔽了或者降级，导致用例执行失败；所以想当遇到这些情况的时候，能够临时剔除掉某些用例不执行；等后续恢复后，再去掉，然后恢复执行。</p></blockquote><p>针对这种情况，<code>HttpRunner</code>的确没有直接支持。之所以说是没有<code>直接</code>支持，是因为在<code>HttpRunner</code>中存在<code>times</code>关键字，可以指定某个<code>test</code>的运行次数。</p><p>例如，如下<code>test</code>中指定了<code>times</code>为3，那么该<code>test</code>就会运行3次。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    times:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">    request:</span> <span class="string">&#123;...&#125;</span></span><br><span class="line"><span class="attr">    validate:</span> <span class="string">[...]</span></span><br></pre></td></tr></table></figure><p>假如要实现临时屏蔽掉某些<code>test</code>，那么就可以将对应<code>test</code>的<code>times</code>设置为0。</p><p>这虽然也能勉强实现需求，但是这跟直接将临时不运行的<code>test</code>注释掉没什么区别，都需要对测试用例内容进行改动，使用上很是不方便。</p><p>考虑到该需求的普遍性，<code>HttpRunner</code>的确应该增加对该种情况的支持。</p><p>在这方面，<code>unittest</code>已经有了清晰的定义，有三种常用的装饰器可以控制单元测试用例是否被执行：</p><ul><li>@unittest.skip(reason)：无条件跳过当前测试用例</li><li>@unittest.skipIf(condition, reason)：当条件表达式的值为true时跳过当前测试用例</li><li>@unittest.skipUnless(condition, reason)：当条件表达式的值为false时跳过当前测试用例</li></ul><p>该功能完全满足我们的需求，因此，我们可以直接复用其概念，尝试实现同样的功能。</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>目标明确了，那需要怎么实现呢？</p><p>首先，我们先看下<code>unittest</code>中这三个函数是怎么实现的；这三个函数定义在<code>unittest/case.py</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkipTest</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Raise this exception in a test to skip it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Usually you can use TestCase.skipTest() or one of the skipping decorators</span></span><br><span class="line"><span class="string">    instead of raising this directly.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip</span><span class="params">(reason)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Unconditionally skip a test.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(test_item)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(test_item, (type, types.ClassType)):</span><br><span class="line"><span class="meta">            @functools.wraps(test_item)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">skip_wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">                <span class="keyword">raise</span> SkipTest(reason)</span><br><span class="line">            test_item = skip_wrapper</span><br><span class="line"></span><br><span class="line">        test_item.__unittest_skip__ = <span class="literal">True</span></span><br><span class="line">        test_item.__unittest_skip_why__ = reason</span><br><span class="line">        <span class="keyword">return</span> test_item</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skipIf</span><span class="params">(condition, reason)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Skip a test if the condition is true.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        <span class="keyword">return</span> skip(reason)</span><br><span class="line">    <span class="keyword">return</span> _id</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skipUnless</span><span class="params">(condition, reason)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Skip a test unless the condition is true.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> condition:</span><br><span class="line">        <span class="keyword">return</span> skip(reason)</span><br><span class="line">    <span class="keyword">return</span> _id</span><br></pre></td></tr></table></figure><p>不难看出，核心有两点：</p><ul><li>对于<code>skip</code>，只需要在该测试用例中<code>raise SkipTest(reason)</code>，而<code>SkipTest</code>是<code>unittest/case.py</code>中定义的一个异常类；</li><li>对于<code>skipIf</code>和<code>skipUnless</code>，相比于<code>skip</code>，主要是需要指定一个条件表达式（condition），然后根据该表达式的实际值来决定是否<code>skip</code>当前测试用例。</li></ul><p>明确了这两点之后，我们要如何在<code>HttpRunner</code>中实现同样的功能，思路应该就比较清晰了。</p><p>因为<code>HttpRunner</code>同样也是采用<code>unittest</code>来组织和驱动测试用例执行的，而具体的执行控制部分都是在<code>httprunner/runner.py</code>的<code>_run_test</code>方法中；同时，在<code>_run_test</code>方法中会传入<code>testcase_dict</code>，也就是具体测试用例的全部信息。</p><p>那么，最简单的做法，就是在<code>YAML/JSON</code>测试用例中，新增<code>skip/skipIf/skipUnless</code>参数，然后在<code>_run_test</code>方法中根据参数内容来决定是否执行<code>raise SkipTest(reason)</code>。</p><p>例如，在<code>YAML</code>测试用例中，我们可以按照如下形式新增<code>skip</code>字段，其中对应的值部分就是我们需要的<code>reason</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    skip:</span> <span class="string">"skip this test unconditionally"</span></span><br><span class="line"><span class="attr">    request:</span> <span class="string">&#123;...&#125;</span></span><br><span class="line"><span class="attr">    validate:</span> <span class="string">[...]</span></span><br></pre></td></tr></table></figure><p>接下来在<code>_run_test</code>方法，要处理就十分简单，只需要判断<code>testcase_dict</code>中是否包含<code>skip</code>字段，假如包含，则执行<code>raise SkipTest(reason)</code>即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_test</span><span class="params">(self, testcase_dict)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"skip"</span> <span class="keyword">in</span> testcase_dict:</span><br><span class="line">        skip_reason = testcase_dict[<span class="string">"skip"</span>]</span><br><span class="line">        <span class="keyword">raise</span> SkipTest(skip_reason)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>这对于<code>skip</code>机制来做，完全满足需求；但对于<code>skipIf/skipUnless</code>，可能就会麻烦些，因为我们的用例是在<code>YAML/JSON</code>文本格式的文件中，没法像在<code>unittest</code>中执行<code>condition</code>那样的Python表达式。</p><p>嗯？谁说在<code>YAML/JSON</code>中就不能执行函数表达式的？在<code>HttpRunner</code>中，我们已经实现了该功能，即：</p><ul><li>在<code>debugtalk.py</code>中定义函数，例如<code>func(a, b)</code></li><li>在<code>YAML/JSON</code>中通过<code>${func(a,b)}</code>对函数进行调用</li></ul><p>在此基础上，我们要实现<code>skipIf/skipUnless</code>就很简单了；很自然地，我们可以想到采用如下形式来进行描述。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">create</span> <span class="string">user</span> <span class="string">which</span> <span class="string">existed</span> <span class="string">(skip</span> <span class="string">if</span> <span class="string">condition)</span></span><br><span class="line"><span class="attr">    skipIf:</span> <span class="string">$&#123;skip_test_in_production_env()&#125;</span></span><br><span class="line"><span class="attr">    request:</span> <span class="string">&#123;...&#125;</span></span><br><span class="line"><span class="attr">    validate:</span> <span class="string">[...]</span></span><br></pre></td></tr></table></figure><p>其中，<code>skip_test_in_production_env</code>定义在<code>debugtalk.py</code>文件中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">skip_test_in_production_env</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">""" skip this test in production environment</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> os.environ[<span class="string">"TEST_ENV"</span>] == <span class="string">"PRODUCTION"</span></span><br></pre></td></tr></table></figure><p>然后，在<code>_run_test</code>方法中，我们只需要判断<code>testcase_dict</code>中是否包含<code>skipIf</code>字段，假如包含，则将其对应的函数表达式取出，运行得到其结果，最后再根据运算结果来判断是否执行<code>raise SkipTest(reason)</code>。对函数表达式进行解析的方法在<code>httprunner/context.py</code>的<code>exec_content_functions</code>函数中，具体实现方式可阅读之前的文章。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_test</span><span class="params">(self, testcase_dict)</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">"skip"</span> <span class="keyword">in</span> testcase_dict:</span><br><span class="line">        skip_reason = testcase_dict[<span class="string">"skip"</span>]</span><br><span class="line">        <span class="keyword">raise</span> SkipTest(skip_reason)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">"skipIf"</span> <span class="keyword">in</span> testcase_dict:</span><br><span class="line">        skip_if_condition = testcase_dict[<span class="string">"skipIf"</span>]</span><br><span class="line">        <span class="keyword">if</span> self.context.exec_content_functions(skip_if_condition):</span><br><span class="line">            skip_reason = <span class="string">"&#123;&#125; evaluate to True"</span>.format(skip_if_condition)</span><br><span class="line">            <span class="keyword">raise</span> SkipTest(skip_reason)</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><code>skipUnless</code>与<code>skipIf</code>类似，不再重复。</p><p>通过该种方式，我们就可以实现在不对测试用例文件做任何修改的情况下，通过外部方式（例如设定环境变量的值）就可以控制是否执行某些测试用例。</p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p><code>skip/skipIf/skipUnless</code>机制实现后，我们对测试用例的执行控制就更加灵活方便了。</p><p>例如，我们可以很容易地实现如下常见的测试场景：</p><ul><li>对测试用例进行分组，P0/P1/P2等，然后根据实际需求选择执行哪些用例</li><li>通过环境变量来控制是否执行某些用例</li></ul><p>更重要的是，我们无需对测试用例文件进行任何修改。</p><p>在<code>HttpRunner</code>项目中存在一个示例文件，<a href="https://github.com/HttpRunner/HttpRunner/blob/master/tests/data/demo_testset_cli.yml" target="_blank" rel="noopener"><code>httprunner/tests/data/demo_testset_cli.yml</code></a>，大家可以此作为参考。</p><p>在运行该测试集后，生成的测试报告如下所示。</p><p><img src="/images/httprunner-skip.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h2&gt;&lt;p&gt;近期，某位同学对&lt;code&gt;HttpRunner&lt;/code&gt;提了一个&lt;a href=&quot;https://github.com
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>我的 2017 年终总结</title>
    <link href="https://debugtalk.com/post/my-2017-summary/"/>
    <id>https://debugtalk.com/post/my-2017-summary/</id>
    <published>2017-12-30T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>2017年已经结束了，为了给以后的自己留点回忆，还是写篇博客记录下吧。</p><p>先从工作说起吧。这一年，我依然在大疆的互联网事业部做测试开发岗位。有点变化的是，年初是自己一个人做，然后逐步有新的伙伴加入，成立了测试开发小组，并担任了小组负责人。简单地说，就是除了纯技术，也开始兼具了一点技术管理的角色，这对于我个人也是一个挺大的转变。看过我个人博客自我介绍的同学都知道，“在墙角安静地写代码才是我的最爱”，所以我对于做管理是一直都挺抗拒的。不过，后来通过阅读一些互联网前辈的文章（主要有池建强老师、左耳朵耗子皓叔、硅谷女神安姐等），再加上leader的循序善诱，我的想法也发生了一些转变。我渐渐地也开始认同，技术管理与做好技术并不冲突，但发挥团队的力量，却可以做更大的事情，产生更大的价值。同时，担任技术管理也意味着多了一份责任，自己不能再由着个人喜好去摸索一些看似酷炫实则无用的“黑科技”，而应时刻关注技术转化的业务价值，这不管是对于公司还是个人，都是至关重要的。</p><p>在大疆除了测试开发工作，我还负责一些重要节点的性能压测工作。今年最大的一次压测应该就是准备5月24日的<a href="https://www.dji.com/products/spark?site=brandsite&from=nav" target="_blank" rel="noopener"><code>Spark</code></a>新品发布了。在这个项目中，我担任性能测试总负责人，负责PC商城、手机商城、官网、直播系统、支付中心等相关电商系统的整体性能测试工作。当然，那段时间加班也挺多的，以至于我后面出差到达纽约发布会现场都不用倒时差了。说到出差，感谢领导和同事的信任，让我去发布会现场做直播系统的技术支持，我也有机会第一次去到美国，这个我一直特别想去体验的国家。现在回想起来，当时也真是人品爆发，在办美国商务签证的时候很顺利地就通过了（可怜我的另两位同事，他们虽然都准备得非常充分，但后来去办签证的时候都进了审核）；另外，当时自己因为疏忽，忘了<code>eVUS</code>这么一个东西，结果去登机时才被告知必须要提前完成<code>eVUS</code>的登记审核，搞得我一脸懵逼，所幸当时立即提交申请后居然很快就审批通过了，不然差点就真错过了。</p><p>当时到纽约完成了新品发布会的工作后，考虑到机会难得，我也申请了两天的假期，在纽约市区（主要就是曼哈顿区）转了下，因为时间有限，去的也都是闻名已久的地标，例如时代广场、世贸中心、帝国大厦、中央公园、自然历史博物馆等，以及远距离看了下自由女神像的侧面。对于纽约，印象是极其深刻的，如果让我用一个词来概括，那就是“大城市”，虽然在国内去的地方也不少，意大利法国的首都也去旅游过，但到纽约后真的有种进城了的感觉。当时在返程的飞机上趁着兴奋劲，还写了篇记录文章，《纽约出差之城市印象》，写了近两千字还没有收尾，结果后来拖延证一犯就一直没发出来。除了逛纽约，当时也跟多年未见的同学聚了下。一个是高中同学，在纽约大学任教，在他的带领下我也逛了下纽约大学，可惜当时天气不是特别好，没能见到草地上满是穿着比基尼晒太阳的妹子，甚是遗憾。另一个是大学室友，本来是在波士顿工作的，结果也带着媳妇儿（同是大学校友）开车五六个小时到纽约聚了下。哦对，我们聚会都是吃的中餐厅。在异国他乡与多年未见的同学相聚，叙叙旧聊聊人生，感觉还是蛮不错的。</p><p>今年除了到美国纽约，我还到了其它几个国家地区。还是纽约出差那次，因为国内直达的航班机票价格太高，所以我选择了中转的方式；当时就从香港机场乘机，先飞到了韩国的首尔机场，然后再转机到纽约的肯尼迪机场。当时在韩国首尔机场停歇了四五个小时，虽然没有出机场，但是在机场里面逛的地方也挺多的，除了尝下韩国本土特色小吃外，还碰到了换班的空姐，一大波韩国空姐陆陆续续从眼前走过，场景甚是壮观。除了那次出差，在年初春节的时候，跟媳妇儿和朋友媳妇一起到意大利、法国旅行度蜜月，大概12天的自由行，游玩的城市有罗马、梵蒂冈、佛罗伦萨、米兰和巴黎。当时也是第一次出国，新鲜感蛮大的，还写了一篇游记，<a href="https://debugtalk.com/post/my-impression-on-italy-and-france/">《春节旅行之意法印象》</a>。</p><p>再说回技术方面。今年做了一个自己还算比较满意的开源项目，<a href="https://github.com/HttpRunner/HttpRunner" target="_blank" rel="noopener"><code>HttpRunner</code></a>（起初叫做<code>ApiTestEngine</code>），核心特色就是基于现有成熟的Python开源项目<a href="https://github.com/requests/requests" target="_blank" rel="noopener"><code>requests</code></a>和<a href="https://github.com/locustio/locust" target="_blank" rel="noopener"><code>Locust</code></a>，打造了一套<code>HTTP</code>测试框架，可以实现只需采用<code>YAML/JSON</code>格式维护一套脚本，就可同时实现自动化测试和性能测试。回顾今年的技术博客，有16篇文章都是围绕<code>HttpRunner</code>写的，<a href="https://debugtalk.com/tags/HttpRunner/">《HttpRunner 开发博客》</a>，可见自己在这上面投入的精力还是非常大的。值得欣慰的是，该框架产生的收效还不错，除了在大疆内部的多个项目中投入了使用，当前已知的有好几个其它公司的测试同学也都在使用这个框架。也源于开源，我在开发该框架的时候收到了非常多的反馈和建议，这对<code>HttpRunner</code>的持续优化迭代产生了非常巨大的帮助。从情感上讲，<code>HttpRunner</code>就如同自己的亲骨肉，里面融入了我自身非常多的对测试的思考，后续我也将继续不断优化<code>HttpRunner</code>，期望它能有朝一日在测试届大放异彩。</p><p>今年，我也在公司内外做过一些分享。一个是六月份的时候，当时公司新进了一批实习生，当时分配给我的任务是对我们质量部的岗位进行介绍，给实习生们讲解下我们测试工程师的工作日常情况。由于面向的都是新人，而且各种岗位的都有，因此也只能是科普介绍了。讲完后，我又整理下内容写了篇博客文章，<a href="https://debugtalk.com/post/introduction-to-testing-engineer-daily-work/">《【科普】互联网测试岗位的工作日常》</a>，阅读量居然还挺高。另一次分享是大疆与TesterHome合办的<a href="https://testerhome.com/topics/9755" target="_blank" rel="noopener">测试沙龙</a>，我作为其中一位分享者，演讲的主题也是围绕着<code>HttpRunner</code>，题目是《低成本实现系统接口测试 – 自动化、性能、持续集成&amp;线上监控》，从现场互动上来看，还是挺不错的。沙龙活动之后，<code>TOP100</code>的某位主编联系到我，希望我能在2017年第6届全球软件案例研究峰会上做了分享，当时想着也是个锻炼的机会，也就提交了案例，并且入了<a href="http://www.top100summit.com/think/12686" target="_blank" rel="noopener">榜单</a>；不过后来主办方的做法有些让人呵呵，在此我也不想多提了，总之最后我没去现场（虽然赠送给我一张全程票），后续应该也不会考虑与他们合作了。关于分享这块儿，比较遗憾的是错过了<code>TesterHome</code>的测试开发大会，五月份的时候思寒问我topic的时候，当时忙于公司的新品发布会没时间准备，就此错过了与诸多大佬见面的机会，只能看2018年是否还有机会了。</p><p>今年另一件比较有意思的事情，签订了一份图书出版合同。六月份的时候，电子工业出版社博文视点的一位编辑跟我联系，说看到我博客上的文章还不错，问我是否有兴趣出版图书。当时我既惊讶又惊喜，因为写书这事儿我之前从来没敢想过，所以一时心里也没底儿。好在陈编也给了我很多肯定和鼓励，同时我也想挑战一下自己，最后就答应了出版的事儿，并最终与博文视点签订了合同，书名暂定为《互联网系统测试精要：自动化、性能、持续集成》。合同签订后，我开始后悔自己太过乐观了，写书比我想象中难得多。因为写书只能是业余时间，有时工作太忙就完全顾不上了，等过一段时间再想提笔的时候发现手感灵感全没了。是的，别说是写书了，就是写博客，隔段时间不写再想捡起来也是异常痛苦。有过这段经历，我对书籍更多了一分敬畏，先不说书的内容质量，光是作者坚持下去的这份毅力，也是难能可贵的。还好出版社也没有给我压力，在这个过程中也给了我不少鼓励。当时签约的交稿日期是2017年12月中旬，但实际完成率嘛，嗯，希望我能在2018年尽早完成吧。</p><p>再说点生活上的事儿吧。今年我买了人生中的第一辆车，从此也算是有房有车了，虽然房子远在广州山区，车也不是啥好车。在买车之前，我基本对车完全不懂，可能除了奔驰宝马奥迪的车标能认出来外，其它一概不知。当时要去4S店看车之前，担心被销售看出啥也不懂的尴尬，还在汽车之家上好生科普了一番，总算对汽车有了点了解。然后就是一番小纠结，先是犹豫买SUV还是轿车，听闻20万以下的城市SUV也就那样后就决定买轿车；然后考虑轿车买A级还是B级，想到近几年也不会换车，还是一次性买个宽敞点的吧，就决定买B级车；然后就在几个品牌的B级车里选了，丰田凯美瑞、本田雅阁、雪佛兰迈锐宝、马自达阿特兹、别克君威都有看过，最后被马自达的信仰洗脑了，再加上阿特兹的颜值，从而就选定了阿特兹这款车，而且选的是骚气的魂动红，应该比较符合我闷骚的气质吧。另外，由于深圳和广州的车牌都需要摇号，拍卖价格又太高，所以就选择了在老家上牌，幸运的是选中的车牌还比较满意，<code>DBG256</code>，跟我个人的职业也比较搭。在车技这块儿，虽然我的驾照满六年都换过一次证了，但这些年摸车的确比较少，当时为了找手感，还提前在58同城上约了一个陪驾服务，师傅是一位号称有18年驾龄的资深美女。所幸经过一段时间的熟悉，现在车技已经好多了，至少刚开始时那些停车就不小心剐蹭到旁边的奔驰、上高速就手心冒汗这些心理障碍已经差不多没了。</p><p>2017年，一不小心就写了这么多。最后的压轴戏，当然是我刚出生的小坚果宝宝啦。刚当上爸爸，咋说呢，心情有些复杂，既兴奋又紧张。虽然是足月，而且还晚了两天才出生，但当第一次看到小家伙的时候，还是会感觉有些惊慌失措，从此我便多了一层父亲的身份，需要肩负更多的责任。还记得多年前曾和一位领导兼前辈聊人生，他跟我说工作并不是生活的全部，下班回家逗逗儿子也是挺有意思的。当时我还不能完全理解，现在我终于有了切身的体会，看着孩子的喜怒哀乐，陪伴的孩子的成长，本身就是一件非常幸福的事情。而我自身，也需要做好爸爸的榜样，言传身教还是很重要的。对于宝宝的未来，我也并没有太多期待，健康快乐地成长就好了，过两年再大点的时候，顺便再把Python学会了，嗯，徒手反转二叉树啥的技能也得学下。</p><p>最后按照惯例，再展望下即将来临的2018年吧。</p><p>1、坚持写作。博客公众号文章的更新频率得提升下，平均每月3~5篇还是要保证的。另外就是尽快把签约的书稿结了，不然就算出版社不催，我也不好意思了。</p><p>2、在工作上有更多的成长和产出。新的一年就迈入而立之年了，离“中年危机”也更近了一分，焦虑是没用的，踏踏实实快速成长吧。</p><p>3、学会生活，锻炼身体，陪伴家人，工作是长跑，讲究的是可持续发展。去年的展望也写了这句，但做的并不好，希望2018年能有所改善。</p><p>4、再借用下习主席的新年寄语，逢山开路，遇水搭桥，不管有啥困难，终将可以克服的。</p><h2 id="成长轨迹"><a href="#成长轨迹" class="headerlink" title="成长轨迹"></a>成长轨迹</h2><ul><li><a href="https://debugtalk.com/post/my-2016-summary/">《我的 2016 年终总结》</a></li><li>《我的 2015 年终总结》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2017年已经结束了，为了给以后的自己留点回忆，还是写篇博客记录下吧。&lt;/p&gt;
&lt;p&gt;先从工作说起吧。这一年，我依然在大疆的互联网事业部做测试开发岗位。有点变化的是，年初是自己一个人做，然后逐步有新的伙伴加入，成立了测试开发小组，并担任了小组负责人。简单地说，就是除了纯技术
      
    
    </summary>
    
      <category term="5. Growth" scheme="https://debugtalk.com/categories/5-Growth/"/>
    
      <category term="年终总结" scheme="https://debugtalk.com/categories/5-Growth/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="年终总结" scheme="https://debugtalk.com/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 的测试用例分层机制（已过期）</title>
    <link href="https://debugtalk.com/post/HttpRunner-testcase-layer/"/>
    <id>https://debugtalk.com/post/HttpRunner-testcase-layer/</id>
    <published>2017-12-22T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从版本 1.4 开始，测试用例分层机制已进行重新设计，本文内容不再适用。</p></blockquote><h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><p>在 <code>HttpRunner</code> 中，测试用例引擎最大的特色就是支持 <code>YAML/JSON</code> 格式的用例描述形式。</p><p>采用 <code>YAML/JSON</code> 格式编写维护测试用例，优势还是很明显的：</p><ul><li>相比于表格形式，具有更加强大的灵活性和更丰富的信息承载能力；</li><li>相比于代码形式，减少了不必要的编程语言语法重复，并最大化地统一了用例描述形式，提高了用例的可维护性。</li></ul><p>以最常见的登录注销为例，我们的测试用例通常会描述为如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo-login-logoff</span></span><br><span class="line"><span class="attr">    variable_binds:</span></span><br><span class="line"><span class="attr">        - UserName:</span> <span class="string">test001</span></span><br><span class="line"><span class="attr">        - Password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        base_url:</span> <span class="attr">http://xxx.debugtalk.com</span></span><br><span class="line"><span class="attr">        headers:</span></span><br><span class="line"><span class="attr">            Accept:</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">            User-Agent:</span> <span class="string">iOS/10.3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Login</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/api/v1/Account/Login</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">POST</span></span><br><span class="line"><span class="attr">        json:</span></span><br><span class="line"><span class="attr">            UserName:</span> <span class="string">$UserName</span></span><br><span class="line"><span class="attr">            Pwd:</span> <span class="string">$Password</span></span><br><span class="line"><span class="attr">            VerCode:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    validators:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.IsSuccess",</span> <span class="literal">True</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.Code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Logoff</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/api/v1/Account/LoginOff</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    validators:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.IsSuccess",</span> <span class="literal">True</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.Code",</span> <span class="number">200</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>相信大家已经对该种用例描述形式十分熟悉了。不过，该种描述形式的问题在于，接口通常会出现在多个测试场景中，而每次都需要对接口进行定义描述，包括请求的URL、Header、Body、以及预期响应值等，这就会产生大量的重复。</p><p>例如，在某个项目中存在三个测试场景：</p><ul><li>场景A：注册新账号（<code>API_1/2</code>）、登录新注册的账号（<code>API_3/4/5</code>）、查看登录状态（<code>API_6</code>）；</li><li>场景B：登录已有账号（<code>API_3/4/5</code>）、注销登录（<code>API_7/8</code>）；</li><li>场景C：注销登录（<code>API_7/8</code>）、查看登录状态（<code>API_6</code>）、注册新账号（<code>API_1/2</code>）。</li></ul><p>按照常规的接口测试用例编写方式，我们需要创建3个场景文件，然后在各个文件中分别描述三个测试场景相关的接口信息。示意图如下所示。</p><p><img src="/images/httprunner-testcase-layer-1.jpeg" alt></p><p>在本例中，接口（<code>API_1/2/6</code>）在场景A和场景C中都进行了定义；接口（<code>API_3/4/5</code>）在场景A和场景B中都进行了定义；接口（<code>API_7/8</code>）在场景B和场景C中都进行了定义。可以预见，当测试场景增多以后，接口定义描述的维护就会变得非常困难和繁琐。</p><h2 id="接口的分层定义描述"><a href="#接口的分层定义描述" class="headerlink" title="接口的分层定义描述"></a>接口的分层定义描述</h2><p>那要如何进行优化呢？</p><p>其实也很简单，在编程语言中，如果出现重复代码块，我们通常会将其封装为类或方法，然后在需要时进行调用，以此来消除重复。同样地，我们也可以将项目的API进行统一定义，里面包含API的请求和预期响应描述，然后在测试场景中进行引用即可。</p><p>示意图如下所示。</p><p><img src="/images/httprunner-testcase-layer-2.jpeg" alt></p><p>具体地，我们可以约定将项目的所有API接口定义放置在 <code>api</code> 目录下，并在 <code>api</code> 目录中按照项目的系统模块来组织接口的定义；同时，将测试场景放置到 <code>testcases</code> 目录中。</p><p>此时测试用例文件的目录结构如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">✗ tree tests</span><br><span class="line">tests</span><br><span class="line">├── api</span><br><span class="line">│   └── v1</span><br><span class="line">│       ├── Account.yml</span><br><span class="line">│       ├── BusinessTrip.yml</span><br><span class="line">│       ├── Common.yml</span><br><span class="line">│       └── Leave.yml</span><br><span class="line">├── debugtalk.py</span><br><span class="line">└── testcases</span><br><span class="line">    ├── scenario_A.yml</span><br><span class="line">    ├── scenario_B.yml</span><br><span class="line">    └── scenario_C.yml</span><br></pre></td></tr></table></figure><p>而对于API接口的定义，与之前的描述方式基本一致，只做了两点调整：</p><ul><li>接口定义块（<code>block</code>）的标识为 <code>api</code>；</li><li>接口定义块中包含 <code>def</code> 字段，形式为 <code>api_name(*args)</code> ，作为接口的唯一标识ID；需要注意的是，即使 <code>api</code> 没有参数，也需要带上括号，<code>api_name()</code>；这和编程语言中定义函数是一样的。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- api:</span></span><br><span class="line"><span class="attr">    def:</span> <span class="string">api_v1_Account_Login_POST($UserName,</span> <span class="string">$Password)</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/api/v1/Account/Login</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">POST</span></span><br><span class="line"><span class="attr">        json:</span></span><br><span class="line"><span class="attr">            UserName:</span> <span class="string">$UserName</span></span><br><span class="line"><span class="attr">            Pwd:</span> <span class="string">$Password</span></span><br><span class="line"><span class="attr">            VerCode:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    validators:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.IsSuccess",</span> <span class="literal">True</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.Code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- api:</span></span><br><span class="line"><span class="attr">    def:</span> <span class="string">api_v1_Account_LoginOff_GET()</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="string">/api/v1/Account/LoginOff</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    validators:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="number">200</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.IsSuccess",</span> <span class="literal">True</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["content.Code",</span> <span class="number">200</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>有了接口的定义描述后，我们编写测试场景时就可以直接引用接口定义了。</p><p>同样是背景描述中的登录注销场景，测试用例就描述为变为如下形式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- config:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">demo</span></span><br><span class="line"><span class="attr">    variable_binds:</span></span><br><span class="line"><span class="attr">        - UserName:</span> <span class="string">test001</span></span><br><span class="line"><span class="attr">        - Password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        base_url:</span> <span class="attr">http://xxx.debugtalk.com</span></span><br><span class="line"><span class="attr">        headers:</span></span><br><span class="line"><span class="attr">            Accept:</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">            User-Agent:</span> <span class="string">iOS/10.3</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Login</span></span><br><span class="line"><span class="attr">    api:</span> <span class="string">api_v1_Account_Login_POST($UserName,</span> <span class="string">$Password)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">Logoff</span></span><br><span class="line"><span class="attr">    api:</span> <span class="string">api_v1_Account_LoginOff_GET()</span></span><br></pre></td></tr></table></figure><p>不难看出，对API接口进行分层定义后，我们在测试用例场景中引用接口定义时，与编程语言里面调用函数的形式基本完全一样，只需要指定接口的名称，以及所需传递的参数值；同样的，即使没有参数，也需要带上括号。</p><p>实现接口的分层定义描述后，我们就可以避免接口的重复定义。但是，我们回过头来看之前的案例，发现仍然会存在一定的重复。</p><p><img src="/images/httprunner-testcase-layer-3.jpeg" alt></p><p>如上图所示，场景A和场景C都包含了注册新账号（<code>API_1/2</code>）和查看登录状态（<code>API_6</code>），场景A和场景B都包含了登录已有账号（<code>API_3/4/5</code>），场景B和场景C都包含了注销登录（<code>API_7/8</code>）。</p><p>虽然我们已经将接口的定义描述抽离出来，避免了重复的定义；但是在实际业务场景中，某些功能（例如登录、注销）会在多个场景中重复出现，而该功能又涉及到多个接口的组合调用，这同样也会出现大量的重复。</p><h2 id="接口的模块化封装"><a href="#接口的模块化封装" class="headerlink" title="接口的模块化封装"></a>接口的模块化封装</h2><p>玩过积木的同学可能就会想到，我们也可以将系统的常用功能封装为模块（suite），只需要在模块中定义一次，然后就可以在测试场景中重复进行引用，从而避免了模块功能的重复描述。</p><p><img src="/images/httprunner-testcase-layer-4.jpeg" alt></p><p>具体地，我们可以约定将项目的所有模块定义放置在 <code>suite</code> 目录下，并在 <code>suite</code> 目录中按照项目的功能来组织模块的定义。</p><p>后续，我们在 <code>testcases</code> 目录中描述测试场景时，就可同时引用接口定义和模块定义了；模块和接口的混合调用，必将为我们编写测试场景带来极大的灵活性。</p><p>此时测试用例文件的目录结构如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">✗ tree tests</span><br><span class="line">tests</span><br><span class="line">├── api</span><br><span class="line">│   └── v1</span><br><span class="line">│       ├── Account.yml</span><br><span class="line">│       ├── BusinessTrip.yml</span><br><span class="line">│       ├── Common.yml</span><br><span class="line">│       └── Leave.yml</span><br><span class="line">├── debugtalk.py</span><br><span class="line">├── suite</span><br><span class="line">│   ├── BusinessTravelApplication</span><br><span class="line">│   │   ├── approve-application.yml</span><br><span class="line">│   │   ├── executive-application.yml</span><br><span class="line">│   │   ├── reject-application.yml</span><br><span class="line">│   │   └── submit-application.yml</span><br><span class="line">│   └── LeaveApplication</span><br><span class="line">│       ├── approve.yml</span><br><span class="line">│       ├── cancel.yml</span><br><span class="line">│       └── submit-application.yml</span><br><span class="line">└── testcases</span><br><span class="line">    ├── scenario_A.yml</span><br><span class="line">    ├── scenario_B.yml</span><br><span class="line">    └── scenario_C.yml</span><br></pre></td></tr></table></figure><p>需要注意的是，我们在组织测试用例描述的文件目录结构时，遵循约定大于配置的原则：</p><ul><li>API接口定义必须放置在 <code>api</code> 目录下</li><li>模块定义必须放置在 <code>suite</code> 目录下</li><li>测试场景文件必须放置在 <code>testcases</code> 目录下</li><li>相关的函数定义放置在 <code>debugtalk.py</code> 中</li></ul><p>至此，我们实现了测试用例的 <code>接口-模块-场景</code> 分层，从而彻底避免了重复定义描述。</p><h2 id="脚手架工具"><a href="#脚手架工具" class="headerlink" title="脚手架工具"></a>脚手架工具</h2><p>得益于约定大于配置的原则，在 <code>HttpRunner</code> 中实现了一个脚手架工具，可以快速创建项目的目录结构。该想法来源于 <code>Django</code> 的 <code>django-admin.py startproject project_name</code>。</p><p>使用方式也与 <code>Django</code> 类似，只需要通过 <code>--startproject</code> 指定新项目的名称即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ hrun --startproject helloworld</span><br><span class="line">INFO:root: Start to create new project: /Users/Leo/MyProjects/helloworld</span><br><span class="line">INFO:root:      created folder: /Users/Leo/MyProjects/helloworld</span><br><span class="line">INFO:root:      created folder: /Users/Leo/MyProjects/helloworld/tests</span><br><span class="line">INFO:root:      created folder: /Users/Leo/MyProjects/helloworld/tests/api</span><br><span class="line">INFO:root:      created folder: /Users/Leo/MyProjects/helloworld/tests/suite</span><br><span class="line">INFO:root:      created folder: /Users/Leo/MyProjects/helloworld/tests/testcases</span><br><span class="line">INFO:root:      created file: /Users/Leo/MyProjects/helloworld/tests/debugtalk.py</span><br></pre></td></tr></table></figure><p>运行之后，就会在指定的目录中生成新项目的目录结构，接下来，我们就可以按照测试用例的 <code>接口-模块-场景</code> 分层原则往里面添加用例描述信息了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果看到这里你还不明白测试用例分层的必要性，那也没关系，测试用例分层不是必须的，你还是可以按照之前的方式组织测试用例。不过当你某一天发现需要进行分层管理时，你会发现它就在那里，很实用。</p><p>最后，在 <code>HttpRunner</code> 项目的 <a href="https://github.com/HttpRunner/HttpRunner/tree/master/examples/HelloWorld" target="_blank" rel="noopener"><code>examples/HelloWorld</code></a> 目录中，包含了一份完整的分层测试用例示例，相信会对大家有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;从版本 1.4 开始，测试用例分层机制已进行重新设计，本文内容不再适用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背景描述&quot;&gt;&lt;a href=&quot;#背景描述&quot; class=&quot;headerlink&quot; title=&quot;背景描述&quot;&gt;&lt;/a&gt;背景描
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 的结果校验器优化</title>
    <link href="https://debugtalk.com/post/HttpRunner-validator-optimization/"/>
    <id>https://debugtalk.com/post/HttpRunner-validator-optimization/</id>
    <published>2017-12-12T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在测试用例中，包含预期结果这么一项，用于辅助测试人员执行测试用例时判断系统的功能是否正常。而在自动化测试中，我们的目标是让测试用例自动执行，因此自动化测试用例中同样需要包含预期结果一项，只不过系统响应结果不再由人工来进行判断，而是交由测试工具或框架来实现。</p><p>这部分功能对应的就是测试结果校验器（validator），基本上能称得上自动化测试工具或框架的都包含该功能特性。</p><h2 id="设计之初"><a href="#设计之初" class="headerlink" title="设计之初"></a>设计之初</h2><p><code>HttpRunner</code>在设计之初，结果校验器（validator）的实现比较简单。</p><p>对于每一个<code>test</code>，可以指定0个或多个校验项，放置在<code>validate</code>中。在自动化测试执行的时候，会在发起HTTP请求、解析结果响应之后，逐个检查各个校验项，若存在任意校验项不通过的情况，则该<code>test</code>将终止并被标记为失败。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    extract:</span></span><br><span class="line"><span class="attr">        - token:</span> <span class="string">content.token</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"status_code"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="number">200</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"content.token"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"len_eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="number">16</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>如上例所示，每一个校验项均为一个<code>json</code>结构，里面包含<code>check</code>、<code>expect</code>、<code>comparator</code>三个属性字段。其中，<code>check</code>对应着要检查的字段，<code>expect</code>对应着检查字段预期的值，这两项是必须指定的；<code>comparator</code>字段对应着比较方法，若不指定，则默认采用<code>eq</code>，即检查字段与预期值相等。</p><p>为了实现尽可能强大的检查功能，<code>check</code>属性值可通过链式操作精确指定具体的字段，<code>comparator</code>也内置实现了大量的检查功能。</p><p>举个例子可能会更清晰些。假如某结构的响应结果如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// status code: 200</span><br><span class="line"></span><br><span class="line">// response headers</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"Content-Type"</span>: <span class="string">"application/json"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// response body content</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"success"</span>: False,</span><br><span class="line">   <span class="attr">"person"</span>: &#123;</span><br><span class="line">       <span class="attr">"name"</span>: &#123;</span><br><span class="line">           <span class="attr">"first_name"</span>: <span class="string">"Leo"</span>,</span><br><span class="line">           <span class="attr">"last_name"</span>: <span class="string">"Lee"</span>,</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">"age"</span>: <span class="number">29</span>,</span><br><span class="line">       <span class="attr">"cities"</span>: [<span class="string">"Guangzhou"</span>, <span class="string">"Shenzhen"</span>]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么假如我们要检查<code>status code</code>，<code>check</code>就可以指定为<code>status_code</code>；假如要检查<code>response headers</code>中的<code>Content-Type</code>，<code>check</code>就可以指定为<code>headers.content-type</code>；假如要检查<code>response body</code>中的<code>first_name</code>，<code>check</code>就可以指定为<code>content.person.name.first_name</code>。可以看出，假如下一层级为字典结构，那么就可以通过<code>.</code>运算符指定下一层级的<code>key</code>，依次类推。</p><p>对于字段内容为列表<code>list</code>的情况略有不同，我们需要通过序号来指定具体检查哪一项内容。例如，<code>Guangzhou</code>对应的检查项为<code>content.person.cities.0</code>，<code>Shenzhen</code>对应的检查项为<code>content.person.cities.1</code>。</p><p>在比较方式（<code>comparator</code>）方面，<code>HttpRunner</code>除了<code>eq</code>，还内置了大量的检查方法。例如，我们可以通过<code>gt</code>、<code>ge</code>、<code>lt</code>、<code>le</code>等比较数值大小，通过<code>len_eq</code>、<code>len_gt</code>、<code>len_lt</code>等比较长度是否相等（列表、字典、字符串均适用），通过<code>contains</code>、<code>contained_by</code>来判断包含关系，通过<code>startswith</code>、<code>endswith</code>判断字符串的开头结尾，甚至通过<code>regex_match</code>来判断是否满足正则匹配等。详细的比较方式还有许多，需要时可查看<a href="http://httprunner.readthedocs.io/en/latest/write-testcases.html#comparator" target="_blank" rel="noopener">comparator</a>表格。</p><h2 id="存在的局限性"><a href="#存在的局限性" class="headerlink" title="存在的局限性"></a>存在的局限性</h2><p>在大多数情况下，<code>HttpRunner</code>的结果校验器（validator）是够用的。不过问题在于，框架不可能为用户实现所有的检查方法，假如用户需要某些特殊的检查方法时，<code>HttpRunner</code>就没法实现了。</p><p>这的确是一个问题，之前<code>Junho2010</code>提的issue <a href="https://github.com/HttpRunner/HttpRunner/issues/29" target="_blank" rel="noopener">#29</a>中举了一个例子，应该也算是比较有代表性。</p><blockquote><p>发送请求时的数据使用了随机生成，然后需要比较结果中的数据是否是和这个相关（通过某个算法转换）。比如我输入的是321，我的结果是<code>(3+2+1) * avg(3+2+1)</code>这种转化，目前的comparator是比较难于实现的。</p></blockquote><p>要解决这个问题，最好的方式应该是在<code>HttpRunner</code>中实现自定义结果校验器的机制；用户在有需要的时候，可以自己编写校验函数，然后在<code>validate</code>中引用校验函数。之前也介绍过<code>HttpRunner</code>的热加载机制，<a href="https://debugtalk.com/post/apitestengine-hot-plugin/">《约定大于配置：ApiTestEngine实现热加载机制》</a>，自定义结果校验器应该也是可以采用这种方式来实现的。</p><p>第二个需要优化的点，<code>HttpRunner</code>的结果校验器还不支持变量引用，会造成某些场景下的局限性。例如，<code>testwangchao</code>曾提过一个issue <a href="https://github.com/HttpRunner/HttpRunner/issues/52" target="_blank" rel="noopener">#52</a>：</p><blockquote><p>接口response内，会返回数据库内的自增ID。ID校验的时候，希望<code>expected</code>为参数化的值。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">validate:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;"check":</span> <span class="string">"content.data.table_list.0.id"</span><span class="string">,</span> <span class="string">"expected"</span><span class="string">:</span> <span class="string">"$id"</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>另外，在<a href="https://debugtalk.com/post/apitestengine-not-only-about-json-api/">《ApiTestEngine，不再局限于API的测试》</a>一文中有介绍过，结果提取器（<code>extract</code>）新增实现了通过正则表达式对任意文本响应内容的字段提取。考虑到结果校验器（<code>validate</code>）也需要先从结果响应中提取出特定字段才能与预期值进行比较，在具体实现上完全可以复用同一部分代码，因此在<code>validate</code>的<code>check</code>部分也可以进行统一化处理。</p><p>经过前面的局限性问题描述，我们的改造目标也明确了，主要有三个方面：</p><ul><li>新增支持自定义结果校验器</li><li>结果校验器中实现变量引用</li><li>结果校验内容新增支持正则表达式提取</li></ul><h2 id="改造结果"><a href="#改造结果" class="headerlink" title="改造结果"></a>改造结果</h2><p>具体的改造过程就不写了，有兴趣的同学可以直接阅读源码，重点查看<a href="https://github.com/HttpRunner/HttpRunner/blob/master/httprunner/context.py" target="_blank" rel="noopener"><code>httprunner/context.py</code></a>中的<code>parse_validator</code>、<code>do_validation</code>和<code>validate</code>三个函数。</p><p>经过优化后，改造目标中的三项功能都实现了。为了更好地展现改造后的结果校验器，此处将结合实例进行演示。</p><h3 id="新增支持自定义结果校验器"><a href="#新增支持自定义结果校验器" class="headerlink" title="新增支持自定义结果校验器"></a>新增支持自定义结果校验器</h3><p>先来看第一个优化项，新增支持自定义结果校验器。</p><p>假设我们需要使用HTTP响应状态码各个数字的和来进行校验，例如，<code>201</code>状态码对应的数字和为3，<code>503</code>状态码对应的数字和为8。该实例只是为了演示用，实际上并不会用到这样的校验方式。</p><p>首先，该种校验方式在<code>HttpRunner</code>中并没有内置，因此需要我们自己来实现。实现方式与热加载机制相同，只需要将自定义的校验函数放置到当前<code>YAML/JSON</code>文件同级或者父级目录的<code>debugtalk.py</code>中。</p><p>对于自定义的校验函数，需要遵循三个规则：</p><ul><li>自定义校验函数需放置到<code>debugtalk.py</code>中</li><li>参数有两个：第一个为原始数据，第二个为原始数据经过运算后得到的预期结果值</li><li>在校验函数中通过<code>assert</code>将实际运算结果与预期结果值进行比较</li></ul><p>对于前面提到的演示案例，我们就可以在<code>debugtalk.py</code>中编写如下校验函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_status_code</span><span class="params">(status_code, expect_sum)</span>:</span></span><br><span class="line">    <span class="string">""" sum status code digits</span></span><br><span class="line"><span class="string">        e.g. 400 =&gt; 4, 201 =&gt; 3</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    sum_value = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> str(status_code):</span><br><span class="line">        sum_value += int(digit)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> sum_value == expect_sum</span><br></pre></td></tr></table></figure><p>然后，在<code>YAML/JSON</code>格式测试用例的<code>validate</code>中，我们就可以将校验函数名称<code>sum_status_code</code>作为<code>comparator</code>进行使用了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"status_code"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="number">200</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"status_code"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"sum_status_code"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="number">2</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>由此可见，自定义的校验函数<code>sum_status_code</code>与<code>HttpRunner</code>内置的校验方法<code>eq</code>在使用方式上完全相同，应该没有理解上的难度。</p><h3 id="结果校验器中实现变量引用"><a href="#结果校验器中实现变量引用" class="headerlink" title="结果校验器中实现变量引用"></a>结果校验器中实现变量引用</h3><p>对于第二个优化项，结果校验器中实现变量引用。在使用方式上我们应该与<code>request</code>中的变量引用一致，即通过<code>$var</code>的方式来引用变量<code>var</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    variables:</span></span><br><span class="line"><span class="attr">        - expect_status_code:</span> <span class="number">200</span></span><br><span class="line"><span class="attr">        - token_len:</span> <span class="number">16</span></span><br><span class="line"><span class="attr">    extract:</span></span><br><span class="line"><span class="attr">        - token:</span> <span class="string">content.token</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"status_code"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="string">"$expect_status_code"</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"content.token"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"len_eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="string">"$token_len"</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"$token"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"len_eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="string">"$token_len"</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>通过以上示例可以看出，在结果校验器<code>validate</code>中，<code>check</code>和<code>expect</code>均可实现实现变量的引用；而引用的变量，可以来自四种类型：</p><ul><li>当前<code>test</code>中定义的<code>variables</code>，例如<code>expect_status_code</code></li><li>当前<code>test</code>中提取（<code>extract</code>）的结果变量，例如<code>token</code></li><li>当前测试用例集<code>testset</code>中，先前<code>test</code>中提取（<code>extract</code>）的结果变量</li><li>当前测试用例集<code>testset</code>中，全局配置<code>config</code>中定义的变量</li></ul><p>而<code>check</code>字段除了可以引用变量，以及保留了之前的链式操作定位字段（例如上例中的<code>content.token</code>）外，还新增了采用正则表达式提取内容的方式，也就是第三个优化项。</p><h3 id="结果校验内容新增支持正则表达式提取"><a href="#结果校验内容新增支持正则表达式提取" class="headerlink" title="结果校验内容新增支持正则表达式提取"></a>结果校验内容新增支持正则表达式提取</h3><p>假设如下接口的响应结果内容为<code>LB123abcRB789</code>，那么要提取出<code>abc</code>部分进行校验，就可以采用如下描述方式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">&#123;"check":</span> <span class="string">"LB123(.*)RB789"</span><span class="string">,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">"eq"</span><span class="string">,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="string">"abc"</span><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>可见在使用方式上与在结果提取器（<code>extract</code>）中完全相同。</p><h3 id="结果校验器的进一步简化"><a href="#结果校验器的进一步简化" class="headerlink" title="结果校验器的进一步简化"></a>结果校验器的进一步简化</h3><p>最后，为了进一步简化结果校验的描述，我在<code>validate</code>中新增实现了一种描述方式。</p><p>简化后的描述方式与原始方式对比如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">validate:</span></span><br><span class="line"><span class="attr">    - comparator_name:</span> <span class="string">[check_item,</span> <span class="string">expect_value]</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">&#123;"check":</span> <span class="string">check_item,</span> <span class="string">"comparator"</span><span class="string">:</span> <span class="string">comparator_name,</span> <span class="string">"expect"</span><span class="string">:</span> <span class="string">expect_value&#125;</span></span><br></pre></td></tr></table></figure><p>同样是前面的例子，采用新的描述方式后会更加简洁。而两种方式表达的含义是完全等价的。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">- test:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">get</span> <span class="string">token</span></span><br><span class="line"><span class="attr">    request:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">http://127.0.0.1:5000/api/get-token</span></span><br><span class="line"><span class="attr">        method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">    validate:</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["status_code",</span> <span class="string">$expect_status_code]</span></span><br><span class="line"><span class="attr">        - sum_status_code:</span> <span class="string">["status_code",</span> <span class="number">2</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - len_eq:</span> <span class="string">["$token",</span> <span class="string">$token_len]</span></span><br><span class="line"><span class="attr">        - len_eq:</span> <span class="string">["content.token",</span> <span class="number">16</span><span class="string">]</span></span><br><span class="line"><span class="attr">        - eq:</span> <span class="string">["LB123(.*)RB789",</span> <span class="string">"abc"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><p>当然，此次优化保证了与历史版本的兼容，之前编写的测试用例脚本的运行是完全不会受到任何影响的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在测试用例中，包含预期结果这么一项，用于辅助测试人员执行测试用例时判断系统的功能是否正常。而在自动化测试中，我们的目标是让测试用例自动执行，因此自动化测试用例中同样需要包含预期结果一项，只不过系统响应结果不再由人工来进行判断，而是交由测试工具或框架来实现。&lt;/p&gt;
&lt;p&gt;这
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
  </entry>
  
  <entry>
    <title>HttpRunner 支持 HAR 意味着什么？</title>
    <link href="https://debugtalk.com/post/HttpRunner-supports-HAR/"/>
    <id>https://debugtalk.com/post/HttpRunner-supports-HAR/</id>
    <published>2017-11-13T16:00:00.000Z</published>
    <updated>2019-07-06T08:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>HttpRunner</code>开始支持<code>HAR</code>啦！！！</p><p>如果你还没有体会到这三个感叹号的含义，那们你可能对<code>HAR</code>还不了解。</p><h2 id="HAR-是什么？"><a href="#HAR-是什么？" class="headerlink" title="HAR 是什么？"></a>HAR 是什么？</h2><p><code>HAR</code>的全称为<code>HTTP Archive</code>，是<a href="https://www.w3.org/" target="_blank" rel="noopener"><code>W3C(World Wide Web Consortium)</code></a>发布的一个通用标准。简单地说，<code>HAR</code>是一个约定的<code>JSON</code>文件格式，用于记录<code>HTTP</code>请求交互的所有内容，包括请求响应的详细记录和性能度量数据。</p><p>虽然当前<code>HAR</code>标准还处于<code>Draft</code>状态，但它已经被业界广泛地采用了，许多我们日常使用的工具都已支持<code>HAR</code>。在下面罗列的工具中，相信大家都已经比较熟悉了。</p><ul><li>Fiddler</li><li>Charles Web Proxy</li><li>Google Chrome</li><li>Firebug</li><li>HttpWatch</li><li>Firefox</li><li>Internet Explorer 9</li><li>Microsoft Edge</li><li>Paw</li><li>Restlet Client</li></ul><p>可以看出，工具覆盖了主流的抓包工具、浏览器和接口测试工具。这些工具都支持<code>HAR</code>标准，可以将录制得到的数据包导出为<code>.har</code>的文件。</p><p>假如我们可以将<code>HAR</code>格式转换为<code>HttpRunner</code>的自动化测试用例，这就相当于<code>HttpRunner</code>可以和非常多的工具结合使用，并获得了接口录制和用例生成功能，灵活性和易用性都将得到极大的提升。</p><p>那么，将<code>HAR</code>格式转换为<code>HttpRunner</code>的自动化测试用例是否可行呢？</p><p>我们不妨先研究下<code>HAR</code>的格式。</p><h2 id="HAR-格式详解"><a href="#HAR-格式详解" class="headerlink" title="HAR 格式详解"></a>HAR 格式详解</h2><p>通过如上列出的任意一款工具，都可以将录制得到的数据包导出为<code>.har</code>的文件。我们采用文本编辑器打开<code>.har</code>文件后，会发现是一个<code>JSON</code>的数据结构。</p><p>默认情况下，<code>.har</code>文件的<code>JSON</code>数据结构是经过压缩的，直接看可能不够直观。推荐大家可以在文本编辑器中安装<code>Prettify JSON</code>的插件，然后就可以将压缩后的<code>JSON</code>数据一键转换为美观的格式。</p><p>更好的方式是，我们可以直接查看<code>W3C</code>编写的<a href="https://dvcs.w3.org/hg/webperf/raw-file/tip/specs/HAR/Overview.html" target="_blank" rel="noopener"><code>HAR</code>格式标准</a>。</p><p>通过文档可知，<code>HAR</code>是只有一个key的<code>JSON</code>数据结构，并且key值只能为<code>log</code>；而<code>log</code>的值也为一个<code>JSON</code>结构，里面的key包括：<code>version</code>、<code>creator</code>、<code>browser</code>、<code>pages</code>、<code>entries</code>、<code>comment</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"log"</span>: &#123;</span><br><span class="line">        <span class="attr">"version"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"creator"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"browser"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"pages"</span>: [],</span><br><span class="line">        <span class="attr">"entries"</span>: [],</span><br><span class="line">        <span class="attr">"comment"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>version</code>、<code>creator</code>和<code>entries</code>是必有字段，不管是哪款工具导出的<code>.har</code>文件，肯定都会包含这三个字段。而我们在转换生成自动化测试用例时，只需获取HTTP请求和响应的内容，这些全都包含在<code>entries</code>里面，因此我们只需要关注<code>entries</code>的内容即可。</p><p><code>entries</code>字段对应的值为一个列表型数据结构，里面的值按照请求时间进行排序，罗列出各个HTTP请求的详细内容。具体地，HTTP请求记录的信息如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">"entries": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"pageref"</span>: <span class="string">"page_0"</span>,</span><br><span class="line">        <span class="attr">"startedDateTime"</span>: <span class="string">"2009-04-16T12:07:23.596Z"</span>,</span><br><span class="line">        <span class="attr">"time"</span>: <span class="number">50</span>,</span><br><span class="line">        "request": &#123;...&#125;,</span><br><span class="line">        "response": &#123;...&#125;,</span><br><span class="line">        "cache": &#123;...&#125;,</span><br><span class="line">        "timings": &#123;&#125;,</span><br><span class="line">        "serverIPAddress": "10.0.0.1",</span><br><span class="line">        "connection": "52492",</span><br><span class="line">        "comment": ""</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>由此可见，记录的HTTP信息非常全面，包含了HTTP请求交互过程中的所有内容。</p><p>而从生成自动化测试用例的角度来看，我们并不需要那么多信息，我们只需从中提取关键信息即可。</p><p>编写自动化测试用例，最关键的信息是要知道接口的请求URL、请求方法、请求headers、请求数据等，这些都包含在<code>request</code>字段对应的字典中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"request": &#123;</span><br><span class="line">    "method": "GET",</span><br><span class="line">    "url": "http://www.example.com/path/?param=value",</span><br><span class="line">    "httpVersion": "HTTP/1.1",</span><br><span class="line">    "cookies": [],</span><br><span class="line">    "headers": [],</span><br><span class="line">    "queryString" : [],</span><br><span class="line">    "postData" : &#123;&#125;,</span><br><span class="line">    "headersSize" : 150,</span><br><span class="line">    "bodySize" : 0,</span><br><span class="line">    "comment" : ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据这些信息，我们就可以完成HTTP请求的构造。</p><p>当请求发送出去后，我们要想实现自动化地判断接口响应是否正确，我们还需要设置一些断言。而与HTTP响应相关的所有信息全都包含在<code>response</code>字段对应的字典中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"response": &#123;</span><br><span class="line">    "status": 200,</span><br><span class="line">    "statusText": "OK",</span><br><span class="line">    "httpVersion": "HTTP/1.1",</span><br><span class="line">    "cookies": [],</span><br><span class="line">    "headers": [],</span><br><span class="line">    "content": &#123;&#125;,</span><br><span class="line">    "redirectURL": "",</span><br><span class="line">    "headersSize" : 160,</span><br><span class="line">    "bodySize" : 850,</span><br><span class="line">    "comment" : ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从通用性的角度考虑，我们会判断HTTP响应的状态码是否正确，这对应着<code>status</code>字段；如果我们还想在接口业务层面具有更多的判断，我们还会判断响应内容中的一些关键字段是否符合预期，这对应着<code>content</code>字段。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"content": &#123;</span><br><span class="line">    "size": 33,</span><br><span class="line">    "compression": 0,</span><br><span class="line">    "mimeType": "text/html; charset=utf-8",</span><br><span class="line">    "text": "\n",</span><br><span class="line">    "comment": ""</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>content</code>字段，可能会稍微复杂一些，因为接口响应内容的格式可能多种多样。</p><p>例如，响应内容可能<code>text/html</code>页面的形式，也可能是<code>application/json</code>的形式，具体类型可以查看<code>mimeType</code>得到，而具体的内容存储在<code>text</code>字段中。</p><p>另外，有时候响应数据还可能是经过编码的，用的最多的编码方式为<code>base64</code>。我们可以根据<code>encoding</code>字段获取得到具体的编码形式，然后采用对应的解码方式对<code>text</code>进行解码，最终获得原始的响应内容。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"content": &#123;</span><br><span class="line">    "size": 63,</span><br><span class="line">    "mimeType": "application/json; charset=utf-8",</span><br><span class="line">    "text": "eyJJc1N1Y2Nlc3MiOnRydWUsIkNvZGUiOjIwMCwiVmFsdWUiOnsiQmxuUmVzdWx0Ijp0cnVlfX0=",</span><br><span class="line">    "encoding": "base64"</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>以上面的<code>content</code>为例，我们通过<code>encoding</code>查看到编码形式为<code>base64</code>，并通过<code>text</code>字段获取到编码后的内容；那么我们就可以采用<code>base64</code>的解码函数，转换得到原始的内容。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b64decode(text)</span><br><span class="line">b<span class="string">'&#123;"IsSuccess":true,"Code":200,"Value":&#123;"BlnResult":true&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>同时，我们根据<code>mimeType</code>可以得到响应内容<code>application/json</code>数据类型，那么就可以对其再进行<code>json.loads</code>操作，最终得到可供程序处理的<code>JSON</code>数据结构。</p><p>通过上述对<code>HAR</code>格式的详细介绍，可以看出<code>HAR</code>格式十分清晰，在对其充分了解的基础上，再编写测试用例转换工具就很简单了。</p><h2 id="har2case"><a href="#har2case" class="headerlink" title="har2case"></a>har2case</h2><p>编码过程没有太多值得说的，直接看最终成品吧。</p><p>最终产出的工具就是<a href="https://github.com/HttpRunner/har2case" target="_blank" rel="noopener"><code>har2case</code></a>，是一个命令行工具，可以直接将<code>.har</code>文件转换为<code>YAML</code>或<code>JSON</code>格式的自动化测试用例。</p><p>当前<code>har2case</code>已经上传到<code>PYPI</code>上了，通过<code>pip</code>或<code>easy_install</code>即可安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip install har2case</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ easy_install har2case</span><br></pre></td></tr></table></figure><p>使用方式很简单，只需在<code>har2case</code>命令后分别带上<code>HAR</code>源文件路径和目标生成的<code>YAML/JSON</code>路径即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ har2case tests/data/demo.har demo.yml</span><br><span class="line">INFO:root:Generate YAML testset successfully: demo.yml</span><br><span class="line"></span><br><span class="line">$ har2case tests/data/demo.har demo.json</span><br><span class="line">INFO:root:Generate JSON testset successfully: demo.json</span><br></pre></td></tr></table></figure><p>可以看出，具体是生成<code>YAML</code>还是<code>JSON</code>格式的问题，取决于指定目标文件的后缀：后缀为<code>.yml</code>或<code>.yaml</code>则生成<code>YAML</code>文件，后缀为<code>.json</code>则生成<code>JSON</code>文件。</p><p>如果不指定目标文件也行，则会默认生成<code>JSON</code>文件，文件名称和路径与<code>.har</code>源文件相同。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ har2case tests/data/demo.har</span><br><span class="line">INFO:root:Generate JSON testset successfully: tests/data/demo.json</span><br></pre></td></tr></table></figure><p>具体的使用方式可以通过执行<code>har2case -h</code>查看。</p><p>在大多数情况下，生成的用例可直接在<code>HttpRunner</code>中使用，当然，是做接口自动化测试、接口性能测试，还是持续集成线上监控，这都取决于你。</p><p>不过，假如录制的场景中包含动态关联的情况，即后续接口请求参数依赖于前面接口的响应，并且每次调用接口时参数都会动态变化，那么就需要人工再对生成的脚本进行关联处理，甚至包括编写一些自定义函数等。</p><h2 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h2><p>读到这里，相信大家应该能体会到文章开头那三个感叹号的含义了，我也的确是带着难以言表的兴奋之情发布这个新功能的。</p><p>经过小范围的实际使用，效果很是不错，接口自动化测试用例的编写效率得到了极大的提升。而且，由于<code>HAR</code>本身的开放性，留给用户的选择非常多。</p><p>即便如此，我觉得<code>HttpRunner</code>的易用性还可以得到更大的提升。</p><p>当前，我规划了两项新特性将在近期完成：</p><ul><li>支持<code>PostMan</code>：将<code>Postman Collection Format</code>格式转换为<code>HttpRunner</code>支持的<code>YAML/JSON</code>测试用例；</li><li>支持<code>Swagger</code>：将<code>Swagger</code>定义的API转换为<code>HttpRunner</code>支持的<code>YAML/JSON</code>测试用例。</li></ul><p>等这两个新特性完成之后，相信<code>HttpRunner</code>会更上一个台阶。</p><p>如果你们有什么更好的想法，欢迎联系我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;HttpRunner&lt;/code&gt;开始支持&lt;code&gt;HAR&lt;/code&gt;啦！！！&lt;/p&gt;
&lt;p&gt;如果你还没有体会到这三个感叹号的含义，那们你可能对&lt;code&gt;HAR&lt;/code&gt;还不了解。&lt;/p&gt;
&lt;h2 id=&quot;HAR-是什么？&quot;&gt;&lt;a href=&quot;#HAR
      
    
    </summary>
    
      <category term="1. OpenSource" scheme="https://debugtalk.com/categories/1-OpenSource/"/>
    
      <category term="HttpRunner" scheme="https://debugtalk.com/categories/1-OpenSource/HttpRunner/"/>
    
    
      <category term="HttpRunner" scheme="https://debugtalk.com/tags/HttpRunner/"/>
    
      <category term="HAR" scheme="https://debugtalk.com/tags/HAR/"/>
    
  </entry>
  
</feed>
